import{S as z,g as x,D as G}from"./atlas_CGrAwTYnSDNTtni2msvpu.js";import{G as k,C as i,B as A,a as O,I as v,N as F,o as L,V as R}from"./atlas_BptVXGp7hwWSDe7IbaYgj.js";class I{snowflakeGroup;planetRadius;materials=[];particleSystems=[];trailPositions=[];trailColors=[];globalWindDirection;rng;startTime;timeSpeed;trailLength=15;particleCount;rotationSpeed;particleOpacity;windSpeedMultiplier;verticalOscillation;gustCycles;gustPhases;gustZones;burstZone;burstCycleDuration;burstDuration;burstStartOffset;constructor(s,e={}){this.snowflakeGroup=new k,this.planetRadius=s;const a=e.seed||Math.floor(Math.random()*1e6);this.rng=new z(a),this.particleCount=e.particleCount||10,e.windSpeed;const c=(e.size||1)*(s*.2),o=e.opacity||1;this.globalWindDirection=this.rng.uniform(0,Math.PI*2),this.startTime=this.rng.uniform(0,1e3),this.timeSpeed=this.rng.uniform(2,4),this.rotationSpeed=this.rng.uniform(.2,.8),this.particleOpacity=this.rng.uniform(.05,.25),this.windSpeedMultiplier=this.rng.uniform(1.1,2.5),this.verticalOscillation=this.rng.uniform(.1,.4),this.gustCycles=[],this.gustPhases=[],this.gustZones=[];for(let h=0;h<this.particleCount;h++){this.gustCycles.push(this.rng.uniform(15,30)),this.gustPhases.push(this.rng.uniform(0,1));const n=this.rng.uniform(0,Math.PI*2),t=this.rng.uniform(Math.PI*.3,Math.PI*.6);this.gustZones.push({start:n,end:(n+t)%(Math.PI*2)})}this.burstZone={lat:this.rng.uniform(-Math.PI/3,Math.PI/3),lon:this.rng.uniform(0,Math.PI*2),radius:this.rng.uniform(1.2,2)},this.burstCycleDuration=this.rng.uniform(45,75),this.burstDuration=this.rng.uniform(8,15),this.burstStartOffset=this.rng.uniform(0,this.burstCycleDuration);const r=e.colors||[new i(1,1,1),new i(.9,.9,.9),new i(.7,.7,.7),new i(.5,.5,.5),new i(.3,.3,.3)];this.createSnowflakeSystem(this.particleCount,c,o,r)}createSnowflakeSystem(s,e,a,c){const o=[];for(let n=0;n<s;n++){let t,d,p,m=0;do{const u=(this.rng.uniform(-1,1)+this.rng.uniform(-1,1))*.2,M=this.rng.uniform(-1,1)*this.burstZone.radius;t=Math.max(0,Math.min(Math.PI,this.burstZone.lat+Math.PI/2+u)),d=(this.burstZone.lon+M)%(Math.PI*2);const P=Math.abs(t-(this.burstZone.lat+Math.PI/2)),y=Math.min(Math.abs(d-this.burstZone.lon),Math.PI*2-Math.abs(d-this.burstZone.lon));p=Math.max(P/.3,y/this.burstZone.radius),m++}while(p>1&&m<10);p>1&&(t=this.burstZone.lat+Math.PI/2+this.rng.uniform(-.1,.1),d=this.burstZone.lon+this.rng.uniform(-this.burstZone.radius,this.burstZone.radius));const l=this.planetRadius*this.rng.uniform(1.001,1.005),g=l*Math.sin(t)*Math.cos(d),b=l*Math.cos(t),f=l*Math.sin(t)*Math.sin(d);o.push(g,b,f)}const r=[],h=new i;for(let n=0;n<this.trailLength;n++){const t=Math.pow(1-n/(this.trailLength-1),1.5);h.setRGB(t,t,t),r.push(h.r,h.g,h.b)}for(let n=0;n<s;n++){const t=n*3,d=o[t],p=o[t+1],m=o[t+2],l=new Float32Array(this.trailLength*3);for(let u=0;u<this.trailLength;u++){const M=u*.1;l[u*3]=d+this.rng.uniform(-1,1)*M*this.planetRadius*.01,l[u*3+1]=p+this.rng.uniform(-1,1)*M*this.planetRadius*.01,l[u*3+2]=m+this.rng.uniform(-1,1)*M*this.planetRadius*.01}const g=new A;g.setAttribute("position",new O(l,3)),g.setAttribute("color",new O(new Float32Array(r),3));const b=new v({vertexColors:!0,transparent:!0,opacity:this.particleOpacity,blending:F,depthTest:!0,linewidth:3}),f=new L(g,b);this.materials.push(b),this.particleSystems.push(f),this.trailPositions.push(l),this.trailColors.push(new Float32Array(r)),f.rnd=this.rng.uniform(0,1),f.particleIndex=n,this.snowflakeGroup.add(f)}}update(s=.016){const a=x(G,this.timeSpeed,this.startTime),o=(Date.now()/1e3+this.burstStartOffset)%this.burstCycleDuration;o<this.burstDuration&&o/this.burstDuration,this.snowflakeGroup.visible=!0,this.particleSystems.forEach((r,h)=>{const n=r.geometry.getAttribute("position"),t=n.array,d=r.rnd,p=r.particleIndex,m=this.calculateTrailPath(a,p,d);for(let C=this.trailLength-1;C>0;C--){const T=C*3,Z=(C-1)*3;t[T]=t[Z],t[T+1]=t[Z+1],t[T+2]=t[Z+2]}t[0]=m.x,t[1]=m.y,t[2]=m.z,n.needsUpdate=!0;const l=Date.now()/1e3,g=this.gustCycles[h],b=this.gustPhases[h],f=(l/g+b)%1;let u=0;f<.3?u=f/.3:f<.7?u=1:u=(1-f)/.3;const M=new R(t[0],t[1],t[2]),P=Math.atan2(M.z,M.x),y=P<0?P+Math.PI*2:P,S=this.gustZones[h];let D=!1;S.start<S.end?D=y>=S.start&&y<=S.end:D=y>=S.start||y<=S.end,this.materials[h].opacity=D?this.particleOpacity*u:0})}calculateTrailPath(s,e,a){s+=10*a+e*.1;const c=this.burstZone.lon+(a-.5)*this.burstZone.radius,o=this.burstZone.lat+Math.PI/2+(a-.5)*.2,r=this.windSpeedMultiplier,h=s*r,n=c+Math.cos(this.globalWindDirection)*h,t=o+this.verticalOscillation*Math.sin(s*.5+a),d=.015*Math.sin(s*2+a*10),p=this.planetRadius*(1.005+d),m=p*Math.sin(t)*Math.cos(n),l=p*Math.cos(t),g=p*Math.sin(t)*Math.sin(n);return{x:m,y:l,z:g}}addToScene(s,e){e&&this.snowflakeGroup.position.copy(e),s.add(this.snowflakeGroup)}getObject3D(){return this.snowflakeGroup}dispose(){this.materials.forEach(s=>s.dispose()),this.particleSystems.forEach(s=>s.geometry.dispose()),this.materials=[],this.particleSystems=[],this.trailPositions=[],this.trailColors=[],this.snowflakeGroup.clear()}}function _(w,s,e){if(s.type!=="tundra")return null;const a=e||Math.floor(Math.random()*1e6),c=s.snow_intensity||.7,o=s.wind_strength||1,r=Math.floor(c*200+50),h=o*5;return new I(w,{particleCount:r,windSpeed:h,size:1.2,opacity:.9,seed:a+15e3})}function W(w,s,e){const a=e||Math.floor(Math.random()*1e6),c=[new i(.8,.7,.6),new i(.9,.8,.7),new i(.6,.5,.4),new i(1,.9,.8),new i(.7,.6,.5)],o=15,r=2.5;return new I(w,{particleCount:o,windSpeed:r,size:1.5,opacity:1,colors:c,seed:a+15e3})}function N(w,s,e){const a=e||Math.floor(Math.random()*1e6),c=[new i(.9,.8,.6),new i(.8,.7,.5),new i(.7,.6,.4),new i(1,.9,.7),new i(.6,.5,.3)],o=12,r=3.5;return new I(w,{particleCount:o,windSpeed:r,size:1.3,opacity:.8,colors:c,seed:a+15e3})}function U(w,s,e){const a=e||Math.floor(Math.random()*1e6),c=[new i(.5,0,.8),new i(.7,.2,.7),new i(.4,0,.6),new i(.8,0,.8),new i(.3,.6,.3)],o=18,r=2.8;return new I(w,{particleCount:o,windSpeed:r,size:1.1,opacity:.7,colors:c,seed:a+15e3})}export{I as T,U as a,W as b,_ as c,N as d};
