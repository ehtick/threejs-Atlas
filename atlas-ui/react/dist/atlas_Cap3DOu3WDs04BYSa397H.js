import{G as A,B as l,a as g,a2 as p,o as d,b as M,z as y,M as G}from"./atlas_B2lpKXcKkLCAPkjGiW29w.js";class T{sunLine=null;rotationLine=null;debugGroup;params;planetRadius;constructor(t,i={}){this.planetRadius=t,this.params={showSunLine:!0,showRotationLine:!0,showRotationInfo:!0,showTimeInfo:!0,planetRadius:t,...i},this.debugGroup=new A,this.createDebugElements()}createDebugElements(){this.params.showSunLine&&this.createSunLine(),this.params.showRotationLine&&this.createRotationLine()}createSunLine(){const t=this.calculateSunAngle(),i=this.planetRadius*3,e=t,n=i*Math.cos(e),o=i*Math.sin(e),a=o*.8,r=new l,m=new Float32Array([0,0,0,n,a,o]);r.setAttribute("position",new g(m,3));const L=new p({color:16776960,linewidth:5,transparent:!1});this.sunLine=new d(r,L),this.debugGroup.add(this.sunLine);const u=t+Math.PI,c=i*.7,w=c*Math.cos(u),R=0,b=c*Math.sin(u),S=new M(this.planetRadius*.15,16,16),f=new y({color:16776960,transparent:!1,opacity:1}),h=new G(S,f);h.position.set(w,R,b),this.debugGroup.add(h),this.createTestSpheres()}createTestSpheres(){}createRotationLine(){const t=this.calculateCurrentRotation(),i=this.planetRadius*25,e=new l,n=new Float32Array([-i*Math.cos(t),0,-i*Math.sin(t),i*Math.cos(t),0,i*Math.sin(t)]);e.setAttribute("position",new g(n,3));const o=new p({color:9079434,linewidth:2,transparent:!1});this.rotationLine=new d(e,o),this.debugGroup.add(this.rotationLine)}calculateSunAngle(){return this.params.sunAngle!==void 0?this.params.sunAngle:this.params.orbitalAngle||0}calculateCurrentRotation(){const t=this.params.currentTime||Date.now()/1e3,i=this.params.cosmicOriginTime||t-3600,e=this.params.rotationPeriod||86400,n=this.params.initialAngleRotation||0,o=t-i,a=2*Math.PI/e;return(n+o*a)%(2*Math.PI)}update(t,i){i&&(this.params={...this.params,...i}),this.sunLine&&this.params.showSunLine&&this.updateSunLine(),this.rotationLine&&this.params.showRotationLine&&this.updateRotationLine()}updateSunLine(){if(!this.sunLine)return;const i=this.calculateSunAngle(),e=this.planetRadius*20,n=this.sunLine.geometry,o=n.attributes.position.array;o[3]=e*Math.cos(i),o[4]=0,o[5]=e*Math.sin(i),n.attributes.position.needsUpdate=!0}updateRotationLine(){if(!this.rotationLine)return;const t=this.calculateCurrentRotation(),i=this.planetRadius*25,e=this.rotationLine.geometry,n=e.attributes.position.array;n[0]=-i*Math.cos(t),n[1]=0,n[2]=-i*Math.sin(t),n[3]=i*Math.cos(t),n[4]=0,n[5]=i*Math.sin(t),e.attributes.position.needsUpdate=!0}addToScene(t,i){i&&this.debugGroup.position.copy(i),t.add(this.debugGroup)}getDebugInfo(){const t=this.calculateCurrentRotation(),i=this.calculateSunAngle();return{"Current Time":new Date().toISOString(),"Planet Rotation":`${(t*180/Math.PI).toFixed(2)}°`,"Sun Angle":`${(i*180/Math.PI).toFixed(2)}°`,"Rotation Period":`${this.params.rotationPeriod}s`,"Cosmic Origin":new Date((this.params.cosmicOriginTime||0)*1e3).toISOString()}}toggleSunLine(t){this.sunLine&&(this.sunLine.visible=t)}toggleRotationLine(t){this.rotationLine&&(this.rotationLine.visible=t)}getObject3D(){return this.debugGroup}dispose(){this.debugGroup.clear(),this.sunLine&&(this.sunLine.geometry.dispose(),this.sunLine.material.dispose()),this.rotationLine&&(this.rotationLine.geometry.dispose(),this.rotationLine.material.dispose())}}function I(s,t){const i={currentTime:Date.now()/1e3,cosmicOriginTime:s.debug?.cosmic_origin_time||s.timing?.cosmic_origin_time||s.cosmicOriginTime,rotationPeriod:s.planet_info?.rotation_period||s.rotation_period_seconds||86400,initialAngleRotation:s.debug?.initial_angle_rotation||s.timing?.initial_angle_rotation||s.initialAngleRotation||0,planetRadius:t,orbitalAngle:s.timing?.orbital_angle||0,sunAngle:s.sun_angle||s.lighting?.sun_angle,showSunLine:!0,showRotationLine:!0,showRotationInfo:!0,showTimeInfo:!0};return new T(t,i)}export{T as V,I as c};
