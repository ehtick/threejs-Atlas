import{S as oe}from"./atlas_CZFakru7GGKiPV4DHwGyu.js";import{C as x,G as re,V as p,h as U,D as se,M as ae,B as ne,g as F}from"./atlas_BjkcO1_mNssSqp05cLhjd.js";const c={WATER_BODY_COUNT:{min:4,max:8},WATER_BODY_RADIUS:{min:.04,max:.15},WATER_BODY_DEPTH:{min:.01,max:.04},WATER_BODY_OPACITY:{min:.6,max:.8},SHAPE_IRREGULARITY:{min:.2,max:.5},COASTLINE_COMPLEXITY:{min:.3,max:.7}};class ie{waterGroup;waterBodyMeshes=[];params;rng;materials=[];planetRadius;constructor(e,t={}){console.log("ðŸŒŠ CREATING SuperEarthWaterFeaturesEffect - ORGANIC VERSION"),console.log("Planet radius:",e),console.log("Params:",t);const o=t.seed||Math.floor(Math.random()*1e6);this.rng=new oe(o),this.planetRadius=e,this.params={water_bodies:t.water_bodies||[],waterColor:t.waterColor||new x(.1,.4,.7),globalIrregularity:t.globalIrregularity||.6,seed:o,...t},this.waterGroup=new re,console.log("Creating organic water bodies..."),this.generateWaterBodies(),console.log(`âœ… Created ${this.waterBodyMeshes.length} organic water bodies`)}generateWaterBodies(){this.params.water_bodies&&this.params.water_bodies.length>0?(console.log(`Using ${this.params.water_bodies.length} water bodies from data`),this.params.water_bodies.forEach((e,t)=>{const o=this.createOrganicWaterBody(e,t);o&&(this.waterBodyMeshes.push(o),this.waterGroup.add(o),console.log(`Added organic water body ${t} at position:`,e.position_3d))})):(console.log("No water body data provided, generating procedural water bodies"),this.generateProceduralWaterBodies())}createOrganicWaterBody(e,t){if(!e.position_3d||e.position_3d.length!==3)return console.warn(`Water body ${t} missing valid position_3d:`,e.position_3d),null;const l=new p().fromArray(e.position_3d).normalize(),w=Math.max(.02,e.radius||.08)*this.planetRadius,s=e.shape_type||this.getRandomShapeType(),f=e.irregularity??this.params.globalIrregularity??.6;console.log(`Creating organic water body ${t} (${s}) with base size:`,w);const y=this.generateOrganicWaterGeometry(l,w,s,f,t);if(!y)return console.warn(`Failed to generate geometry for water body ${t}`),null;const M=this.params.waterColor instanceof x?this.params.waterColor:new x().fromArray(this.params.waterColor),_=new U({color:M,opacity:Math.max(.6,e.opacity||.75),transparent:!0,emissive:M.clone().multiplyScalar(.05),side:se,depthWrite:!0,depthTest:!0});this.materials.push(_);const d=new ae(y,_);return d.renderOrder=1002,d.castShadow=!1,d.receiveShadow=!0,console.log(`Organic water body ${t} created successfully`),d}generateProceduralWaterBodies(){const e=this.rng.randint(c.WATER_BODY_COUNT.min,c.WATER_BODY_COUNT.max);console.log(`Generating ${e} procedural water bodies using PROCEDURAL_RANGES`);for(let t=0;t<e;t++){const o=this.getRandomShapeType();let l=this.rng.uniform(c.SHAPE_IRREGULARITY.min,c.SHAPE_IRREGULARITY.max);o==="complex"?l=Math.max(l,.6):o==="pond"&&(l=Math.min(l,.4));const w={position_3d:this.generateRandomSurfacePoint(),radius:this.rng.uniform(c.WATER_BODY_RADIUS.min,c.WATER_BODY_RADIUS.max),depth:this.rng.uniform(c.WATER_BODY_DEPTH.min,c.WATER_BODY_DEPTH.max),opacity:this.rng.uniform(c.WATER_BODY_OPACITY.min,c.WATER_BODY_OPACITY.max),shape_type:o,irregularity:l,coastline_complexity:this.rng.uniform(c.COASTLINE_COMPLEXITY.min,c.COASTLINE_COMPLEXITY.max)},s=this.createOrganicWaterBody(w,t);s&&(this.waterBodyMeshes.push(s),this.waterGroup.add(s),console.log(`Generated procedural water body ${t} with shape ${o}`))}}getRandomShapeType(){const e=this.rng.uniform(0,1);return e<.4?"lake":e<.7?"pond":e<.9?"elongated":"complex"}generateOrganicWaterGeometry(e,t,o,l,w){const s=new p,f=new p;Math.abs(e.y)<.99?s.crossVectors(e,new p(0,1,0)).normalize():s.crossVectors(e,new p(1,0,0)).normalize(),f.crossVectors(e,s).normalize();let y=1,M=0,_=l*.4;switch(o){case"elongated":y=this.rng.uniform(2,4),_*=1.2;break;case"complex":M=.3,_*=1.5;break;case"pond":_*=.7;break}const d=Math.max(32,Math.min(128,Math.floor(t*500))),L=(r,n)=>{let h=0,i=1,a=3/Math.max(t*.1,1),u=0;const b=o==="complex"?5:4;for(let W=0;W<b;W++){const C=r*a,Y=n*a,R=(A,ee)=>{const te=A*12.9898+ee*78.233;return Math.sin(te+w*1e3)*43758.5453%1},E=Math.floor(C),m=Math.floor(Y),H=C-E,j=Y-m,V=A=>A*A*A*(A*(A*6-15)+10),v=V(H),N=V(j),X=R(E,m),k=R(E+1,m),q=R(E,m+1),Z=R(E+1,m+1),J=X*(1-v)+k*v,K=q*(1-v)+Z*v,Q=J*(1-N)+K*N;h+=Q*i,u+=i,i*=.5,a*=2.1}return h/u},I=[],S=[],$=[],z=.2,T=new Map;let D=0;for(let r=0;r<=d;r++)for(let n=0;n<=d;n++){const h=(r/d-.5)*2,i=(n/d-.5)*2,a=h*y,u=i,b=Math.sqrt(a*a+u*u);let W=1-b;const C=L(a*2,u*2);if(W+C*_+M*Math.abs(C)>z&&b<1.3){const R=h*t,E=i*t,m=new p().addScaledVector(s,R).addScaledVector(f,E);I.push(m.x,m.y,m.z),$.push((h+1)*.5,(i+1)*.5),T.set(`${r},${n}`,D),D++}}for(let r=0;r<d;r++)for(let n=0;n<d;n++){const h=T.get(`${r},${n}`),i=T.get(`${r+1},${n}`),a=T.get(`${r},${n+1}`),u=T.get(`${r+1},${n+1}`);h!==void 0&&i!==void 0&&a!==void 0&&S.push(h,i,a),i!==void 0&&u!==void 0&&a!==void 0&&S.push(i,u,a)}if(I.length===0||S.length===0)return console.warn("No vertices generated for organic water body"),null;const g=new ne;g.setAttribute("position",new F(I,3)),g.setAttribute("uv",new F($,2)),g.setIndex(S),g.computeVertexNormals();const B=g.attributes.position,O=e.clone().multiplyScalar(this.planetRadius),P=new p;for(let r=0;r<B.count;r++){P.fromBufferAttribute(B,r);const a=P.clone().add(O).clone().normalize().multiplyScalar(this.planetRadius*1.003).sub(O);B.setXYZ(r,a.x,a.y,a.z)}return B.needsUpdate=!0,g.computeVertexNormals(),g.translate(O.x,O.y,O.z),g}generateRandomSurfacePoint(){const e=this.rng.uniform(-.7,.7),t=this.rng.uniform(0,Math.PI*2),o=new p(Math.cos(t)*Math.cos(e),Math.sin(e),Math.sin(t)*Math.cos(e)).normalize();return[o.x,o.y,o.z]}addToScene(e,t){console.log("ðŸŒŠ Adding water features to scene"),t&&(this.waterGroup.position.copy(t),console.log("Water group positioned at:",t)),e.add(this.waterGroup),console.log(`âœ… Added ${this.waterBodyMeshes.length} water bodies to scene`)}update(e){}updateParams(e){if(this.params={...this.params,...e},e.waterColor){const t=e.waterColor instanceof x?e.waterColor:new x().fromArray(e.waterColor);this.materials.forEach(o=>{o instanceof U&&(o.color.copy(t),o.emissive.copy(t.clone().multiplyScalar(.1)))})}}getObject3D(){return this.waterGroup}dispose(){console.log("ðŸŒŠ Disposing water features"),this.waterBodyMeshes.forEach(e=>{e.geometry.dispose()}),this.materials.forEach(e=>{e.dispose()}),this.waterBodyMeshes=[],this.materials=[],this.waterGroup.clear()}}function de(G,e,t){console.log("ðŸŒŠ Creating Organic SuperEarthWaterFeatures from Python data"),console.log("Surface data:",e);const l=(t||Math.floor(Math.random()*1e6))+1e4;let s=(e.water_features||{}).water_bodies||[];console.log("Water bodies from Python:",s),s.length===0&&(console.log("No water bodies from Python, will generate procedural ones"),s=[]);const f={water_bodies:s,waterColor:new x(.1,.4,.7),globalIrregularity:.6,seed:l};console.log("Creating SuperEarthWaterFeaturesEffect with params:",f);const y=new ie(G,f);return console.log("âœ… Organic SuperEarthWaterFeaturesEffect created successfully"),y}export{de as c};
