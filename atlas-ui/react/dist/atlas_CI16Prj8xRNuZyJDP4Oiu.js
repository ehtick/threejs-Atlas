import{S as g}from"./atlas_C7ZhNUnMOt3kEE8jtIwhb.js";import{C as E,G as N,V as C,B as F,a as P,S as L,A as z,P as B,Q as H}from"./atlas_BjkcO1_mNssSqp05cLhjd.js";const p={ERUPTION_COUNT:{min:15,max:35},ERUPTION_FREQUENCY:{min:.2,max:.8},ERUPTION_DURATION:{min:2,max:5},ERUPTION_HEIGHT:{min:.05,max:.15},ERUPTION_SPREAD:{min:.6,max:1.9},PARTICLES_PER_ERUPTION:{min:50,max:150},PARTICLE_SIZE:{min:.07,max:.09},PARTICLE_LIFETIME:{min:1.5,max:3.5},PARTICLE_SPEED:{min:.1,max:.4},EMISSIVE_INTENSITY:{min:2,max:4},TURBULENCE:{min:.5,max:1.5}};class V{position;direction;lastEruptionTime=0;isActive=!1;eruptionStartTime=0;rng;particleDirections=[];particleSpeeds=[];particleSizes=[];particleLifetimes=[];particleBirthTimes=[];particleActive=[];constructor(e,t,r,i,s,a,l,n,o,u){this.position=e,this.direction=e.clone().normalize(),this.rng=new g(t);for(let c=0;c<s;c++)this.particleDirections.push(this.getRandomDirection(a)),this.particleSpeeds.push(l*(.7+this.rng.random()*.6)),this.particleSizes.push(n*u*(.5+this.rng.random())),this.particleLifetimes.push(o*(.8+this.rng.random()*.4)),this.particleBirthTimes.push(-1),this.particleActive.push(!1);this.isActive=!1,this.eruptionStartTime=0,this.lastEruptionTime=0}initializeStateFromAbsoluteTime(e,t,r,i){const s=1/t,a=r+s,l=i*a*.37%a,n=(e+l)%a;if(n<r){this.isActive=!0,this.eruptionStartTime=e-n,this.lastEruptionTime=this.eruptionStartTime-s;const o=e-this.eruptionStartTime,u=Math.min(o/r,1);for(let c=0;c<this.particleDirections.length;c++){const y=c/this.particleDirections.length*.7;u>y&&(this.particleActive[c]=!0,this.particleBirthTimes[c]=this.eruptionStartTime+y*r,e-this.particleBirthTimes[c]>this.particleLifetimes[c]&&(this.particleActive[c]=!1))}}else{this.isActive=!1,this.lastEruptionTime=e-n+r-s,this.eruptionStartTime=0;const o=e-n,u=o+r;for(let c=0;c<this.particleDirections.length;c++){const y=c/this.particleDirections.length*.7,v=o+y*r;if(v<u){const h=e-v;h>0&&h<=this.particleLifetimes[c]&&(this.particleActive[c]=!0,this.particleBirthTimes[c]=v)}}}}shouldErupt(e,t,r){const i=1/t+r,a=(e-this.lastEruptionTime)%i<r;return a&&!this.isActive?!0:(!a&&this.isActive&&this.stopEruption(),!1)}startEruption(e){this.isActive=!0,this.eruptionStartTime=e,this.lastEruptionTime=e}stopEruption(){this.isActive=!1}getRandomDirection(e){const t=this.rng.uniform(0,Math.PI*2),r=this.rng.uniform(0,e),i=new C(Math.sin(r)*Math.cos(t),Math.sin(r)*Math.sin(t),Math.cos(r)),s=new H;return s.setFromUnitVectors(new C(0,0,1),this.direction),i.applyQuaternion(s),i}}class I{fireGroup;eruptions=[];particleSystem;particleGeometry;particleMaterial;params;startTime;planetRadius;maxParticles=5e3;orbitalVisibilityFactor;temperatureActivationFactor;static vertexShader=`
    attribute float size;
    attribute float temperature;
    attribute float opacity;
    
    varying float vTemperature;
    varying float vOpacity;
    
    void main() {
      vTemperature = temperature;
      vOpacity = opacity;
      
      vec4 mvPosition = modelViewMatrix * vec4(position, 1.0);
      gl_PointSize = size * (300.0 / -mvPosition.z);
      gl_Position = projectionMatrix * mvPosition;
    }
  `;static fragmentShader=`
    uniform vec3 fireColorHot;
    uniform vec3 fireColorMid;
    uniform vec3 fireColorCool;
    uniform vec3 smokeColor;
    uniform float emissiveIntensity;
    
    varying float vTemperature;
    varying float vOpacity;
    
    void main() {
      // Forma circular de la partícula
      vec2 center = gl_PointCoord - vec2(0.5);
      float dist = length(center);
      
      // Suavizar los bordes con fadeout más gradual
      float alpha = 1.0 - smoothstep(0.2, 0.5, dist);
      alpha *= vOpacity;
      
      // Fadeout adicional basado en opacidad para transición más suave
      alpha *= smoothstep(0.0, 0.3, vOpacity);
      
      // Descartar píxeles transparentes
      if (alpha < 0.01) discard;
      
      // Color basado en temperatura
      vec3 color;
      if (vTemperature > 0.7) {
        // Muy caliente: entre blanco-amarillo y naranja
        color = mix(fireColorMid, fireColorHot, (vTemperature - 0.7) / 0.3);
      } else if (vTemperature > 0.3) {
        // Caliente: entre naranja y rojo
        color = mix(fireColorCool, fireColorMid, (vTemperature - 0.3) / 0.4);
      } else {
        // Enfriándose: entre rojo oscuro y humo
        color = mix(smokeColor, fireColorCool, vTemperature / 0.3);
      }
      
      // Añadir emisividad para brillar
      color *= emissiveIntensity * (0.5 + vTemperature * 0.5);
      
      // Efecto de brillo en el centro
      float glow = 1.0 - dist * 2.0;
      color += vec3(1.0, 0.8, 0.3) * glow * vTemperature * 0.5;
      
      gl_FragColor = vec4(color, alpha);
    }
  `;constructor(e,t={}){this.planetRadius=e;const r=t.seed||Math.floor(Math.random()*1e6),i=new g(r);this.startTime=t.startTime||r%1e4/1e3;const s=t.fireColorHot instanceof E?t.fireColorHot:new E(1,.95,.8),a=t.fireColorMid instanceof E?t.fireColorMid:new E(1,.5,.1),l=t.fireColorCool instanceof E?t.fireColorCool:new E(.8,.2,0),n=t.smokeColor instanceof E?t.smokeColor:new E(.2,.1,.05);this.params={eruptionCount:t.eruptionCount||Math.floor(i.uniform(p.ERUPTION_COUNT.min,p.ERUPTION_COUNT.max)),eruptionFrequency:t.eruptionFrequency||i.uniform(p.ERUPTION_FREQUENCY.min,p.ERUPTION_FREQUENCY.max),eruptionDuration:t.eruptionDuration||i.uniform(p.ERUPTION_DURATION.min,p.ERUPTION_DURATION.max),eruptionHeight:t.eruptionHeight||i.uniform(p.ERUPTION_HEIGHT.min,p.ERUPTION_HEIGHT.max),eruptionSpread:t.eruptionSpread||i.uniform(p.ERUPTION_SPREAD.min,p.ERUPTION_SPREAD.max),particlesPerEruption:t.particlesPerEruption||Math.floor(i.uniform(p.PARTICLES_PER_ERUPTION.min,p.PARTICLES_PER_ERUPTION.max)),particleSize:t.particleSize||i.uniform(p.PARTICLE_SIZE.min,p.PARTICLE_SIZE.max),particleLifetime:t.particleLifetime||i.uniform(p.PARTICLE_LIFETIME.min,p.PARTICLE_LIFETIME.max),particleSpeed:t.particleSpeed||i.uniform(p.PARTICLE_SPEED.min,p.PARTICLE_SPEED.max),particleGravity:t.particleGravity||.05,fireColorHot:s,fireColorMid:a,fireColorCool:l,smokeColor:n,emissiveIntensity:t.emissiveIntensity||i.uniform(p.EMISSIVE_INTENSITY.min,p.EMISSIVE_INTENSITY.max),glowIntensity:t.glowIntensity||2,turbulenceStrength:t.turbulenceStrength||i.uniform(p.TURBULENCE.min,p.TURBULENCE.max),windStrength:t.windStrength||.1,seed:r,startTime:this.startTime,timeSpeed:t.timeSpeed||i.uniform(.1,2),orbitalData:t.orbitalData,currentTime:t.currentTime||0,planetTemperature:t.planetTemperature||0},this.temperatureActivationFactor=this.calculateTemperatureActivation(),this.orbitalVisibilityFactor=this.calculateOrbitalVisibility(),this.fireGroup=new N,this.createEruptionPoints(i),this.initializeStateFromAbsoluteTime(),this.createParticleSystem(),this.initializeActiveEruptions();const u=(this.startTime+Date.now()/1e3*this.params.timeSpeed)%1e3;this.updateParticleGeometry(u)}initializeStateFromAbsoluteTime(){const t=(this.startTime+Date.now()/1e3*this.params.timeSpeed)%1e3;for(let r=0;r<this.eruptions.length;r++)this.eruptions[r].initializeStateFromAbsoluteTime(t,this.params.eruptionFrequency,this.params.eruptionDuration,r)}createEruptionPoints(e){const t=this.params.eruptionCount;for(let r=0;r<t;r++){const i=e.uniform(0,Math.PI*2),s=Math.acos(e.uniform(-1,1)),a=new C(Math.sin(s)*Math.cos(i)*this.planetRadius,Math.sin(s)*Math.sin(i)*this.planetRadius,Math.cos(s)*this.planetRadius),l=new V(a,Math.floor(e.random()*1e6),this.params.eruptionFrequency,this.params.eruptionDuration,150,this.params.eruptionSpread,this.params.particleSpeed,this.params.particleSize,this.params.particleLifetime,this.planetRadius);this.eruptions.push(l)}}createParticleSystem(){this.particleGeometry=new F;const e=new Float32Array(this.maxParticles*3),t=new Float32Array(this.maxParticles),r=new Float32Array(this.maxParticles),i=new Float32Array(this.maxParticles);this.particleGeometry.setAttribute("position",new P(e,3)),this.particleGeometry.setAttribute("size",new P(t,1)),this.particleGeometry.setAttribute("temperature",new P(r,1)),this.particleGeometry.setAttribute("opacity",new P(i,1)),this.particleMaterial=new L({vertexShader:I.vertexShader,fragmentShader:I.fragmentShader,uniforms:{fireColorHot:{value:this.params.fireColorHot},fireColorMid:{value:this.params.fireColorMid},fireColorCool:{value:this.params.fireColorCool},smokeColor:{value:this.params.smokeColor},emissiveIntensity:{value:this.params.emissiveIntensity}},transparent:!0,blending:z,depthWrite:!1,vertexColors:!1}),this.particleSystem=new B(this.particleGeometry,this.particleMaterial),this.particleSystem.renderOrder=4,this.fireGroup.add(this.particleSystem)}initializeActiveEruptions(){const t=(this.startTime+Date.now()/1e3*this.params.timeSpeed)%1e3;for(let r=0;r<this.eruptions.length;r++){const i=this.eruptions[r],s=1/this.params.eruptionFrequency,a=this.params.eruptionDuration+s,l=r*a*.37%a,n=Math.max(...i.particleLifetimes),o=Math.ceil(n/a)+1;for(let u=0;u<o;u++){const c=t-u*a,y=(c+l)%a;if(y<this.params.eruptionDuration){const v=c-y;for(let h=0;h<150;h++){const m=h/150*.7,d=v+m*this.params.eruptionDuration,f=t-d;f>0&&f<=i.particleLifetimes[h]&&(i.particleActive[h]||(i.particleActive[h]=!0,i.particleBirthTimes[h]=d))}}}}}calculateTemperatureActivation(){const e=this.params.planetTemperature||0;return e<1500?0:e>=3e3?1:(e-1500)/1500}calculateOrbitalVisibility(){if(!this.params.orbitalData||!this.params.orbitalData.enabled)return 1;const e=this.params.cosmicOriginTime||51408e4,i=(Date.now()/1e3-e)/(365.25*24*3600)%this.params.orbitalData.cycle_duration_years/this.params.orbitalData.cycle_duration_years,s=this.params.orbitalData.visible_duration_years/this.params.orbitalData.cycle_duration_years,a=i<=s;let l=0;if(a){const n=i/s;n<.1?l=n/.1:n>.9?l=(1-n)/.1:l=1}return l}updateParticleGeometry(e){const t=this.particleGeometry.attributes.position,r=this.particleGeometry.attributes.size,i=this.particleGeometry.attributes.temperature,s=this.particleGeometry.attributes.opacity;let a=0;const l=150;for(let n=0;n<this.eruptions.length;n++){const o=this.eruptions[n],u=1/this.params.eruptionFrequency,c=this.params.eruptionDuration+u,y=n*c*.37%c,v=(e+y)%c,h=v<this.params.eruptionDuration;if(h&&!o.isActive?(o.isActive=!0,o.eruptionStartTime=e-v):!h&&o.isActive&&(o.isActive=!1),h){const m=e-o.eruptionStartTime,d=Math.min(m/this.params.eruptionDuration,1);for(let f=0;f<l;f++){const A=f/l*.7;d>A&&!o.particleActive[f]&&(o.particleActive[f]=!0,o.particleBirthTimes[f]=e-(d-A)*this.params.eruptionDuration)}}for(let m=0;m<l&&a<this.maxParticles;m++)if(o.particleActive[m]){const d=e-o.particleBirthTimes[m],f=o.particleLifetimes[m];if(d>f){o.particleActive[m]=!1;continue}const A=o.particleDirections[m].clone(),M=o.particleSpeeds[m]*d,S=o.position.clone().add(A.multiplyScalar(M)),D=this.params.particleGravity*d*d*.5;S.y-=D;const w=new C(Math.sin(e*.5+m*.1)*.01,Math.cos(e*.3+m*.1)*.005,Math.sin(e*.7+m*.1)*.01);S.add(w);const _=d/f,x=Math.max(0,1-_*.9),U=this.smoothstep(0,.1,_),O=this.smoothstep(1,.7,_),b=U*O,G=o.particleSizes[m];b>.01&&(t.setXYZ(a,S.x,S.y,S.z),r.setX(a,G),i.setX(a,x),s.setX(a,b),a++)}}for(let n=a;n<this.maxParticles;n++)t.setXYZ(n,0,0,0),r.setX(n,0),s.setX(n,0),i.setX(n,0);t.needsUpdate=!0,r.needsUpdate=!0,i.needsUpdate=!0,s.needsUpdate=!0,this.particleGeometry.setDrawRange(0,a)}smoothstep(e,t,r){const i=Math.max(0,Math.min(1,(r-e)/(t-e)));return i*i*(3-2*i)}update(e){const r=(this.startTime+Date.now()/1e3*this.params.timeSpeed)%1e3;this.orbitalVisibilityFactor=this.calculateOrbitalVisibility();const i=this.temperatureActivationFactor*this.orbitalVisibilityFactor;if(i>0){if(this.updateParticleGeometry(r),this.particleMaterial&&this.particleMaterial.uniforms){const s=this.params.emissiveIntensity||1;this.particleMaterial.uniforms.emissiveIntensity.value=s*i}}else this.hideAllParticles()}hideAllParticles(){const e=this.particleGeometry.attributes.position,t=this.particleGeometry.attributes.size,r=this.particleGeometry.attributes.opacity,i=this.particleGeometry.attributes.temperature;for(let s=0;s<this.maxParticles;s++)e.setXYZ(s,0,0,0),t.setX(s,0),r.setX(s,0),i.setX(s,0);e.needsUpdate=!0,t.needsUpdate=!0,i.needsUpdate=!0,r.needsUpdate=!0,this.particleGeometry.setDrawRange(0,0)}addToScene(e,t){t&&this.fireGroup.position.copy(t),e.add(this.fireGroup)}getObject3D(){return this.fireGroup}dispose(){this.particleGeometry.dispose(),this.particleMaterial.dispose(),this.fireGroup.clear(),this.eruptions=[]}}function k(T,e,t){const r=T?.seeds?.planet_seed||Math.floor(Math.random()*1e6),i=T?.original_planet_data?.surface_temperature||0,s=T?.timing?.elapsed_time?T.timing.elapsed_time/(365.25*24*3600):0,a=T?.original_planet_data?.orbital_period_seconds?T.original_planet_data.orbital_period_seconds/(365.25*24*3600):1,l=T?.fire_eruption_data||{},n=new g(r+9001),o=l.cycle_duration_years||n.uniform(a*.3,a*.5),u={enabled:l.enabled!==void 0?l.enabled:!0,cycle_duration_years:o,visible_duration_years:l.visible_duration_years||n.uniform(o*.4,o*.55)},c={seed:r+9e3,planetTemperature:i,orbitalData:u,currentTime:s,cosmicOriginTime:T?.timing?.cosmic_origin_time};return new I(e,c)}export{I as F,k as c};
