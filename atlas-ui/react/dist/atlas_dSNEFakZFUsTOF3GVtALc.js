import{r as y,j as d,a as K,c as M,R as p}from"./atlas_C3xj8MG9oH9uC54MklkAb.js";import{A as ee,E as se,D as te,R as ie,L as ne,S as F,d as z,e as X,F as he,H as ae,a as re}from"./atlas_i1DR7KrB-xunyzpDEnG-m.js";import{g as le,E as de,R as Oe,S as xe,M as ce,a as $,D as ue,b as oe,T as Le}from"./atlas_BNmZdVxd96FSoxfgh6N8D.js";import{S as Y,M as Q,E as fe}from"./atlas_D9WDsCw0X8TduftsoVtNe.js";import{e as Ee}from"./atlas_VCubJKDOL5Jc0RUG-uxb-.js";import{V as Se}from"./atlas_DwvSdObFEIQcgn4zq5yYd.js";import"./atlas_C0q7_QgoBkw_1ECio0nFC.js";import"./atlas_jwQDkDgkbYrDf9CRKibQy.js";import"./atlas_pGQiCQeTD5l6dMUXRRcYJ.js";import"./atlas_D0eA6tgysic-V8oq2dTta.js";import"./atlas_D31v7Al7eqV3B0M2QxzuG.js";import"./atlas_DHEyh2PRya1CVc9B_tQzq.js";import"./atlas_Cs0We1NVUxzA8UwJU4DMq.js";import"./atlas_4Br5bcXbvuWUmKa_tm5wr.js";import"./atlas_CtOhIAiNHzSpXytHIyKwk.js";import"./atlas_C6pdp7ZaYdLNQa3nKe66N.js";import"./atlas_CCCB6wayl60uvstX_VV1b.js";import"./atlas_DJ7i7UfL_c0UysIQfk_Wq.js";import"./atlas_CwYcokoa2i6NGa8CMcVH-.js";import"./atlas_CDmCjAbKL2BudWSRsmj9N.js";import"./atlas_MjNYrLc1c4EY8hYLeoBxW.js";import"./atlas_BJ_QDdZoUPjYT-9n_I4Gp.js";import"./atlas_HiFslN68N6WR8NcVQRQp7.js";import"./atlas_ChinNMIx15I-x-zfb2cxc.js";import"./atlas_BK5KpVHHDMchlABYedhdJ.js";import"./atlas_D1CR0bARAX433mi1gofoX.js";import"./atlas_k2E4Oa2ZTr-ShzFQV4yGe.js";import"./atlas_CuSf8Ux199dN5TQGANNsL.js";import"./atlas_B-7ciEeDInNr7ubvXaM1p.js";import"./atlas_QIlGLcqC1yx-yIj5WPE_2.js";import"./atlas_BrtSY9WI0jnpWr8b8l2p0.js";import"./atlas_DozMyZz-MgtutptlVtnXw.js";import"./atlas_DSMMIt__RfTLlDwy5o46G.js";import"./atlas_FvuaiM6ukQxncYDnO-LRN.js";import"./atlas_AcePMkcyOwGOfjKIaBXr7.js";import"./atlas_qLVe_rIPJrOk-heQF9xYK.js";import"./atlas_CVSIdj3IKNuZh1Tc9MWju.js";import"./atlas_DEVVBRTll3E69js2-hd6f.js";import"./atlas_DJS6mCG7iAKygTFzFyy0q.js";import"./atlas_CXqOkCPqDZlFOooak3r6p.js";import"./atlas_CXGNRo_qmRRLtYwZjj9MN.js";import"./atlas_B-8_xMAZUXFU3ijFjimI-.js";import"./atlas_ZZwvv2NOfM75V8EKAgXHJ.js";import"./atlas_CNSvMCCms-TRWdl5PfLso.js";import"./atlas_DNAC-xK9EjNtVKbqCBrWr.js";import"./atlas_DleynCheRNz9nOtzxamBI.js";import"./atlas_DRk1PRoP8HUsgl6w7XFKV.js";import"./atlas_DuNAKdzbUSGhCUnfjh5BO.js";import"./atlas_D7m96u8GNCAETXWneOccD.js";import"./atlas_DDAIyn7FrSglShWFzRYs6.js";import"./atlas_CUZqEERRQBivhH-lGjb0z.js";import"./atlas_B3jNgK3wg_91IYqexUq2H.js";import"./atlas_M0UXn4YDKB4xcqAMdAR2c.js";import"./atlas_cDvRyMmiFrWDA_rD6LEQ8.js";import"./atlas_CsENJmsgVSKbIkIORp0De.js";import"./atlas_3xd9BqPYYnkrfh-Kzp59J.js";import"./atlas_B55frdK5FY4jYv3eL7WSF.js";import"./atlas_GBC17wBCdVuY879Mt3pV2.js";import"./atlas_EMT4MQkZxhiCjMEXcl8lu.js";import"./atlas_CNSwdXAEZgA__qIDxXEVA.js";import"./atlas_C3o773RrkB_QrrdANyLLX.js";import"./atlas_fEdukK2Ek4bJoqmXZLuoQ.js";import"./atlas_vhwV7nEeimrmal9rEu7B6.js";import"./atlas_BBGO3sthS_o2yDU3NQGQW.js";import"./atlas_DsAFxLjqd-fdDTXvXH8ER.js";const me=({effects:L,onToggleEffect:e})=>{const[s,t]=y.useState(L),[i,h]=y.useState(!1);y.useEffect(()=>{t(L)},[L]);const n=(r,l)=>{t(O=>O.map(f=>f.id===r?{...f,enabled:l}:f)),e(r,l)},a=r=>({crystalline_surface:"Crystalline Surface",fire_eruption:"Fire Eruption",carbon_trails:"Carbon Trails",radiation_rings:"Radiation Rings",molten_lava:"Molten Lava",lava_flows:"Lava Flows",lava_rivers:"Lava Rivers",aquifer_water:"Aquifer Water",ocean_currents:"Ocean Currents",atmosphere_clouds:"Atmosphere Clouds",crystal_formations:"Crystal Formations",cloud_layers:"Cloud Layers",storm_systems:"Storm Systems",volcanic_activity:"Volcanic Activity",aurora:"Aurora",magnetic_field:"Magnetic Field",city_lights:"City Lights",bioluminescence:"Bioluminescence",thermal_emissions:"Thermal Emissions"})[r]||r.replace(/_/g," ").replace(/\b\w/g,O=>O.toUpperCase()).replace("Layer","").replace("Effect","").trim();return s.length===0?null:d.jsxs("div",{className:"mt-4 pt-3 border-t border-white/10",children:[d.jsxs("div",{className:"flex items-center justify-between mb-2",children:[d.jsx("div",{className:"text-xs text-gray-400",children:"3D Effects Control"}),d.jsxs("button",{onClick:()=>h(!i),className:"text-xs text-blue-400 hover:text-blue-300 transition-colors",children:[i?"Hide":"Show"," (",s.filter(r=>r.enabled).length,"/",s.length,")"]})]}),i&&d.jsx("div",{className:"grid grid-cols-1 sm:grid-cols-2 gap-2 text-xs",children:s.map(r=>d.jsxs("div",{className:"bg-white/5 rounded p-2 flex items-center justify-between",children:[d.jsxs("label",{className:"flex items-center gap-2 cursor-pointer flex-1",children:[d.jsx("input",{type:"checkbox",checked:r.enabled,onChange:l=>n(r.id,l.target.checked),className:"rounded border-gray-400 text-blue-500 focus:ring-blue-500 focus:ring-offset-0 bg-white/10"}),d.jsx("span",{className:`${r.enabled?"text-white":"text-gray-500"} transition-colors`,children:a(r.type)})]}),d.jsx("span",{className:`text-[10px] ${r.enabled?"text-green-400":"text-gray-600"}`,children:r.enabled?"ON":"OFF"})]},r.id))}),i&&s.length>3&&d.jsxs("div",{className:"mt-2 flex gap-2",children:[d.jsx("button",{onClick:()=>{s.forEach(r=>n(r.id,!0))},className:"text-xs px-2 py-1 bg-green-500/20 text-green-400 rounded hover:bg-green-500/30 transition-colors",children:"Enable All"}),d.jsx("button",{onClick:()=>{s.forEach(r=>n(r.id,!1))},className:"text-xs px-2 py-1 bg-red-500/20 text-red-400 rounded hover:bg-red-500/30 transition-colors",children:"Disable All"})]})]})},Pe={Hydrogen:{symbol:"H",atomicNumber:1,category:"nonmetal"},Helium:{symbol:"He",atomicNumber:2,category:"noble-gas"},Lithium:{symbol:"Li",atomicNumber:3,category:"alkali-metal"},Beryllium:{symbol:"Be",atomicNumber:4,category:"alkaline-earth"},Boron:{symbol:"B",atomicNumber:5,category:"metalloid"},Carbon:{symbol:"C",atomicNumber:6,category:"nonmetal"},Nitrogen:{symbol:"N",atomicNumber:7,category:"nonmetal"},Oxygen:{symbol:"O",atomicNumber:8,category:"nonmetal"},Fluorine:{symbol:"F",atomicNumber:9,category:"halogen"},Neon:{symbol:"Ne",atomicNumber:10,category:"noble-gas"},Sodium:{symbol:"Na",atomicNumber:11,category:"alkali-metal"},Magnesium:{symbol:"Mg",atomicNumber:12,category:"alkaline-earth"},Aluminum:{symbol:"Al",atomicNumber:13,category:"post-transition"},Silicon:{symbol:"Si",atomicNumber:14,category:"metalloid"},Phosphorus:{symbol:"P",atomicNumber:15,category:"nonmetal"},Sulfur:{symbol:"S",atomicNumber:16,category:"nonmetal"},Chlorine:{symbol:"Cl",atomicNumber:17,category:"halogen"},Argon:{symbol:"Ar",atomicNumber:18,category:"noble-gas"},Potassium:{symbol:"K",atomicNumber:19,category:"alkali-metal"},Calcium:{symbol:"Ca",atomicNumber:20,category:"alkaline-earth"},Scandium:{symbol:"Sc",atomicNumber:21,category:"transition-metal"},Titanium:{symbol:"Ti",atomicNumber:22,category:"transition-metal"},Vanadium:{symbol:"V",atomicNumber:23,category:"transition-metal"},Chromium:{symbol:"Cr",atomicNumber:24,category:"transition-metal"},Manganese:{symbol:"Mn",atomicNumber:25,category:"transition-metal"},Iron:{symbol:"Fe",atomicNumber:26,category:"transition-metal"},Cobalt:{symbol:"Co",atomicNumber:27,category:"transition-metal"},Nickel:{symbol:"Ni",atomicNumber:28,category:"transition-metal"},Copper:{symbol:"Cu",atomicNumber:29,category:"transition-metal"},Zinc:{symbol:"Zn",atomicNumber:30,category:"post-transition"},Gallium:{symbol:"Ga",atomicNumber:31,category:"post-transition"},Germanium:{symbol:"Ge",atomicNumber:32,category:"metalloid"},Arsenic:{symbol:"As",atomicNumber:33,category:"metalloid"},Selenium:{symbol:"Se",atomicNumber:34,category:"nonmetal"},Bromine:{symbol:"Br",atomicNumber:35,category:"halogen"},Krypton:{symbol:"Kr",atomicNumber:36,category:"noble-gas"},Rubidium:{symbol:"Rb",atomicNumber:37,category:"alkali-metal"},Strontium:{symbol:"Sr",atomicNumber:38,category:"alkaline-earth"},Yttrium:{symbol:"Y",atomicNumber:39,category:"transition-metal"},Zirconium:{symbol:"Zr",atomicNumber:40,category:"transition-metal"},Niobium:{symbol:"Nb",atomicNumber:41,category:"transition-metal"},Molybdenum:{symbol:"Mo",atomicNumber:42,category:"transition-metal"},Technetium:{symbol:"Tc",atomicNumber:43,category:"transition-metal"},Ruthenium:{symbol:"Ru",atomicNumber:44,category:"transition-metal"},Rhodium:{symbol:"Rh",atomicNumber:45,category:"transition-metal"},Palladium:{symbol:"Pd",atomicNumber:46,category:"transition-metal"},Silver:{symbol:"Ag",atomicNumber:47,category:"transition-metal"},Cadmium:{symbol:"Cd",atomicNumber:48,category:"post-transition"},Indium:{symbol:"In",atomicNumber:49,category:"post-transition"},Tin:{symbol:"Sn",atomicNumber:50,category:"post-transition"},Antimony:{symbol:"Sb",atomicNumber:51,category:"metalloid"},Tellurium:{symbol:"Te",atomicNumber:52,category:"metalloid"},Iodine:{symbol:"I",atomicNumber:53,category:"halogen"},Xenon:{symbol:"Xe",atomicNumber:54,category:"noble-gas"},Cesium:{symbol:"Cs",atomicNumber:55,category:"alkali-metal"},Barium:{symbol:"Ba",atomicNumber:56,category:"alkaline-earth"},Lanthanum:{symbol:"La",atomicNumber:57,category:"lanthanide"},Cerium:{symbol:"Ce",atomicNumber:58,category:"lanthanide"},Praseodymium:{symbol:"Pr",atomicNumber:59,category:"lanthanide"},Neodymium:{symbol:"Nd",atomicNumber:60,category:"lanthanide"},Promethium:{symbol:"Pm",atomicNumber:61,category:"lanthanide"},Samarium:{symbol:"Sm",atomicNumber:62,category:"lanthanide"},Europium:{symbol:"Eu",atomicNumber:63,category:"lanthanide"},Gadolinium:{symbol:"Gd",atomicNumber:64,category:"lanthanide"},Terbium:{symbol:"Tb",atomicNumber:65,category:"lanthanide"},Dysprosium:{symbol:"Dy",atomicNumber:66,category:"lanthanide"},Holmium:{symbol:"Ho",atomicNumber:67,category:"lanthanide"},Erbium:{symbol:"Er",atomicNumber:68,category:"lanthanide"},Thulium:{symbol:"Tm",atomicNumber:69,category:"lanthanide"},Ytterbium:{symbol:"Yb",atomicNumber:70,category:"lanthanide"},Lutetium:{symbol:"Lu",atomicNumber:71,category:"lanthanide"},Hafnium:{symbol:"Hf",atomicNumber:72,category:"transition-metal"},Tantalum:{symbol:"Ta",atomicNumber:73,category:"transition-metal"},Tungsten:{symbol:"W",atomicNumber:74,category:"transition-metal"},Rhenium:{symbol:"Re",atomicNumber:75,category:"transition-metal"},Osmium:{symbol:"Os",atomicNumber:76,category:"transition-metal"},Iridium:{symbol:"Ir",atomicNumber:77,category:"transition-metal"},Platinum:{symbol:"Pt",atomicNumber:78,category:"transition-metal"},Gold:{symbol:"Au",atomicNumber:79,category:"transition-metal"},Mercury:{symbol:"Hg",atomicNumber:80,category:"post-transition"},Thallium:{symbol:"Tl",atomicNumber:81,category:"post-transition"},Lead:{symbol:"Pb",atomicNumber:82,category:"post-transition"},Bismuth:{symbol:"Bi",atomicNumber:83,category:"post-transition"},Polonium:{symbol:"Po",atomicNumber:84,category:"post-transition"},Astatine:{symbol:"At",atomicNumber:85,category:"halogen"},Radon:{symbol:"Rn",atomicNumber:86,category:"noble-gas"},Francium:{symbol:"Fr",atomicNumber:87,category:"alkali-metal"},Radium:{symbol:"Ra",atomicNumber:88,category:"alkaline-earth"},Actinium:{symbol:"Ac",atomicNumber:89,category:"actinide"},Thorium:{symbol:"Th",atomicNumber:90,category:"actinide"},Protactinium:{symbol:"Pa",atomicNumber:91,category:"actinide"},Uranium:{symbol:"U",atomicNumber:92,category:"actinide"},Neptunium:{symbol:"Np",atomicNumber:93,category:"actinide"},Plutonium:{symbol:"Pu",atomicNumber:94,category:"actinide"},Americium:{symbol:"Am",atomicNumber:95,category:"actinide"},Curium:{symbol:"Cm",atomicNumber:96,category:"actinide"},Berkelium:{symbol:"Bk",atomicNumber:97,category:"actinide"},Californium:{symbol:"Cf",atomicNumber:98,category:"actinide"},Einsteinium:{symbol:"Es",atomicNumber:99,category:"actinide"},Fermium:{symbol:"Fm",atomicNumber:100,category:"actinide"},Mendelevium:{symbol:"Md",atomicNumber:101,category:"actinide"},Nobelium:{symbol:"No",atomicNumber:102,category:"actinide"},Lawrencium:{symbol:"Lr",atomicNumber:103,category:"actinide"},Rutherfordium:{symbol:"Rf",atomicNumber:104,category:"transition-metal"},Dubnium:{symbol:"Db",atomicNumber:105,category:"transition-metal"},Seaborgium:{symbol:"Sg",atomicNumber:106,category:"transition-metal"},Bohrium:{symbol:"Bh",atomicNumber:107,category:"transition-metal"},Hassium:{symbol:"Hs",atomicNumber:108,category:"transition-metal"},Meitnerium:{symbol:"Mt",atomicNumber:109,category:"transition-metal"},Darmstadtium:{symbol:"Ds",atomicNumber:110,category:"transition-metal"},Roentgenium:{symbol:"Rg",atomicNumber:111,category:"transition-metal"},Copernicium:{symbol:"Cn",atomicNumber:112,category:"post-transition"},Nihonium:{symbol:"Nh",atomicNumber:113,category:"post-transition"},Flerovium:{symbol:"Fl",atomicNumber:114,category:"post-transition"},Moscovium:{symbol:"Mc",atomicNumber:115,category:"post-transition"},Livermorium:{symbol:"Lv",atomicNumber:116,category:"post-transition"},Tennessine:{symbol:"Ts",atomicNumber:117,category:"halogen"},Oganesson:{symbol:"Og",atomicNumber:118,category:"noble-gas"},Tritium:{symbol:"T",atomicNumber:1,category:"isotope"},"Z-Divinium":{symbol:"Zd",atomicNumber:119,category:"synthetic"}},ge=L=>{switch(L){case"Exception":return"bg-gradient-to-br from-cyan-500/40 to-purple-600/40 border-2 border-cyan-400/90 text-cyan-100 shadow-lg shadow-cyan-400/30 animate-pulse";case"Ultra Rare":return"bg-violet-600/30 border-violet-400/80 text-violet-200 shadow-violet-400/20";case"Extremely Rare":return"bg-purple-600/30 border-purple-400/80 text-purple-200 shadow-purple-400/20";case"Very Rare":return"bg-pink-600/30 border-pink-400/80 text-pink-200 shadow-pink-400/20";case"Rare":return"bg-red-600/30 border-red-400/80 text-red-200 shadow-red-400/20";case"Uncommon":return"bg-orange-500/30 border-orange-400/80 text-orange-200 shadow-orange-400/20";case"Common":return"bg-yellow-500/30 border-yellow-400/80 text-yellow-200 shadow-yellow-400/20";case"Very Common":return"bg-green-500/30 border-green-400/80 text-green-200 shadow-green-400/20";case"Abundant":return"bg-blue-500/30 border-blue-400/80 text-blue-200 shadow-blue-400/20";case"Basic":return"bg-gray-500/30 border-gray-400/80 text-gray-200 shadow-gray-400/20";default:return"bg-gray-500/30 border-gray-400/80 text-gray-200 shadow-gray-400/20"}},Z=({elementName:L,expanded:e=!1,showResources:s=!1,className:t=""})=>{const i=Pe[L],h=de[L],n=le(L);if(!i)return d.jsx("span",{className:`inline-flex items-center text-xs bg-gray-500/20 text-gray-300 px-1.5 py-0.5 rounded border border-gray-500/30 ${t}`,children:L});const a=ge(n),r=n==="Exception";return e?d.jsxs("div",{className:`flex flex-col p-2 rounded-lg border ${a} ${r?"relative overflow-hidden":""} shadow-lg transition-all duration-200 hover:scale-105 ${t}`,children:[r&&d.jsx("div",{className:"absolute inset-0 bg-gradient-to-r from-cyan-400/10 via-purple-500/10 to-cyan-400/10 animate-pulse pointer-events-none rounded-lg"}),d.jsxs("div",{className:`flex flex-col items-center justify-center h-12 w-12 mx-auto mb-2 ${r?"bg-black/30 border-cyan-400/30":"bg-black/20"} rounded border border-white/10 relative z-10`,children:[d.jsx("div",{className:`text-xs font-bold leading-none ${r?"text-cyan-100":""}`,children:i.symbol}),d.jsx("div",{className:`text-[8px] opacity-70 leading-none mt-0.5 ${r?"text-cyan-200":""}`,children:i.atomicNumber})]}),d.jsx("div",{className:`text-xs font-medium text-center leading-tight mb-1 relative z-10 ${r?"text-cyan-100 font-bold":""}`,children:L}),d.jsx("div",{className:`text-[10px] text-center mb-2 relative z-10 ${r?"text-cyan-200 font-semibold animate-pulse":"opacity-80"}`,children:n}),s&&h&&d.jsxs("div",{className:"space-y-1",children:[h.antimatter>0&&d.jsxs("div",{className:"flex justify-between text-[10px] opacity-90",children:[d.jsxs("span",{className:"text-purple-300 flex items-center gap-1",children:[d.jsx(ee,{size:10,color:"currentColor"}),"Antimatter:"]}),d.jsx("span",{className:"font-mono",children:h.antimatter})]}),h.element115>0&&d.jsxs("div",{className:"flex justify-between text-[10px] opacity-90",children:[d.jsxs("span",{className:"text-cyan-300 flex items-center gap-1",children:[d.jsx(se,{size:10,color:"currentColor"}),"Element115:"]}),d.jsx("span",{className:"font-mono",children:h.element115})]}),h.deuterium>0&&d.jsxs("div",{className:"flex justify-between text-[10px] opacity-90",children:[d.jsxs("span",{className:"text-orange-300 flex items-center gap-1",children:[d.jsx(te,{size:10,color:"currentColor"}),"Deuterium:"]}),d.jsx("span",{className:"font-mono",children:h.deuterium})]})]})]}):d.jsxs("div",{className:`inline-flex flex-col items-center justify-center h-10 w-10 rounded border ${a} ${r?"relative overflow-hidden":""} transition-all duration-200 hover:scale-110 cursor-pointer ${t}`,children:[r&&d.jsx("div",{className:"absolute inset-0 bg-gradient-to-br from-cyan-400/20 to-purple-500/20 animate-pulse pointer-events-none rounded"}),d.jsx("div",{className:`text-xs font-bold leading-none relative z-10 ${r?"text-cyan-100":""}`,children:i.symbol}),d.jsx("div",{className:`text-[8px] opacity-70 leading-none mt-0.5 relative z-10 ${r?"text-cyan-200":""}`,children:i.atomicNumber})]})};class Re{static WIDTH=23;static HEIGHT=73;static COLORS={BLACK:0,WHITE:1,PURPLE:2,GREEN:3,BLUE:4,ORANGE:5,RED:6,YELLOW:7,LILAC:8};static CENTER_COL1=11;static CENTER_COL2=12;static LEFT_HELIX_MIN=0;static LEFT_HELIX_MAX=9;static RIGHT_HELIX_MIN=14;static RIGHT_HELIX_MAX=22;static BASE_TURNS_PER_HEIGHT=10.5;static BASE_AMPLITUDE=.5;static async generate(e){const s=new Array(this.WIDTH*this.HEIGHT).fill(0),t=new Array(this.WIDTH*this.HEIGHT).fill(0);return this.drawNumbers(s,t),this.drawBlankLine(s,t,4),this.drawChemicalElements(s,t,e.lifeForm,e.planetName),this.drawBlankLine(s,t,10),this.drawBlankLine(s,t,11),this.drawNucleotides(s,t,e.lifeForm,e.planetName),this.drawBlankLine(s,t,28),this.drawDNADoubleHelix(s,t,e.lifeForm,e.planetName,29,15),this.drawBlankLine(s,t,44),this.drawLifeFormSection(s,t,e.lifeForm,e.planetName,45,9),this.drawBlankLine(s,t,54),await this.drawSolarSystem(s,t,e.planetName,55),this.drawBlankLine(s,t,63),this.drawTransmissionMethod(s,t,e.lifeForm,e.planetName,64,9),{bitmap:s,colorMap:t,width:this.WIDTH,height:this.HEIGHT,lifeForm:e.lifeForm,planetName:e.planetName}}static setPixel(e,s,t,i,h=1,n=1){if(t>=0&&t<this.WIDTH&&i>=0&&i<this.HEIGHT){const a=i*this.WIDTH+t;e[a]=h,h>0&&(s[a]=n)}}static setPixelBatch(e,s,t){for(const i of t)this.setPixel(e,s,i.col,i.row,i.value??1,i.color)}static calculateHelixPosition(e,s,t,i,h=!1){const n=t-s,a=h?Math.PI:0,r=s+Math.round(n/2+n/2*i*Math.cos(e+a));return Math.max(s,Math.min(t,r))}static drawBinaryInCenter(e,s,t,i,h,n){for(let a=0;a<h;a++){const r=i+a;if(r>=this.HEIGHT)break;const l=a*2;l<t.length&&parseInt(t[l])===1&&(!n||n.random()<.9)&&this.setPixel(e,s,this.CENTER_COL1,r,1,this.COLORS.WHITE);const O=a*2+1;O<t.length&&parseInt(t[O])===1&&(!n||n.random()<.9)&&this.setPixel(e,s,this.CENTER_COL2,r,1,this.COLORS.WHITE)}}static drawHelixPair(e,s,t,i,h){const n=this.calculateHelixPosition(i,this.LEFT_HELIX_MIN,this.LEFT_HELIX_MAX,h,!1),a=this.calculateHelixPosition(i,this.RIGHT_HELIX_MIN,this.RIGHT_HELIX_MAX,h,!0);this.setPixel(e,s,n,t,1,this.COLORS.BLUE),this.setPixel(e,s,a,t,1,this.COLORS.BLUE)}static calculatePhase(e,s,t){switch(e){case"helix":return s*Math.PI*2/t.turns+t.shift;case"crystal":return s*Math.PI*2/t.frequency;case"golden":return s*Math.PI*2/13;case"fibonacci":return s*1.618033988749%(2*Math.PI);case"synchronized":return s*Math.PI*2/t.frequency+t.phase;case"asynchronous":return s*Math.PI*2/t.frequency+t.phase+t.rng()*.5;case"pipelined":return s*Math.PI*2/t.frequency+t.phase+s%3*Math.PI/6;case"burst":return s%4<2?s*Math.PI*2/t.frequency+t.phase:s*Math.PI*2/(t.frequency*2)+t.phase;case"differential":return s*Math.PI*2/t.frequency+t.phase+Math.sin(s*.3)*.2;default:return s*Math.PI*2/4}}static drawNumbers(e,s){const t=[1,3,5,7,9,11,13,15,17,19];for(let i=0;i<10;i++){const h=i+1,n=t[i],a=h.toString(2);for(let r=0;r<a.length&&r<4;r++){const l=3-r,O=parseInt(a[a.length-1-r]);this.setPixel(e,s,n,l,O,this.COLORS.WHITE)}}}static drawChemicalElements(e,s,t,i){const h=this.getElementsForLifeForm(t,i||"Earth");switch(this.getLifeCategory(t)){case"carbon-based":this.drawCarbonBasedElements(e,s,h);break;case"silicon-based":this.drawSiliconBasedElements(e,s,h);break;case"robotic":this.drawRoboticElements(e,s,h);break;case"gaseous":this.drawGaseousElements(e,s,h);break;case"energy":this.drawEnergyElements(e,s,h);break;case"divine":this.drawDivineElements(e,s,h);break;default:this.drawCarbonBasedElements(e,s,h)}}static drawNucleotides(e,s,t,i){switch(this.getLifeCategory(t)){case"carbon-based":this.drawCarbonBasedGenetics(e,s,t,i);break;case"silicon-based":this.drawSiliconBasedGenetics(e,s,t,i);break;case"robotic":this.drawRoboticInformation(e,s,t,i);break;case"gaseous":this.drawGaseousInformation(e,s,t,i);break;case"energy":this.drawEnergyInformation(e,s,t,i);break;case"divine":this.drawDivineInformation(e,s);break;default:this.drawCarbonBasedGenetics(e,s,t)}}static drawCarbonBasedGenetics(e,s,t,i){const h=this.getElementsForLifeForm(t,i||"Earth"),n=this.getNitrogenBases(t,i||"Earth");this.drawNucleotideFormulas(e,s,n,h,t),this.drawBlankLine(e,s,16),this.drawSugarPhosphateBackbone(e,s,h),this.drawBlankLine(e,s,21),this.drawGenomeSize(e,s,h,t),this.drawBlankLine(e,s,26),this.drawDNAHelixBorders(e,s)}static getSilicateBonds(e){return{Si:[1,1,0,4,0],O:[0,2,0,2,0],Al:[2,0,1,3,0],Fe:[1,0,2,3,0],Mg:[0,1,0,2,1],Ca:[1,1,1,2,1],K:[0,0,1,1,0],Na:[0,0,1,1,0],H:[1,0,0,1,0],S:[0,1,1,2,2],P:[0,1,0,3,1],Ti:[2,1,0,4,0],V:[1,2,1,3,0],Cr:[2,0,2,2,0],Mn:[1,1,2,2,0],Co:[1,0,1,2,1],Ni:[0,2,1,2,0],Cu:[2,0,0,2,0],Zn:[0,1,1,2,0],Li:[0,0,0,1,0],Be:[0,0,1,2,0],B:[0,1,2,3,0],F:[1,0,0,1,0],Cl:[1,0,0,1,0],Sr:[1,1,0,2,2],Y:[2,1,1,3,0],Zr:[2,2,0,4,0]}[e]||[1,1,1,2,0]}static getEnergyFrequency(e){return{α:1,β:2,γ:3,δ:4,ε:1.5,ζ:2.5,η:3.5,θ:4.5,ι:1.2,κ:2.2,λ:3.2,μ:4.2,ν:1.8,ξ:2.8,ο:3.8,π:4.8,ρ:2.3,σ:3.3,τ:4.3,υ:1.7,φ:2.7,χ:3.7,ψ:4.7,ω:5,"∆":6,"∇":7,"∞":8,Ω:9,Φ:10,Ψ:11,"≈":12,"∼":13,"※":14,"⟨⟩":15,"◊":16,"◎":17}[e]||Math.abs(e.charCodeAt(0)%10)+1}static getEnergyPattern(e){return{α:"wave",β:"pulse",γ:"spiral",δ:"zigzag",ε:"sine",ζ:"square",η:"triangle",θ:"sawtooth",ι:"burst",κ:"ripple",λ:"vortex",μ:"standing",ν:"modulated",ξ:"interference",ο:"resonance",π:"harmonic",ρ:"quantum",σ:"coherent",τ:"entangled",υ:"superposed",φ:"phase",χ:"amplitude",ψ:"frequency",ω:"complex","∆":"dimensional","∇":"gradient","∞":"infinite",Ω:"omega",Φ:"phi",Ψ:"psi","≈":"approximate","∼":"similar","※":"reference","⟨⟩":"bracket","◊":"diamond","◎":"target"}[e]||"default"}static calculateEnergyPattern(e,s,t){switch(e){case"wave":return Math.sin(s)>0;case"pulse":return t%2===0;case"spiral":return Math.sin(s)+Math.cos(s*1.5)>0;case"zigzag":return t%2===Math.floor(s)%2;case"sine":return Math.sin(s*2)>.5;case"square":return Math.sin(s)>0;case"triangle":return Math.abs(Math.sin(s))>.5;case"burst":return t===0||t===3;case"ripple":return Math.sin(s+t)>.3;case"vortex":return(t+Math.floor(s*2))%3!==0;case"quantum":return Math.random()>.3;case"interference":return Math.sin(s)+Math.sin(s*1.7)>0;case"dimensional":return t<2;case"infinite":return!0;default:return Math.sin(s)>0}}static drawSiliconBasedGenetics(e,s,t,i){const n=this.getNitrogenBases(t,i).map((r,l)=>({col:4+l*4,base:r,bonds:this.getSilicateBonds(r)}));for(const r of n)this.drawChemicalFormula(e,s,r.col,12,r.bonds);this.drawBlankLine(e,s,16);const a=11;for(let r=17;r<=20;r++){this.setPixel(e,s,a,r,1,this.COLORS.GREEN);const l=(r-17)%2===0?3:4;this.setPixel(e,s,a-l,r,1,this.COLORS.GREEN),this.setPixel(e,s,a+l,r,1,this.COLORS.GREEN),r%2===1&&(this.setPixel(e,s,6,r,1,this.COLORS.GREEN),this.setPixel(e,s,16,r,1,this.COLORS.GREEN))}this.drawBlankLine(e,s,21);for(let r=22;r<=25;r++){const l=r-22;for(let O=9-l;O<=13+l;O++)(O+r)%2===0&&this.setPixel(e,s,O,r,1,this.COLORS.GREEN)}this.drawBlankLine(e,s,26),this.drawDNAHelixBorders(e,s)}static drawRoboticInformation(e,s,t,i){const h=this.hashString(t+(i||"Earth")+"digital"),n=this.createSeededRandom(h),a=[[{col:4,code:[0,0]},{col:8,code:[0,1]},{col:12,code:[1,0]},{col:16,code:[1,1]}],[{col:4,code:[1,0]},{col:8,code:[1,1]},{col:12,code:[0,0]},{col:16,code:[0,1]}],[{col:4,code:[0,1]},{col:8,code:[1,0]},{col:12,code:[1,1]},{col:16,code:[0,0]}],[{col:4,code:[1,1]},{col:8,code:[0,0]},{col:12,code:[0,1]},{col:16,code:[1,0]}]],r=Math.floor(n.random()*a.length),l=a[r];for(const x of l){const u=Math.floor(n.random()*3)-1,S=Math.max(3,Math.min(19,x.col+u));(n.random()>.2?1:0)&&(this.setPixel(e,s,S,12,1,this.COLORS.GREEN),this.setPixel(e,s,S+1,12,1,this.COLORS.GREEN));for(let c=0;c<x.code.length;c++)if(x.code[c]===1){const o=.85+(n.random()-.5)*.2;if(n.random()<o&&this.setPixel(e,s,S+c,13+c,1,this.COLORS.GREEN),n.random()>.7){const E=S+(Math.floor(n.random()*3)-1);E>=3&&E<=19&&this.setPixel(e,s,E,14,1,this.COLORS.GREEN)}}n.random()>.15&&this.setPixel(e,s,S,15,1,this.COLORS.GREEN)}this.drawBlankLine(e,s,16);const O=Math.floor(n.random()*4);for(let x=17;x<=20;x++){switch(O){case 0:for(let S=9;S<=13;S++)this.setPixel(e,s,S,x,1,this.COLORS.GREEN);x%2===0&&(this.setPixel(e,s,6,x,1,this.COLORS.GREEN),this.setPixel(e,s,7,x,1,this.COLORS.GREEN),this.setPixel(e,s,15,x,1,this.COLORS.GREEN),this.setPixel(e,s,16,x,1,this.COLORS.GREEN));break;case 1:const u=x-17+1;for(let S=11-u;S<=11+u;S++)S>=6&&S<=16&&this.setPixel(e,s,S,x,1,this.COLORS.GREEN);break;case 2:if(x===17||x===20)for(let S=8;S<=14;S++)this.setPixel(e,s,S,x,1,this.COLORS.GREEN);else this.setPixel(e,s,8,x,1,this.COLORS.GREEN),this.setPixel(e,s,11,x,1,this.COLORS.GREEN),this.setPixel(e,s,14,x,1,this.COLORS.GREEN);break;case 3:this.setPixel(e,s,11,x,1,this.COLORS.GREEN),n.random()>.3&&this.setPixel(e,s,11-(x-16),x,1,this.COLORS.GREEN),n.random()>.3&&this.setPixel(e,s,11+(x-16),x,1,this.COLORS.GREEN);break}if(n.random()>.6){const u=5+Math.floor(n.random()*13);u>=5&&u<=17&&this.setPixel(e,s,u,x,1,this.COLORS.GREEN)}}this.drawBlankLine(e,s,21);const f=Math.floor(n.random()*4);for(let x=22;x<=25;x++){const u=x-22;switch(f){case 0:for(let o=8;o<=8+u*3;o++)o<=14&&this.setPixel(e,s,o,x,1,this.COLORS.GREEN);break;case 1:const S=Math.pow(2,u);for(let o=11-S;o<=11+S;o++)o>=8&&o<=14&&this.setPixel(e,s,o,x,1,this.COLORS.GREEN);break;case 2:const P=u+1;for(let o=0;o<P;o++){const E=8+o*2;E<=14&&(this.setPixel(e,s,E,x,1,this.COLORS.GREEN),E+1<=14&&this.setPixel(e,s,E+1,x,1,this.COLORS.GREEN))}break;case 3:const c=u*2+2;for(let o=9;o<=9+c;o++)o<=14&&n.random()>.3&&this.setPixel(e,s,o,x,1,this.COLORS.GREEN);break}}this.drawBlankLine(e,s,26),this.drawDNAHelixBorders(e,s)}static drawGaseousInformation(e,s,t,i){const h=this.hashString(t+(i||"Earth")+"quantum"),n=this.createSeededRandom(h),a=[[{col:4,state:[0,0]},{col:8,state:[0,1]},{col:12,state:[1,0]},{col:16,state:[1,1]}],[{col:4,state:[1,0]},{col:8,state:[0,0]},{col:12,state:[1,1]},{col:16,state:[0,1]}],[{col:4,state:[0,1]},{col:8,state:[1,1]},{col:12,state:[0,0]},{col:16,state:[1,0]}],[{col:4,state:[1,1]},{col:8,state:[1,0]},{col:12,state:[0,1]},{col:16,state:[0,0]}]],r=Math.floor(n.random()*a.length),l=a[r];for(const x of l){const u=Math.floor(n.random()*3)-1,S=Math.max(3,Math.min(19,x.col+u));this.setPixel(e,s,S,12,1,this.COLORS.GREEN),this.setPixel(e,s,S+1,12,1,this.COLORS.GREEN);for(let P=0;P<x.state.length;P++)if(x.state[P]===1&&((n.random()>.3?1:0)&&this.setPixel(e,s,S+P,13+P,1,this.COLORS.GREEN),n.random()>.6)){const o=S+(Math.floor(n.random()*3)-1);o>=3&&o<=19&&this.setPixel(e,s,o,14,1,this.COLORS.GREEN)}n.random()>.2&&this.setPixel(e,s,S,15,1,this.COLORS.GREEN)}this.drawBlankLine(e,s,16);const O=Math.floor(n.random()*3);for(let x=17;x<=20;x++){this.setPixel(e,s,11,x,1,this.COLORS.GREEN);const u=x-17+2,S=Math.floor(n.random()*2),P=u+S;switch(O){case 0:this.setPixel(e,s,11-P,x,1,this.COLORS.GREEN),this.setPixel(e,s,11+P,x,1,this.COLORS.GREEN);break;case 1:x%2===0?(this.setPixel(e,s,11-P,x,1,this.COLORS.GREEN),this.setPixel(e,s,11+(P-1),x,1,this.COLORS.GREEN)):(this.setPixel(e,s,11-(P-1),x,1,this.COLORS.GREEN),this.setPixel(e,s,11+P,x,1,this.COLORS.GREEN));break;case 2:for(let c=1;c<=P;c++)n.random()>.4&&this.setPixel(e,s,11-c,x,1,this.COLORS.GREEN),n.random()>.4&&this.setPixel(e,s,11+c,x,1,this.COLORS.GREEN);break}if(x%2===1&&O<=1||O===2&&n.random()>.5)for(let c=11-P;c<=11+P;c+=Math.floor(n.random()*3)+1)c>=6&&c<=16&&this.setPixel(e,s,c,x,1,this.COLORS.GREEN)}this.drawBlankLine(e,s,21);const f=Math.floor(n.random()*4);for(let x=22;x<=25;x++){const u=x-22;switch(f){case 0:for(let c=9;c<=13;c++)(c+x+u)%3===0&&this.setPixel(e,s,c,x,1,this.COLORS.GREEN);break;case 1:for(let c=9;c<=13;c++)(c*x+u)%4===0&&this.setPixel(e,s,c,x,1,this.COLORS.GREEN);break;case 2:const S=11,P=Math.abs(u-1.5);for(let c=9;c<=13;c++)Math.abs(c-S)<=2-P&&n.random()>.3&&this.setPixel(e,s,c,x,1,this.COLORS.GREEN);break;case 3:for(let c=9;c<=13;c++)n.random()>.3+u*.1&&this.setPixel(e,s,c,x,1,this.COLORS.GREEN);break}}this.drawBlankLine(e,s,26),this.drawDNAHelixBorders(e,s)}static drawEnergyInformation(e,s,t,i){const n=this.getNitrogenBases(t,i).map((a,r)=>({col:4+r*4,state:a,freq:this.getEnergyFrequency(a),pattern:this.getEnergyPattern(a)}));for(const a of n)for(let r=12;r<=15;r++){const l=(r-12)*Math.PI/a.freq;this.calculateEnergyPattern(a.pattern,l,r-12)&&(this.setPixel(e,s,a.col,r,1,this.COLORS.GREEN),a.freq>3&&this.setPixel(e,s,a.col+1,r,1,this.COLORS.GREEN))}this.drawBlankLine(e,s,16);for(let a=17;a<=20;a++){this.setPixel(e,s,11,a,1,this.COLORS.GREEN);const r=a-17;for(let l=1;l<=2+r;l++)11-l>=6&&this.setPixel(e,s,11-l,a,1,this.COLORS.GREEN),11+l<=16&&this.setPixel(e,s,11+l,a,1,this.COLORS.GREEN)}this.drawBlankLine(e,s,21);for(let a=22;a<=25;a++){const r=a-22;for(let l=10-r;l<=12+r;l++)l>=6&&l<=16&&this.setPixel(e,s,l,a,1,this.COLORS.GREEN)}this.drawBlankLine(e,s,26),this.drawDNAHelixBorders(e,s)}static drawDivineInformation(e,s){const t=[4,8,12,16];for(const h of t){for(let n=12;n<=15;n++)this.setPixel(e,s,h,n,1,this.COLORS.GREEN);this.setPixel(e,s,h-1,13,1,this.COLORS.GREEN),this.setPixel(e,s,h+1,13,1,this.COLORS.GREEN)}this.drawBlankLine(e,s,16);for(let h=17;h<=20;h++){this.setPixel(e,s,11,h,1,this.COLORS.GREEN);const n=h-17+1;for(let a=1;a<=n;a++)11-a*2>=6&&this.setPixel(e,s,11-a*2,h,1,this.COLORS.GREEN),11+a*2<=16&&this.setPixel(e,s,11+a*2,h,1,this.COLORS.GREEN)}this.drawBlankLine(e,s,21);const i=[1,2,3,5];for(let h=22;h<=25;h++){const n=i[h-22];for(let a=11-n;a<=11+n;a++)a>=6&&a<=16&&this.setPixel(e,s,a,h,1,this.COLORS.GREEN)}this.drawBlankLine(e,s,26),this.drawDNAHelixBorders(e,s)}static drawNucleotideFormulas(e,s,t,i,h){const n=this.getNucleotideVariation(h,i);for(let r=0;r<Math.min(n.bases.length,4);r++){const l=n.bases[r],O=3+r*4;this.drawAdaptedNucleotidePattern(e,s,l,O,i)}const a=n.usesRNA?[9,5,0,4,0]:[7,5,0,1,0];this.drawChemicalFormula(e,s,1,12,a)}static drawAdaptedNucleotidePattern(e,s,t,i,h){const n=h[4];for(let r=0;r<Math.min(4,t.formula.length);r++){const l=t.formula[r],O=12+r;l>0&&(this.setPixel(e,s,i,O,1,this.COLORS.GREEN),l>=4&&this.setPixel(e,s,i+1,O,1,this.COLORS.GREEN),l>=7&&this.setPixel(e,s,i-1,O,1,this.COLORS.GREEN))}const a=t.formula[4]||0;a>0&&this.drawFifthElementPattern(e,s,i,16,n,a)}static drawFifthElementPattern(e,s,t,i,h,n){switch(h){case 15:this.setPixel(e,s,t,i,1,this.COLORS.GREEN),n>=2&&this.setPixel(e,s,t+1,i,1,this.COLORS.GREEN);break;case 16:this.setPixel(e,s,t,i,1,this.COLORS.GREEN),this.setPixel(e,s,t,i+1,1,this.COLORS.GREEN),n>=2&&this.setPixel(e,s,t+1,i,1,this.COLORS.GREEN);break;case 12:this.setPixel(e,s,t,i,1,this.COLORS.GREEN),this.setPixel(e,s,t-1,i,1,this.COLORS.GREEN),this.setPixel(e,s,t+1,i,1,this.COLORS.GREEN);break;case 20:this.setPixel(e,s,t,i,1,this.COLORS.GREEN),this.setPixel(e,s,t+1,i,1,this.COLORS.GREEN),this.setPixel(e,s,t,i+1,1,this.COLORS.GREEN),this.setPixel(e,s,t+1,i+1,1,this.COLORS.GREEN);break;case 26:this.setPixel(e,s,t,i,1,this.COLORS.GREEN),this.setPixel(e,s,t-1,i,1,this.COLORS.GREEN),this.setPixel(e,s,t+1,i,1,this.COLORS.GREEN),this.setPixel(e,s,t,i-1,1,this.COLORS.GREEN),this.setPixel(e,s,t,i+1,1,this.COLORS.GREEN);break;case 19:this.setPixel(e,s,t,i,1,this.COLORS.GREEN),n>=2&&this.setPixel(e,s,t+2,i,1,this.COLORS.GREEN);break;case 11:this.setPixel(e,s,t,i,1,this.COLORS.GREEN),n>=2&&this.setPixel(e,s,t+1,i+1,1,this.COLORS.GREEN);break;default:this.setPixel(e,s,t,i,1,this.COLORS.GREEN)}}static drawSugarPhosphateBackbone(e,s,t){this.setPixel(e,s,11,18,1,this.COLORS.GREEN),this.setPixel(e,s,11,19,1,this.COLORS.GREEN),this.setPixel(e,s,10,17,1,this.COLORS.GREEN),this.setPixel(e,s,12,17,1,this.COLORS.GREEN),this.setPixel(e,s,10,20,1,this.COLORS.GREEN),this.setPixel(e,s,12,20,1,this.COLORS.GREEN),this.setPixel(e,s,6,18,1,this.COLORS.GREEN),this.setPixel(e,s,7,18,1,this.COLORS.GREEN),this.setPixel(e,s,15,18,1,this.COLORS.GREEN),this.setPixel(e,s,16,18,1,this.COLORS.GREEN)}static drawGenomeSize(e,s,t,i){this.getNucleotideVariation(i,t);const h=this.getGenomeSizeData(i,"Earth",t),n=Math.floor(h.genes/1e3);for(let O=8;O<=Math.min(14,8+n);O++)this.setPixel(e,s,O,22,1,this.COLORS.GREEN);const a=h.gcContent;for(let O=9;O<=13;O++)a==="high"&&O%2===1?this.setPixel(e,s,O,23,1,this.COLORS.GREEN):a==="moderate"&&(O===10||O===12)?this.setPixel(e,s,O,23,1,this.COLORS.GREEN):a==="variable"&&this.setPixel(e,s,O,23,1,this.COLORS.GREEN);const r=h.chromosomes;for(let O=0;O<Math.min(r,7);O++)this.setPixel(e,s,8+O,24,1,this.COLORS.GREEN);const l=Math.floor(Math.log10(h.totalBases/1e6));for(let O=9;O<=Math.min(15,9+l);O++)this.setPixel(e,s,O,25,1,this.COLORS.GREEN);this.setPixel(e,s,5,22,1,this.COLORS.GREEN),this.setPixel(e,s,17,25,1,this.COLORS.GREEN)}static drawDNAHelixBorders(e,s){this.setPixel(e,s,3,27,1,this.COLORS.GREEN),this.setPixel(e,s,4,27,1,this.COLORS.GREEN),this.setPixel(e,s,18,27,1,this.COLORS.GREEN),this.setPixel(e,s,19,27,1,this.COLORS.GREEN)}static drawDNADoubleHelix(e,s,t,i,h=28,n=15){const a=this.getLifeCategory(t),r=11;switch(a){case"carbon-based":this.drawCarbonBasedDoubleHelix(e,s,t,i,r,h,n);break;case"silicon-based":this.drawSiliconBasedStructure(e,s,r,h,n,t,i);break;case"robotic":this.drawDigitalDataStructure(e,s,r,h,n,t,i);break;case"gaseous":this.drawQuantumFieldStructure(e,s,r,h,n,t,i);break;case"energy":this.drawEnergyFieldStructure(e,s,r,h,n,t,i);break;case"divine":this.drawCosmicGeometryStructure(e,s,r,h,n);break;default:this.drawCarbonBasedDoubleHelix(e,s,t,i,r,h,n)}}static drawCarbonBasedDoubleHelix(e,s,t,i,h,n,a){const l=this.getGenomeSizeData(t,i,this.getElementsForLifeForm(t,i)).totalBases.toString(2),O=this.hashString(t+i+"helix"),f=this.createSeededRandom(O),x=(f.random()-.5)*2,u=(f.random()-.5)*.3,S=f.random()*Math.PI,P=this.BASE_TURNS_PER_HEIGHT+x,c=this.BASE_AMPLITUDE+u;this.drawBinaryInCenter(e,s,l,n,a);for(let o=0;o<a;o++){const E=n+o;if(E>=this.HEIGHT)break;const m=o*Math.PI*2/P+S,D=this.calculateHelixPosition(m,this.LEFT_HELIX_MIN,this.LEFT_HELIX_MAX,c,!1);this.setPixel(e,s,D,E,1,this.COLORS.BLUE);const g=this.calculateHelixPosition(m,this.RIGHT_HELIX_MIN,this.RIGHT_HELIX_MAX,c,!0);if(this.setPixel(e,s,g,E,1,this.COLORS.BLUE),t==="Intelligent Life"){const R=m+Math.PI,C=Math.round(this.CENTER_COL1-3-c*Math.cos(R)),I=Math.round(this.CENTER_COL2+3+c*Math.cos(R)),N=Math.max(3,Math.floor(P/2));C>=5&&C<=9&&o%N===0&&this.setPixel(e,s,C,E,1,this.COLORS.BLUE),I>=14&&I<=18&&o%(N+1)===0&&this.setPixel(e,s,I,E,1,this.COLORS.BLUE)}else if(t==="Vegetation"){const R=Math.max(4,Math.floor(P));if(o%R===Math.floor(R/2)){const C=D-Math.round(c);C>=0&&C<=9&&this.setPixel(e,s,C,E,1,this.COLORS.BLUE)}}}}static drawSiliconBasedStructure(e,s,t,i,h,n,a){const r=this.hashString(n+a+"crystalline"),l=this.createSeededRandom(r),O=[{units:5e5,name:"Cuarzo simple"},{units:12e5,name:"Feldespato complejo"},{units:8e5,name:"Olivino"},{units:2e6,name:"Zeolita porosa"},{units:15e5,name:"Granate denso"},{units:9e5,name:"Piroxeno cadena"},{units:18e5,name:"Matriz silicática"}],f=Math.floor(l.random()*O.length);O[f].units.toString(2);const S=Math.floor(l.random()*3);for(let P=0;P<h;P++){const c=i+P;if(c>=this.HEIGHT)break;let o;switch(S){case 0:o=P*Math.PI*2/6;break;case 1:o=P*Math.PI*2/4;break;default:o=P*Math.PI*2/8+l.random()*.5}const E=9,m=0+Math.round(E/2+E/2*Math.sin(o));this.setPixel(e,s,Math.max(0,Math.min(9,m)),c,1,this.COLORS.BLUE);const D=8,g=14+Math.round(D/2+D/2*Math.sin(o+Math.PI));this.setPixel(e,s,Math.max(14,Math.min(22,g)),c,1,this.COLORS.BLUE)}}static drawDigitalDataStructure(e,s,t,i,h,n,a){const r=this.hashString(n+(a||"Earth")+"datastructure"),l=this.createSeededRandom(r),O=[2147483647,Math.floor(2147483647*.5),Math.floor(2147483647*.25),2147483647*2,Math.floor(2147483647*.75)],f=Math.floor(l.random()*O.length),x=O[f],u=Math.abs(x).toString(2),S=[{type:"synchronized",frequency:4,phase:0},{type:"asynchronous",frequency:6,phase:Math.PI/3},{type:"pipelined",frequency:8,phase:Math.PI/2},{type:"burst",frequency:3,phase:0},{type:"differential",frequency:5,phase:Math.PI/4}],P=Math.floor(l.random()*S.length),c=S[P];for(let o=0;o<h;o++){const E=i+o;if(E>=this.HEIGHT)break;const m=o*2;if(m<u.length){const A=parseInt(u[m]),k=.9+(l.random()-.5)*.15;A===1&&l.random()<k&&this.setPixel(e,s,this.CENTER_COL1,E,1,this.COLORS.WHITE)}const D=o*2+1;if(D<u.length){const A=parseInt(u[D]),k=.9+(l.random()-.5)*.15;A===1&&l.random()<k&&this.setPixel(e,s,this.CENTER_COL2,E,1,this.COLORS.WHITE)}let g;switch(c.type){case"synchronized":g=o*Math.PI*2/c.frequency+c.phase;break;case"asynchronous":g=o*Math.PI*2/c.frequency+c.phase+l.random()*.5;break;case"pipelined":g=o*Math.PI*2/c.frequency+c.phase+o%3*Math.PI/6;break;case"burst":g=o%4<2?o*Math.PI*2/c.frequency+c.phase:o*Math.PI*2/(c.frequency*2)+c.phase;break;case"differential":g=o*Math.PI*2/c.frequency+c.phase+Math.sin(o*.3)*.2;break;default:g=o*Math.PI*2/4}const R=9;let C;c.type==="synchronized"||c.type==="pipelined"?C=0+Math.round(R/2+R/2*Math.sin(g)):c.type==="asynchronous"?C=0+Math.round(R/2+R/3*Math.sin(g)):C=0+Math.round(R/2+R/2*Math.sin(g)*Math.cos(g*.7));const I=Math.max(0,Math.min(9,C));this.setPixel(e,s,I,E,1,this.COLORS.BLUE);const N=8;let v;c.type==="synchronized"?v=14+Math.round(N/2+N/2*Math.sin(g+Math.PI)):c.type==="asynchronous"?v=14+Math.round(N/2+N/3*Math.cos(g+Math.PI/2)):c.type==="pipelined"?v=14+Math.round(N/2+N/2*Math.sin(g+Math.PI+o%4*Math.PI/8)):v=14+Math.round(N/2+N/2*Math.cos(g)*Math.sin(g*.5));const b=Math.max(14,Math.min(22,v));if(this.setPixel(e,s,b,E,1,this.COLORS.BLUE),c.type==="burst"&&o%4===0&&l.random()>.5){const A=Math.max(0,Math.min(9,I+Math.floor(l.random()*3)-1)),k=Math.max(14,Math.min(22,b+Math.floor(l.random()*3)-1));this.setPixel(e,s,A,E,1,this.COLORS.BLUE),this.setPixel(e,s,k,E,1,this.COLORS.BLUE)}if(c.type==="differential"&&l.random()>.7){const A=Math.floor(l.random()*23);(A<10||A>13)&&this.setPixel(e,s,A,E,1,this.COLORS.BLUE)}}}static drawQuantumFieldStructure(e,s,t,i,h,n,a){const r=this.hashString(n+(a||"Earth")+"quantumfield"),l=this.createSeededRandom(r),O=1048576,f=[O,O*2,Math.floor(O*.5),O*4,Math.floor(O*1.5)],x=Math.floor(l.random()*f.length),S=f[x].toString(2),P=[{type:"sine",frequency:12,phase:0},{type:"cosine",frequency:10,phase:Math.PI/4},{type:"mixed",frequency:8,phase:Math.PI/2},{type:"chaos",frequency:15,phase:0},{type:"entangled",frequency:6,phase:Math.PI/3}],c=Math.floor(l.random()*P.length),o=P[c];for(let E=0;E<h;E++){const m=i+E;if(m>=this.HEIGHT)break;const D=E*2;if(D<S.length){const k=parseInt(S[D]),G=.8+(l.random()-.5)*.3;k===1&&l.random()<G&&this.setPixel(e,s,this.CENTER_COL1,m,1,this.COLORS.WHITE)}const g=E*2+1;if(g<S.length){const k=parseInt(S[g]),G=.8+(l.random()-.5)*.3;k===1&&l.random()<G&&this.setPixel(e,s,this.CENTER_COL2,m,1,this.COLORS.WHITE)}let R;switch(o.type){case"sine":R=E*Math.PI*2/o.frequency+o.phase;break;case"cosine":R=E*Math.PI*2/o.frequency+o.phase;break;case"mixed":R=E*Math.PI*2/o.frequency+o.phase+Math.sin(E*.5)*.5;break;case"chaos":R=E*Math.PI*2/o.frequency+l.random()*Math.PI*.3;break;case"entangled":R=E*Math.PI*2/o.frequency+o.phase+Math.cos(E*.3)*.7;break;default:R=E*Math.PI*2/12}const C=9;let I;o.type==="sine"||o.type==="mixed"?I=0+Math.round(C/2+C/2*Math.sin(R)):o.type==="cosine"?I=0+Math.round(C/2+C/2*Math.cos(R)):I=0+Math.round(C/2+C/2*Math.sin(R)*Math.cos(R*.7));const N=Math.max(0,Math.min(9,I));this.setPixel(e,s,N,m,1,this.COLORS.BLUE);const v=8;let b;o.type==="sine"||o.type==="mixed"?b=14+Math.round(v/2+v/2*Math.cos(R+Math.PI)):o.type==="cosine"?b=14+Math.round(v/2+v/2*Math.sin(R+Math.PI)):b=14+Math.round(v/2+v/2*Math.cos(R)*Math.sin(R*.5));const A=Math.max(14,Math.min(22,b));if(this.setPixel(e,s,A,m,1,this.COLORS.BLUE),o.type==="entangled"&&l.random()>.7){const k=Math.max(0,Math.min(9,N+Math.floor(l.random()*3)-1)),G=Math.max(14,Math.min(22,A+Math.floor(l.random()*3)-1));this.setPixel(e,s,k,m,1,this.COLORS.BLUE),this.setPixel(e,s,G,m,1,this.COLORS.BLUE)}if(o.type==="chaos"&&l.random()>.8){const k=Math.floor(l.random()*23);(k<10||k>13)&&this.setPixel(e,s,k,m,1,this.COLORS.BLUE)}}}static drawEnergyFieldStructure(e,s,t,i,h,n,a){this.getElementsForLifeForm(n,a);const r=this.getNitrogenBases(n,a),l=this.hashString(n+a+"energy"),O=this.createSeededRandom(l),f=[299792458,662607e-33,1660539e-26,96485340,1380649e-22,20181970,25812807,48359775,11.26349],x=Math.floor(O.random()*f.length);f[x].toString(2);const S=this.getEnergyPattern(r[0]),P=this.getEnergyFrequency(r[1]||r[0]);for(let c=0;c<h;c++){const o=i+c;if(o>=this.HEIGHT)break;const E=c*Math.PI*2/P,m=this.calculateFieldIntensity(S,E,c,"left");if(m>0){const R=Math.round(9*m);this.setPixel(e,s,Math.max(0,Math.min(9,R)),o,1,this.COLORS.BLUE)}const D=this.calculateFieldIntensity(S,E+Math.PI,c,"right");if(D>0){const R=14+Math.round(8*D);this.setPixel(e,s,Math.max(14,Math.min(22,R)),o,1,this.COLORS.BLUE)}}}static calculateFieldIntensity(e,s,t,i){const h=(Math.sin(s)+1)/2;switch(e){case"wave":return h;case"pulse":return t%3===0?1:0;case"spiral":return Math.abs(Math.sin(s+t*.3));case"zigzag":return i==="left"?h:1-h;case"interference":return Math.abs(Math.sin(s)+Math.sin(s*1.618))/2;case"quantum":return Math.random()>.4?Math.random():0;case"vortex":return Math.abs(Math.cos(s+t*.1))*h;case"standing":return t%4<2?h:0;case"dimensional":return Math.pow(h,2);case"infinite":return .7;case"phase":return Math.abs(Math.sin(s+Math.PI/4));case"resonance":return h>.8?1:h*.3;default:return h*.6}}static drawCosmicGeometryStructure(e,s,t,i,h){for(let n=0;n<h;n++){const a=i+n;if(a>=this.HEIGHT)break;n%2===0?this.setPixel(e,s,this.CENTER_COL2,a,1,this.COLORS.WHITE):this.setPixel(e,s,this.CENTER_COL1,a,1,this.COLORS.WHITE);const r=n*Math.PI*2/13,l=n*1.618033988749%(2*Math.PI),O=9,f=0+Math.round(O/2+O/2*Math.sin(r));this.setPixel(e,s,Math.max(0,Math.min(9,f)),a,1,this.COLORS.BLUE);const x=8,u=14+Math.round(x/2+x/2*Math.cos(l));this.setPixel(e,s,Math.max(14,Math.min(22,u)),a,1,this.COLORS.BLUE)}}static drawChemicalFormula(e,s,t,i,h){for(let n=0;n<h.length;n++){const a=h[n],r=i+n;a>0&&(this.setPixel(e,s,t,r,1,this.COLORS.GREEN),a>=3&&this.setPixel(e,s,t+1,r,1,this.COLORS.GREEN),a>=5&&this.setPixel(e,s,t-1,r,1,this.COLORS.GREEN))}}static drawCompactBlock(e,s,t,i,h,n){for(let a=i;a<i+n;a++)for(let r=t;r<t+h;r++)this.setPixel(e,s,r,a,1,this.COLORS.GREEN)}static getComplementaryBases(e){const s={A:"T",T:"A",G:"C",C:"G",U:"A",X:"X"};return e.map(t=>s[t]||"X")}static getPhosphateEquivalent(e){return e.includes(15)?15:e[e.length-1]}static drawCarbonBasedElements(e,s,t){this.drawElementBinary(e,s,t[0],9,9,4),this.drawElementBinary(e,s,t[1],11,8,5),this.setPixel(e,s,10,6,1,this.COLORS.PURPLE),this.setPixel(e,s,12,6,1,this.COLORS.PURPLE),this.drawElementBinary(e,s,t[2],13,9,4),this.drawElementBinary(e,s,t[3],7,8,4),this.drawElementBinary(e,s,t[4],15,7,5)}static drawSiliconBasedElements(e,s,t){for(let n=0;n<t.length&&n<5;n++){const a=[0,Math.PI/2,Math.PI,3*Math.PI/2,Math.PI/4],r=3+n%2,l=Math.floor(11+r*Math.cos(a[n])),O=Math.floor(r*Math.sin(a[n])*.5);this.drawElementBinary(e,s,t[n],l,7+O,4),n>0&&this.setPixel(e,s,11,7,1,this.COLORS.PURPLE)}}static drawRoboticElements(e,s,t){const h=t.join(""),n=this.createSeededRandom(this.hashString(h+"robotic")),a=[[5,8,11,14,17],[4,7,11,15,18],[6,9,11,13,16],[3,8,11,14,19],[5,9,11,13,17]],r=Math.floor(n.random()*a.length),l=a[r];for(let O=0;O<t.length&&O<5;O++){const f=l[O],x=Math.floor(n.random()*3)-1,u=Math.max(3,Math.min(19,f+x)),P=3+Math.floor(n.random()*2);if(this.drawElementBinary(e,s,t[O],u,7,P),O>0){const c=Math.max(3,Math.min(19,l[O-1]+(Math.floor(n.random()*3)-1)));switch(Math.floor(n.random()*3)){case 0:for(let m=Math.min(c,u)+1;m<Math.max(c,u);m++)this.setPixel(e,s,m,9,1,this.COLORS.PURPLE);break;case 1:const E=Math.floor((c+u)/2);for(let m=c+1;m<=E;m++)m%2===0&&this.setPixel(e,s,m,9,1,this.COLORS.PURPLE);for(let m=E+1;m<u;m++)m%2===1&&this.setPixel(e,s,m,9,1,this.COLORS.PURPLE);break;case 2:this.setPixel(e,s,Math.floor((c+u)/2),8,1,this.COLORS.PURPLE),this.setPixel(e,s,Math.floor((c+u)/2),9,1,this.COLORS.PURPLE),this.setPixel(e,s,Math.floor((c+u)/2),10,1,this.COLORS.PURPLE);break}}this.setPixel(e,s,u,9,1,this.COLORS.PURPLE),this.setPixel(e,s,u,6,1,this.COLORS.PURPLE),t[O]>=29&&(n.random()>.5&&this.setPixel(e,s,u,5,1,this.COLORS.PURPLE),n.random()>.5&&this.setPixel(e,s,u,10,1,this.COLORS.PURPLE)),(t[O]===14||t[O]===32)&&n.random()>.6&&(this.setPixel(e,s,u-1,7,1,this.COLORS.PURPLE),this.setPixel(e,s,u+1,7,1,this.COLORS.PURPLE))}}static drawGaseousElements(e,s,t){const n=t.join(""),a=this.createSeededRandom(this.hashString(n+"gaseous"));for(let r=0;r<t.length&&r<5;r++){const l=2+r,O=Math.floor(a.random()*3)-1,f=Math.max(1,l+O),x=11+(r%2===0?-f:f),u=Math.floor(a.random()*3)-1,S=Math.max(0,Math.min(22,x+u)),P=Math.floor(r/2),c=Math.floor(a.random()*2),o=P+c;if(this.drawElementBinary(e,s,t[r],S,5+o,3),a.random()>.3){const E=Math.max(0,Math.min(22,S+Math.floor(a.random()*3)-1)),m=Math.max(5,Math.min(this.HEIGHT-1,5+o+Math.floor(a.random()*3)-1));this.setPixel(e,s,E,m,1,this.COLORS.PURPLE)}}}static drawEnergyElements(e,s,t){for(let n=0;n<t.length&&n<5;n++){const a=n*Math.PI/2,r=3;for(let l=0;l<5;l++){const O=11+Math.floor(r*Math.sin(a+l*.5))-2+n,f=5+l;if(O>=0&&O<23){const x=t[n].toString(2);if(l<x.length){const u=parseInt(x[x.length-1-l]);this.setPixel(e,s,O,f,u,this.COLORS.PURPLE)}}}}}static drawDivineElements(e,s,t){for(let n=0;n<t.length&&n<5;n++){const a=n*2*Math.PI/5,r=2,l=4,O=Math.floor(11+r*Math.cos(a)),f=Math.floor(7+r*Math.sin(a)*.5),x=Math.floor(11+l*Math.cos(a)),u=Math.floor(7+l*Math.sin(a)*.5);this.drawElementBinary(e,s,t[n],O,f,2),this.drawElementBinary(e,s,t[n],x,u,2),this.drawLine(e,s,O,f,x,u,this.COLORS.PURPLE),this.drawLine(e,s,11,7,O,f,this.COLORS.PURPLE)}}static drawElementBinary(e,s,t,i,h,n){const a=t.toString(2);for(let r=0;r<Math.min(a.length,n);r++){const l=h-r,O=parseInt(a[a.length-1-r]);l>=5&&l<=9&&this.setPixel(e,s,i,l,O,this.COLORS.PURPLE)}}static drawLine(e,s,t,i,h,n,a){const r=Math.abs(h-t),l=Math.abs(n-i),O=t<h?1:-1,f=i<n?1:-1;let x=r-l,u=t,S=i;for(;u>=0&&u<23&&S>=5&&S<=9&&this.setPixel(e,s,u,S,1,a),!(u===h&&S===n);){const P=2*x;P>-l&&(x-=l,u+=O),P<r&&(x+=r,S+=f)}}static drawBinaryNumber(e,s,t,i,h,n){const a=t.toString(2),r=Math.min(a.length,23-i);for(let l=0;l<r;l++){const O=parseInt(a[l]);this.setPixel(e,s,i+l,h,O,n)}}static drawBlankLine(e,s,t){for(let i=0;i<this.WIDTH;i++)this.setPixel(e,s,i,t,0)}static getLifeCategory(e){return{Bacteria:"carbon-based",Vegetation:"carbon-based","Animal Life":"carbon-based","Intelligent Life":"carbon-based","Vegetable Animals":"carbon-based","Silicon-Based Life":"silicon-based","Robotic Entities":"robotic","Conscious Gas":"gaseous","Non-Physical Entity":"energy","Have I just found God?":"divine"}[e]||"carbon-based"}static getElementsForLifeForm(e,s){let i={Bacteria:[1,6,7,8,15],Vegetation:[1,6,7,8,12],"Animal Life":[1,6,7,8,20],"Intelligent Life":[1,6,7,8,15],"Vegetable Animals":[1,6,7,8,26],"Silicon-Based Life":[1,14,8,13,16],"Robotic Entities":[14,29,79,47,6],"Conscious Gas":[1,2,10,18,36],"Non-Physical Entity":[1,3,11,19,37],"Have I just found God?":[1,2,3,4,5]}[e]||[1,6,7,8,15];if(!s||s==="Earth")return i;const h=this.hashString(e+s+"elements"),n=this.createSeededRandom(h);if(e==="Intelligent Life"){const a=[1,6,7,8],r=[15,16,12,20,26,19,11],l=Math.floor(n.random()*r.length),O=r[l];return[...a,O]}if(e==="Bacteria"){const a=[1,6,7,8],r=[15,16,26,25,24,28,27,42,74],l=Math.floor(n.random()*r.length),O=r[l];return[...a,O]}if(e==="Vegetable Animals"){const a=[1,6,7,8],r=[26,12,20,29,25,30,42,27,28],l=Math.floor(n.random()*r.length),O=r[l];return[...a,O]}if(e==="Vegetation"){const a=[1,6,7,8],r=[12,26,29,30,25,42,16,20],l=Math.floor(n.random()*r.length),O=r[l];return[...a,O]}if(e==="Silicon-Based Life"){const a=[14,8],r=[[1,13,16],[13,26,12],[20,19,11],[26,24,28],[12,25,30],[22,23,27],[40,39,38],[3,4,9],[5,15,17]],l=Math.floor(n.random()*r.length),O=r[l];return[...a,...O]}if(e==="Non-Physical Entity"){const a=[[1,2,7,10],[3,4,8,11],[5,6,9,12],[13,14,15,16],[17,18,19,20],[21,22,23,24],[25,26,27,28],[29,30,31,32],[33,34,35,36]],r=Math.floor(n.random()*a.length);return a[r]}if(e==="Conscious Gas"){const a=[1,2],r=[10,18,36,54,7,8,9,17,35],l=[...a],O=[...r];for(let x=O.length-1;x>0;x--){const u=Math.floor(n.random()*(x+1));[O[x],O[u]]=[O[u],O[x]]}l.push(...O.slice(0,3));const f={1:"H",2:"He",7:"N",8:"O",9:"F",10:"Ne",17:"Cl",18:"Ar",35:"Br",36:"Kr",54:"Xe"};return l.map(x=>f[x]||x).join(", "),l}if(e==="Robotic Entities"){const a=[14,6],r=[29,79,47,13,26,28,22,31,32,33,49,50,74],l=[...a],O=[...r];for(let x=O.length-1;x>0;x--){const u=Math.floor(n.random()*(x+1));[O[x],O[u]]=[O[u],O[x]]}l.push(...O.slice(0,3));const f={6:"C",13:"Al",14:"Si",22:"Ti",26:"Fe",28:"Ni",29:"Cu",31:"Ga",32:"Ge",33:"As",47:"Ag",49:"In",50:"Sn",74:"W",79:"Au"};return l.map(x=>f[x]||x).join(", "),l}return i}static getNitrogenBases(e,s){let i={Bacteria:["A","T","G","C"],Vegetation:["A","T","G","C"],"Animal Life":["A","T","G","C"],"Intelligent Life":["A","T","G","C"],"Vegetable Animals":["A","T","G","C"],"Silicon-Based Life":["Si","Al","O","S"],"Robotic Entities":["0","1","X","Z"],"Conscious Gas":["|0⟩","|1⟩","|+⟩","|-⟩"],"Non-Physical Entity":["α","β","γ","δ"],"Have I just found God?":["∞","Ω","Φ","Ψ"]}[e]||["A","T","G","C"];if(!s||s==="Earth")return i;if(e==="Silicon-Based Life"){const h=this.getElementsForLifeForm(e,s),n={1:"H",3:"Li",4:"Be",5:"B",8:"O",9:"F",11:"Na",12:"Mg",13:"Al",14:"Si",15:"P",16:"S",17:"Cl",19:"K",20:"Ca",22:"Ti",23:"V",24:"Cr",25:"Mn",26:"Fe",27:"Co",28:"Ni",29:"Cu",30:"Zn",38:"Sr",39:"Y",40:"Zr"},a=h.slice(0,4).map(r=>n[r]||r.toString());for(;a.length<4;)a.push("Si");return a}if(e==="Non-Physical Entity"){const h=this.getElementsForLifeForm(e,s),n={1:"α",2:"β",3:"γ",4:"δ",5:"ε",6:"ζ",7:"η",8:"θ",9:"ι",10:"κ",11:"λ",12:"μ",13:"ν",14:"ξ",15:"ο",16:"π",17:"ρ",18:"σ",19:"τ",20:"υ",21:"φ",22:"χ",23:"ψ",24:"ω",25:"∆",26:"∇",27:"∞",28:"Ω",29:"Φ",30:"Ψ",31:"≈",32:"∼",33:"※",34:"⟨⟩",35:"◊",36:"◎"},a=h.slice(0,4).map(r=>n[r]||`E${r}`);for(;a.length<4;)a.push("∅");return a}if(e==="Intelligent Life"){const h=this.hashString(e+s+"bases"),n=this.createSeededRandom(h),a=["A","T","G","C"],r=["U","I","X","D","P","M"];if(n.random()<.85)return a;{const l=Math.floor(n.random()*2)+1,O=[...a];for(let f=0;f<l;f++){const x=Math.floor(n.random()*4),u=Math.floor(n.random()*r.length);O[x]=r[u]}return O}}return i}static getNucleotideVariation(e,s){const t=this.createElementMap(s);return this.generateElementBasedNucleotides(t,e)}static createElementMap(e){const s={1:"H",6:"C",7:"N",8:"O",15:"P",16:"S",14:"Si",13:"Al",20:"Ca",26:"Fe",12:"Mg",32:"Ge",31:"Ga",49:"In",73:"Ta",11:"Na",2:"He",10:"Ne",18:"Ar",36:"Kr",54:"Xe",115:"Mc",118:"Og",119:"Uue",120:"Ubn",126:"Ubh"},t={};for(const i of e){const h=s[i];h&&(t[h]=!0)}return t}static generateElementBasedNucleotides(e,s){return e.C&&e.N&&e.O&&e.H?this.generateCarbonBasedNucleotides(e,s):e.Si&&e.O&&!e.C?this.generateSiliconBasedNucleotides(e):e.Ga||e.Ge||e.In||e.Ta?this.generateMetallicNucleotides(e):e.He||e.Ne||e.Ar||e.Kr||e.Xe?this.generateGaseousInformation(e):e.Mc||e.Og||e.Uue?this.generateExoticInformation(e):this.generateGenericInformation(e)}static generateCarbonBasedNucleotides(e,s){const t=e.P,i=e.S;return e.Mg,{bases:[{name:"A",formula:this.adaptFormulaToElements([5,5,5,0,1],e)},{name:e.O&&s!=="Vegetation"?"T":"U",formula:this.adaptFormulaToElements(e.O?[6,5,2,2,1]:[4,4,2,2,1],e)},{name:"G",formula:this.adaptFormulaToElements([5,5,5,e.O?1:0,1],e)},{name:"C",formula:this.adaptFormulaToElements([5,4,3,e.O?1:0,1],e)}],usesRNA:!e.O||s==="Vegetation",gcContent:i?"high":"moderate",backbone:t?"phosphate":i?"sulfate":"alternative",sugarType:e.O?"deoxyribose":"modified_ribose"}}static generateSiliconBasedNucleotides(e){return{bases:[{name:"SiO4",formula:[0,0,0,4,0,1]},{name:"Si2O3",formula:[0,0,0,3,0,2]},{name:"SiO3Al",formula:[0,0,0,3,0,1,1]},{name:"SiO2",formula:[0,0,0,2,0,1]}],usesRNA:!1,gcContent:"crystalline",backbone:"silicate_chain",sugarType:"silicon_cage"}}static generateMetallicNucleotides(e){return{bases:[{name:"00",formula:[0,0,0,0,0,0,0,1]},{name:"01",formula:[0,0,0,0,0,0,1,0]},{name:"10",formula:[0,0,0,0,0,0,0,0,1]},{name:"11",formula:[0,0,0,0,0,0,0,0,0,1]}],usesRNA:!1,gcContent:"digital",backbone:"metallic_conductor",sugarType:"none"}}static generateGaseousInformation(e){return{bases:[{name:"|0⟩",formula:[0,0,0,0,0,0,0,0,0,1]},{name:"|1⟩",formula:[0,0,0,0,0,0,0,0,0,0,1]},{name:"|+⟩",formula:[0,0,0,0,0,0,0,0,0,0,0,1]},{name:"|-⟩",formula:[0,0,0,0,0,0,0,0,0,0,0,0,1]}],usesRNA:!1,gcContent:"quantum",backbone:"field_interaction",sugarType:"none"}}static generateExoticInformation(e){return{bases:[{name:"α",formula:[0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]},{name:"β",formula:[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]},{name:"γ",formula:[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]},{name:"δ",formula:[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1]}],usesRNA:!1,gcContent:"cosmic",backbone:"spacetime_fabric",sugarType:"none"}}static generateGenericInformation(e){const s=Object.keys(e),t=[];for(let i=0;i<Math.min(4,s.length);i++){const h=new Array(15).fill(0);h[i]=1,t.push({name:s[i],formula:h})}return{bases:t,usesRNA:!1,gcContent:"variable",backbone:"elemental",sugarType:"adapted"}}static adaptFormulaToElements(e,s){const t=[...e];if(t[4]>0){const i={S:1,Mg:.5,Ca:.5,Fe:1,K:1,Na:1};for(const[h,n]of Object.entries(i))if(s[h]&&!s.P){const a=t[4];t[4]=Math.max(1,Math.floor(a*n));break}}return s.S&&t[4]>0&&(t[3]=Math.max(1,t[3]-1),t[4]=t[4]+1),s.Mg&&t[3]>0&&(t[3]=t[3]+1),t}static getGenomeSizeData(e,s,t){const i={Bacteria:{totalBases:4641652,genes:4288,gcContent:"high",chromosomes:1,complexity:"simple",modification:"methylation",plasmids:!0,repetitiveElements:3.2},Vegetation:{totalBases:125e6,genes:27416,gcContent:"moderate",chromosomes:5,complexity:"moderate",modification:"chloroplast",mitochondrial:367808,repetitiveElements:14},"Animal Life":{totalBases:32e8,genes:19969,gcContent:"variable",chromosomes:23,complexity:"very_high",modification:"epigenetic",introns:95,repetitiveElements:45},"Intelligent Life":{totalBases:32e8,genes:19969,gcContent:"optimized",chromosomes:23,complexity:"enhanced",modification:"advanced_epigenetic",enhancedRegulation:!0,repetitiveElements:35},"Vegetable Animals":{totalBases:6e8,genes:23e3,gcContent:"mixed",chromosomes:16,complexity:"chimeric",modification:"dual_system",chloroplasts:!0,repetitiveElements:25}},h={"Silicon-Based Life":{totalBases:2e6,genes:8e3,gcContent:"crystalline",chromosomes:3,complexity:"moderate",modification:"doping",repetitiveElements:60},"Robotic Entities":{totalBases:2147483647,genes:65536,gcContent:"binary",chromosomes:8,complexity:"digital",modification:"compilation",repetitiveElements:20},"Conscious Gas":{totalBases:1048576,genes:256,gcContent:"quantum",chromosomes:4,complexity:"quantum",modification:"entanglement",repetitiveElements:0},"Non-Physical Entity":{totalBases:299792458,genes:2e3,gcContent:"energy",chromosomes:7,complexity:"energetic",modification:"resonance",repetitiveElements:10},"Have I just found God?":{totalBases:3141592653,genes:137,gcContent:"infinite",chromosomes:11,complexity:"cosmic",modification:"omnipresence",repetitiveElements:0}};let n;if(i[e])n=i[e];else if(h[e])n=h[e];else{const u=t.reduce((S,P)=>S+P,0);u<100?n=i.Bacteria:u<200?n=i.Vegetation:n=i["Animal Life"]}const a=this.hashString(e+s),r=this.createSeededRandom(a),l={...n},O=e==="Intelligent Life"?.1:.2,f=(r.random()-.5)*2*O;l.totalBases=Math.floor(n.totalBases*(1+f));const x=(r.random()-.5)*2*.15;if(l.genes=Math.floor(n.genes*(1+x)),typeof n.repetitiveElements=="number"){const u=(r.random()-.5)*2*.05;l.repetitiveElements=Math.max(0,n.repetitiveElements*(1+u))}return l}static getGenomeSize(e){const s=e.reduce((t,i)=>t+i,0);return s<50?4e6:s<100?15e7:s<150?1e9:s<200?3e9:s<250?32e8:s<500?2147483647:4294967295}static renderToCanvas(e,s,t=10){s.width=e.width*t,s.height=e.height*t;const i=s.getContext("2d");if(!i)return;i.fillStyle="#000000",i.fillRect(0,0,s.width,s.height);const h=["#000000","#FFFFFF","#9966CC","#00FF00","#0066FF","#FF6600","#FF0000","#FFFF00","#B19CD9"];for(let n=0;n<e.height;n++)for(let a=0;a<e.width;a++){const r=n*e.width+a;if(e.bitmap[r]===1){const l=e.colorMap[r]||1;i.fillStyle=h[l]||"#FFFFFF",i.fillRect(a*t,n*t,t,t)}}}static exportToPNG(e,s=10){const t=document.createElement("canvas");return this.renderToCanvas(e,t,s),t.toDataURL("image/png")}static drawLifeFormSection(e,s,t,i,h,n){this.drawLifeFormHeight(e,s,t,i,h,n),this.drawLifeFormRepresentation(e,s,t,i,h,n),this.drawLifeFormPopulation(e,s,t,i,h,n)}static drawLifeFormHeight(e,s,t,i,h,n){if(t==="Have I just found God?")return;const a=this.generateLifeFormHeight(t,i),r=3,l=a.toString(2),O=h+Math.floor(n/2),f=r-2,x=n;for(let u=0;u<x;u++){const S=h+u;S===O-1||S===O||S===O+1||this.setPixel(e,s,r,S,1,this.COLORS.BLUE)}this.setPixel(e,s,f,O,1,this.COLORS.WHITE);for(let u=0;u<l.length&&u<4;u++){const S=parseInt(l[u]),P=f+1+u;P!==r&&S===1&&this.setPixel(e,s,P,O,1,this.COLORS.WHITE)}}static drawLifeFormRepresentation(e,s,t,i,h,n){const a=this.getLifeCategory(t),r=[8,9,10,11,12,13,14],l=r[Math.floor(r.length/2)];if(t==="Intelligent Life"){const O=this.hashString(t+i),f=this.createSeededRandom(O),x=Math.floor(f.random()*5),u=Math.floor(f.random()*5),S=Math.floor(f.random()*5);this.drawModularLifeForm(e,s,l,h,n,x,u,S)}else{const O=this.hashString(t+i),f=this.createSeededRandom(O);switch(a){case"carbon-based":this.drawCarbonBasedForm(e,s,r,l,h,n,t,f);break;case"silicon-based":this.drawSiliconBasedForm(e,s,r,l,h,n,f);break;case"robotic":this.drawRoboticForm(e,s,r,l,h,n,f);break;case"gaseous":this.drawGaseousForm(e,s,r,l,h,n,f);break;case"energy":this.drawEnergyForm(e,s,r,l,h,n,f,t,i);break;case"divine":this.drawDivineForm(e,s,r,l,h,n,f);break;default:this.drawHumanoidForm(e,s,r,l,h,n)}}}static drawLifeFormPopulation(e,s,t,i,h,n){const r=this.generatePlanetaryPopulation(t,i).toString(2),l=16,O=6,f=n;let x=r.length-1;for(let u=0;u<f&&x>=0;u++)for(let S=0;S<O&&x>=0;S++)parseInt(r[x])===1&&this.setPixel(e,s,l+S,h+u,1,this.COLORS.WHITE),x--}static generateLifeFormHeight(e,s){if(e==="Intelligent Life"){const n=this.hashString(e+s),a=this.createSeededRandom(n),r=[12,14,18,22,26],l=Math.floor(a.random()*r.length);return r[l]}const t=this.getLifeCategory(e),i=this.hashString(e+s),h=this.createSeededRandom(i);switch(t){case"carbon-based":return Math.floor(10+h.random()*15);case"silicon-based":return Math.floor(25+h.random()*25);case"robotic":return Math.floor(5+h.random()*95);case"gaseous":return Math.floor(100+h.random()*100);case"energy":return Math.floor(1+h.random()*9);case"divine":return Math.floor(200+h.random()*55);default:return Math.floor(12+h.random()*6)}}static generatePlanetaryPopulation(e,s){const t=this.getLifeCategory(e),i=this.hashString(e+s),h=this.createSeededRandom(i);switch(t){case"carbon-based":return Math.floor(1e9+h.random()*9e9);case"silicon-based":return Math.floor(1e8+h.random()*19e8);case"robotic":return Math.floor(1e6+h.random()*4999e6);case"gaseous":return Math.floor(1e7+h.random()*49e7);case"energy":return Math.floor(1e5+h.random()*499e5);case"divine":return 1;default:return Math.floor(3e9+h.random()*3e9)}}static hashString(e){let s=0;for(let t=0;t<e.length;t++){const i=e.charCodeAt(t);s=(s<<5)-s+i,s=s&s}return Math.abs(s)}static createSeededRandom(e){return{random:()=>(e=(e*9301+49297)%233280,e/233280)}}static drawModularLifeForm(e,s,t,i,h,n,a,r){this.drawHead(e,s,t,i,n),this.drawTorso(e,s,t,i+3,a),this.drawLegs(e,s,t,i+6,r)}static drawHead(e,s,t,i,h){switch(h){case 0:this.setPixel(e,s,t,i,1,this.COLORS.RED),this.setPixel(e,s,t-1,i+1,1,this.COLORS.RED),this.setPixel(e,s,t,i+1,1,this.COLORS.RED),this.setPixel(e,s,t+1,i+1,1,this.COLORS.RED);break;case 1:this.setPixel(e,s,t,i,1,this.COLORS.RED),this.setPixel(e,s,t-1,i+1,1,this.COLORS.RED),this.setPixel(e,s,t+1,i+1,1,this.COLORS.RED),this.setPixel(e,s,t-1,i+2,1,this.COLORS.RED),this.setPixel(e,s,t,i+2,1,this.COLORS.RED),this.setPixel(e,s,t+1,i+2,1,this.COLORS.RED);break;case 2:for(let n=0;n<3;n++)for(let a=-1;a<=1;a++)this.setPixel(e,s,t+a,i+n,1,this.COLORS.RED);break;case 3:this.setPixel(e,s,t,i,1,this.COLORS.RED),this.setPixel(e,s,t,i+1,1,this.COLORS.RED),this.setPixel(e,s,t-1,i+2,1,this.COLORS.RED),this.setPixel(e,s,t,i+2,1,this.COLORS.RED),this.setPixel(e,s,t+1,i+2,1,this.COLORS.RED);break;case 4:this.setPixel(e,s,t-1,i,1,this.COLORS.RED),this.setPixel(e,s,t+1,i,1,this.COLORS.RED),this.setPixel(e,s,t,i+1,1,this.COLORS.RED),this.setPixel(e,s,t-1,i+2,1,this.COLORS.RED),this.setPixel(e,s,t,i+2,1,this.COLORS.RED),this.setPixel(e,s,t+1,i+2,1,this.COLORS.RED);break}}static drawTorso(e,s,t,i,h){switch(h){case 0:for(let n=0;n<3;n++)this.setPixel(e,s,t,i+n,1,this.COLORS.RED);this.setPixel(e,s,t-1,i+1,1,this.COLORS.RED),this.setPixel(e,s,t+1,i+1,1,this.COLORS.RED);break;case 1:for(let n=0;n<3;n++)for(let a=-1;a<=1;a++)this.setPixel(e,s,t+a,i+n,1,this.COLORS.RED);this.setPixel(e,s,t-2,i+1,1,this.COLORS.RED),this.setPixel(e,s,t+2,i+1,1,this.COLORS.RED);break;case 2:for(let n=0;n<3;n++)this.setPixel(e,s,t,i+n,1,this.COLORS.RED);this.setPixel(e,s,t-1,i,1,this.COLORS.RED),this.setPixel(e,s,t+1,i,1,this.COLORS.RED),this.setPixel(e,s,t-2,i+1,1,this.COLORS.RED),this.setPixel(e,s,t+2,i+1,1,this.COLORS.RED),this.setPixel(e,s,t-1,i+2,1,this.COLORS.RED),this.setPixel(e,s,t+1,i+2,1,this.COLORS.RED);break;case 3:this.setPixel(e,s,t,i,1,this.COLORS.RED),this.setPixel(e,s,t,i+1,1,this.COLORS.RED),this.setPixel(e,s,t,i+2,1,this.COLORS.RED),this.setPixel(e,s,t-2,i+1,1,this.COLORS.RED),this.setPixel(e,s,t+2,i+1,1,this.COLORS.RED);break;case 4:this.setPixel(e,s,t,i,1,this.COLORS.RED),this.setPixel(e,s,t-1,i+1,1,this.COLORS.RED),this.setPixel(e,s,t,i+1,1,this.COLORS.RED),this.setPixel(e,s,t+1,i+1,1,this.COLORS.RED),this.setPixel(e,s,t,i+2,1,this.COLORS.RED),this.setPixel(e,s,t-2,i+1,1,this.COLORS.RED),this.setPixel(e,s,t+2,i+1,1,this.COLORS.RED);break}}static drawLegs(e,s,t,i,h){switch(h){case 0:for(let n=0;n<3;n++)this.setPixel(e,s,t-1,i+n,1,this.COLORS.RED),this.setPixel(e,s,t+1,i+n,1,this.COLORS.RED);break;case 1:for(let n=0;n<2;n++)this.setPixel(e,s,t-1,i+n,1,this.COLORS.RED),this.setPixel(e,s,t+1,i+n,1,this.COLORS.RED);this.setPixel(e,s,t-2,i+2,1,this.COLORS.RED),this.setPixel(e,s,t-1,i+2,1,this.COLORS.RED),this.setPixel(e,s,t+1,i+2,1,this.COLORS.RED),this.setPixel(e,s,t+2,i+2,1,this.COLORS.RED);break;case 2:this.setPixel(e,s,t-2,i,1,this.COLORS.RED),this.setPixel(e,s,t-1,i,1,this.COLORS.RED),this.setPixel(e,s,t+1,i,1,this.COLORS.RED),this.setPixel(e,s,t+2,i,1,this.COLORS.RED),this.setPixel(e,s,t-2,i+1,1,this.COLORS.RED),this.setPixel(e,s,t-1,i+1,1,this.COLORS.RED),this.setPixel(e,s,t+1,i+1,1,this.COLORS.RED),this.setPixel(e,s,t+2,i+1,1,this.COLORS.RED),this.setPixel(e,s,t-2,i+2,1,this.COLORS.RED),this.setPixel(e,s,t-1,i+2,1,this.COLORS.RED),this.setPixel(e,s,t+1,i+2,1,this.COLORS.RED),this.setPixel(e,s,t+2,i+2,1,this.COLORS.RED);break;case 3:this.setPixel(e,s,t,i,1,this.COLORS.RED),this.setPixel(e,s,t,i+1,1,this.COLORS.RED),this.setPixel(e,s,t,i+2,1,this.COLORS.RED);break;case 4:this.setPixel(e,s,t-1,i,1,this.COLORS.RED),this.setPixel(e,s,t+1,i,1,this.COLORS.RED),this.setPixel(e,s,t-2,i+1,1,this.COLORS.RED),this.setPixel(e,s,t,i+1,1,this.COLORS.RED),this.setPixel(e,s,t+2,i+1,1,this.COLORS.RED),this.setPixel(e,s,t-1,i+2,1,this.COLORS.RED),this.setPixel(e,s,t+1,i+2,1,this.COLORS.RED);break}}static drawHumanoidForm(e,s,t,i,h,n){this.setPixel(e,s,i,h,1,this.COLORS.RED),this.setPixel(e,s,i-1,h+1,1,this.COLORS.RED),this.setPixel(e,s,i,h+1,1,this.COLORS.RED),this.setPixel(e,s,i+1,h+1,1,this.COLORS.RED);for(let a=2;a<=5;a++)this.setPixel(e,s,i,h+a,1,this.COLORS.RED);this.setPixel(e,s,i-1,h+3,1,this.COLORS.RED),this.setPixel(e,s,i+1,h+3,1,this.COLORS.RED),this.setPixel(e,s,i-2,h+3,1,this.COLORS.RED),this.setPixel(e,s,i+2,h+3,1,this.COLORS.RED);for(let a=6;a<n;a++)this.setPixel(e,s,i-1,h+a,1,this.COLORS.RED),this.setPixel(e,s,i+1,h+a,1,this.COLORS.RED)}static drawCarbonBasedForm(e,s,t,i,h,n,a,r){switch(a){case"Bacteria":this.drawBacteriaForm(e,s,i,h,n,r);break;case"Vegetation":this.drawVegetationForm(e,s,i,h,n,r);break;case"Animal Life":this.drawAnimalForm(e,s,i,h,n,r);break;case"Vegetable Animals":this.drawVegetableAnimalForm(e,s,i,h,n,r);break;case"Intelligent Life":this.drawHumanoidForm(e,s,t,i,h,n);break;default:this.drawHumanoidForm(e,s,t,i,h,n)}}static drawSiliconBasedForm(e,s,t,i,h,n,a){switch(Math.floor(a.random()*7)){case 0:this.drawQuartzCrystal(e,s,i,h,n);break;case 1:this.drawFeldsparStructure(e,s,i,h,n);break;case 2:this.drawOlivineNetwork(e,s,i,h,n);break;case 3:this.drawZeoliteFramework(e,s,i,h,n);break;case 4:this.drawGarnetStructure(e,s,i,h,n);break;case 5:this.drawPyroxeneChain(e,s,i,h,n);break;default:this.drawSilicateMatrix(e,s,i,h,n)}}static drawQuartzCrystal(e,s,t,i,h){this.setPixel(e,s,t,i,1,this.COLORS.RED),this.setPixel(e,s,t-1,i+1,1,this.COLORS.RED),this.setPixel(e,s,t+1,i+1,1,this.COLORS.RED),this.setPixel(e,s,t-2,i+2,1,this.COLORS.RED),this.setPixel(e,s,t,i+2,1,this.COLORS.RED),this.setPixel(e,s,t+2,i+2,1,this.COLORS.RED),this.setPixel(e,s,t-2,i+3,1,this.COLORS.RED),this.setPixel(e,s,t+2,i+3,1,this.COLORS.RED),this.setPixel(e,s,t-1,i+4,1,this.COLORS.RED),this.setPixel(e,s,t+1,i+4,1,this.COLORS.RED),this.setPixel(e,s,t,i+5,1,this.COLORS.RED)}static drawFeldsparStructure(e,s,t,i,h){this.setPixel(e,s,t-1,i,1,this.COLORS.RED),this.setPixel(e,s,t+1,i,1,this.COLORS.RED),this.setPixel(e,s,t,i+1,1,this.COLORS.RED),this.setPixel(e,s,t-2,i+1,1,this.COLORS.RED),this.setPixel(e,s,t+2,i+1,1,this.COLORS.RED),this.setPixel(e,s,t-1,i+2,1,this.COLORS.RED),this.setPixel(e,s,t+1,i+2,1,this.COLORS.RED),this.setPixel(e,s,t,i+3,1,this.COLORS.RED),this.setPixel(e,s,t-2,i+4,1,this.COLORS.RED),this.setPixel(e,s,t+2,i+4,1,this.COLORS.RED)}static drawOlivineNetwork(e,s,t,i,h){this.setPixel(e,s,t,i,1,this.COLORS.RED),this.setPixel(e,s,t-1,i+1,1,this.COLORS.RED),this.setPixel(e,s,t,i+1,1,this.COLORS.RED),this.setPixel(e,s,t+1,i+1,1,this.COLORS.RED),this.setPixel(e,s,t,i+2,1,this.COLORS.RED),this.setPixel(e,s,t-2,i+3,1,this.COLORS.RED),this.setPixel(e,s,t+2,i+3,1,this.COLORS.RED),this.setPixel(e,s,t-1,i+4,1,this.COLORS.RED),this.setPixel(e,s,t+1,i+4,1,this.COLORS.RED)}static drawZeoliteFramework(e,s,t,i,h){this.setPixel(e,s,t-2,i,1,this.COLORS.RED),this.setPixel(e,s,t,i,1,this.COLORS.RED),this.setPixel(e,s,t+2,i,1,this.COLORS.RED),this.setPixel(e,s,t-1,i+1,1,this.COLORS.RED),this.setPixel(e,s,t+1,i+1,1,this.COLORS.RED),this.setPixel(e,s,t-2,i+2,1,this.COLORS.RED),this.setPixel(e,s,t+2,i+2,1,this.COLORS.RED),this.setPixel(e,s,t-1,i+3,1,this.COLORS.RED),this.setPixel(e,s,t+1,i+3,1,this.COLORS.RED),this.setPixel(e,s,t,i+4,1,this.COLORS.RED)}static drawGarnetStructure(e,s,t,i,h){this.setPixel(e,s,t,i,1,this.COLORS.RED);for(let n=-2;n<=2;n++)this.setPixel(e,s,t+n,i+1,1,this.COLORS.RED);this.setPixel(e,s,t-2,i+2,1,this.COLORS.RED),this.setPixel(e,s,t,i+2,1,this.COLORS.RED),this.setPixel(e,s,t+2,i+2,1,this.COLORS.RED);for(let n=-1;n<=1;n++)this.setPixel(e,s,t+n,i+3,1,this.COLORS.RED);this.setPixel(e,s,t,i+4,1,this.COLORS.RED)}static drawPyroxeneChain(e,s,t,i,h){for(let n=0;n<Math.min(6,h);n++)this.setPixel(e,s,t,i+n,1,this.COLORS.RED),n%2===0&&(this.setPixel(e,s,t-1,i+n,1,this.COLORS.RED),this.setPixel(e,s,t+1,i+n,1,this.COLORS.RED))}static drawSilicateMatrix(e,s,t,i,h){this.setPixel(e,s,t,i,1,this.COLORS.RED),this.setPixel(e,s,t-1,i+1,1,this.COLORS.RED),this.setPixel(e,s,t+1,i+1,1,this.COLORS.RED);for(let n=-2;n<=2;n++)this.setPixel(e,s,t+n,i+2,1,this.COLORS.RED);this.setPixel(e,s,t-1,i+3,1,this.COLORS.RED),this.setPixel(e,s,t+1,i+3,1,this.COLORS.RED),this.setPixel(e,s,t,i+4,1,this.COLORS.RED),this.setPixel(e,s,t-2,i+5,1,this.COLORS.RED),this.setPixel(e,s,t+2,i+5,1,this.COLORS.RED)}static drawRoboticForm(e,s,t,i,h,n,a){const r=Math.floor(a.random()*3),l=Math.floor(a.random()*3),O=Math.floor(a.random()*3);this.drawModularRoboticForm(e,s,i,h,n,r,l,O)}static drawModularRoboticForm(e,s,t,i,h,n,a,r){switch(n){case 0:for(let l=-1;l<=1;l++)this.setPixel(e,s,t+l,i,1,this.COLORS.RED),this.setPixel(e,s,t+l,i+1,1,this.COLORS.RED);this.setPixel(e,s,t,i-1,1,this.COLORS.RED);break;case 1:this.setPixel(e,s,t,i,1,this.COLORS.RED),this.setPixel(e,s,t,i+1,1,this.COLORS.RED),this.setPixel(e,s,t-2,i,1,this.COLORS.RED),this.setPixel(e,s,t+2,i,1,this.COLORS.RED),this.setPixel(e,s,t-1,i+1,1,this.COLORS.RED),this.setPixel(e,s,t+1,i+1,1,this.COLORS.RED);break;case 2:this.setPixel(e,s,t,i,1,this.COLORS.RED);for(let l=-1;l<=1;l++)this.setPixel(e,s,t+l,i+1,1,this.COLORS.RED);this.setPixel(e,s,t-2,i+2,1,this.COLORS.RED),this.setPixel(e,s,t+2,i+2,1,this.COLORS.RED);break}switch(a){case 0:for(let l=3;l<=5;l++)this.setPixel(e,s,t-1,i+l,1,this.COLORS.RED),this.setPixel(e,s,t,i+l,1,this.COLORS.RED),this.setPixel(e,s,t+1,i+l,1,this.COLORS.RED);this.setPixel(e,s,t-2,i+4,1,this.COLORS.RED),this.setPixel(e,s,t+2,i+4,1,this.COLORS.RED);break;case 1:for(let l=3;l<=5;l++)this.setPixel(e,s,t,i+l,1,this.COLORS.RED);this.setPixel(e,s,t-1,i+3,1,this.COLORS.RED),this.setPixel(e,s,t+1,i+3,1,this.COLORS.RED),this.setPixel(e,s,t-1,i+5,1,this.COLORS.RED),this.setPixel(e,s,t+1,i+5,1,this.COLORS.RED),this.setPixel(e,s,t-3,i+4,1,this.COLORS.RED),this.setPixel(e,s,t+3,i+4,1,this.COLORS.RED);break;case 2:this.setPixel(e,s,t,i+4,1,this.COLORS.RED),this.setPixel(e,s,t-1,i+3,1,this.COLORS.RED),this.setPixel(e,s,t+1,i+3,1,this.COLORS.RED),this.setPixel(e,s,t-1,i+4,1,this.COLORS.RED),this.setPixel(e,s,t+1,i+4,1,this.COLORS.RED),this.setPixel(e,s,t-1,i+5,1,this.COLORS.RED),this.setPixel(e,s,t+1,i+5,1,this.COLORS.RED),this.setPixel(e,s,t-2,i+3,1,this.COLORS.RED),this.setPixel(e,s,t+2,i+3,1,this.COLORS.RED),this.setPixel(e,s,t-2,i+5,1,this.COLORS.RED),this.setPixel(e,s,t+2,i+5,1,this.COLORS.RED);break}switch(r){case 0:for(let l=6;l<Math.min(h,9);l++)this.setPixel(e,s,t-1,i+l,1,this.COLORS.RED),this.setPixel(e,s,t+1,i+l,1,this.COLORS.RED);break;case 1:for(let l=6;l<Math.min(h,9);l++)this.setPixel(e,s,t-1,i+l,1,this.COLORS.RED),this.setPixel(e,s,t+1,i+l,1,this.COLORS.RED),(l-6)%2===0&&(this.setPixel(e,s,t-2,i+l,1,this.COLORS.RED),this.setPixel(e,s,t+2,i+l,1,this.COLORS.RED));break;case 2:for(let l=6;l<Math.min(h,9);l++){for(let O=-2;O<=2;O++)this.setPixel(e,s,t+O,i+l,1,this.COLORS.RED);(l-6)%2===1&&this.setPixel(e,s,t,i+l,0,this.COLORS.BLACK)}break}}static drawGaseousForm(e,s,t,i,h,n,a){switch(Math.floor(a.random()*8)){case 0:this.drawGlobularGas(e,s,i,h,n);break;case 1:this.drawStreamingGas(e,s,i,h,n);break;case 2:this.drawTurbulentGas(e,s,i,h,n);break;case 3:this.drawLayeredGas(e,s,i,h,n);break;case 4:this.drawSpiralGas(e,s,i,h,n);break;case 5:this.drawClusteredGas(e,s,i,h,n);break;case 6:this.drawFilamentaryGas(e,s,i,h,n);break;default:this.drawDiffuseGas(e,s,i,h,n)}}static drawGlobularGas(e,s,t,i,h){this.setPixel(e,s,t,i+2,1,this.COLORS.RED),this.setPixel(e,s,t,i+3,1,this.COLORS.RED),this.setPixel(e,s,t-1,i+1,1,this.COLORS.RED),this.setPixel(e,s,t+1,i+1,1,this.COLORS.RED),this.setPixel(e,s,t-1,i+2,1,this.COLORS.RED),this.setPixel(e,s,t+1,i+2,1,this.COLORS.RED),this.setPixel(e,s,t-1,i+3,1,this.COLORS.RED),this.setPixel(e,s,t+1,i+3,1,this.COLORS.RED),this.setPixel(e,s,t-1,i+4,1,this.COLORS.RED),this.setPixel(e,s,t+1,i+4,1,this.COLORS.RED),this.setPixel(e,s,t,i+5,1,this.COLORS.RED)}static drawStreamingGas(e,s,t,i,h){this.setPixel(e,s,t-2,i+5,1,this.COLORS.RED),this.setPixel(e,s,t-1,i+4,1,this.COLORS.RED),this.setPixel(e,s,t,i+3,1,this.COLORS.RED),this.setPixel(e,s,t+1,i+2,1,this.COLORS.RED),this.setPixel(e,s,t+2,i+1,1,this.COLORS.RED),this.setPixel(e,s,t-1,i+3,1,this.COLORS.RED),this.setPixel(e,s,t+1,i+3,1,this.COLORS.RED)}static drawTurbulentGas(e,s,t,i,h){this.setPixel(e,s,t-1,i+1,1,this.COLORS.RED),this.setPixel(e,s,t,i+1,1,this.COLORS.RED),this.setPixel(e,s,t-2,i+2,1,this.COLORS.RED),this.setPixel(e,s,t+1,i+2,1,this.COLORS.RED),this.setPixel(e,s,t-1,i+3,1,this.COLORS.RED),this.setPixel(e,s,t+2,i+3,1,this.COLORS.RED),this.setPixel(e,s,t,i+4,1,this.COLORS.RED),this.setPixel(e,s,t+1,i+4,1,this.COLORS.RED),this.setPixel(e,s,t+1,i+5,1,this.COLORS.RED)}static drawLayeredGas(e,s,t,i,h){this.setPixel(e,s,t-1,i+1,1,this.COLORS.RED),this.setPixel(e,s,t,i+1,1,this.COLORS.RED),this.setPixel(e,s,t+1,i+1,1,this.COLORS.RED);for(let n=t-2;n<=t+2;n++)this.setPixel(e,s,n,i+3,1,this.COLORS.RED);this.setPixel(e,s,t-1,i+5,1,this.COLORS.RED),this.setPixel(e,s,t,i+5,1,this.COLORS.RED),this.setPixel(e,s,t+1,i+5,1,this.COLORS.RED)}static drawSpiralGas(e,s,t,i,h){this.setPixel(e,s,t,i+3,1,this.COLORS.RED),this.setPixel(e,s,t-1,i+2,1,this.COLORS.RED),this.setPixel(e,s,t+1,i+2,1,this.COLORS.RED),this.setPixel(e,s,t-2,i+3,1,this.COLORS.RED),this.setPixel(e,s,t+2,i+4,1,this.COLORS.RED),this.setPixel(e,s,t-1,i+4,1,this.COLORS.RED),this.setPixel(e,s,t,i+5,1,this.COLORS.RED),this.setPixel(e,s,t+1,i+1,1,this.COLORS.RED)}static drawClusteredGas(e,s,t,i,h){this.setPixel(e,s,t,i+2,1,this.COLORS.RED),this.setPixel(e,s,t,i+3,1,this.COLORS.RED),this.setPixel(e,s,t-2,i+1,1,this.COLORS.RED),this.setPixel(e,s,t-2,i+2,1,this.COLORS.RED),this.setPixel(e,s,t+2,i+4,1,this.COLORS.RED),this.setPixel(e,s,t+2,i+5,1,this.COLORS.RED),this.setPixel(e,s,t-1,i+2,1,this.COLORS.RED),this.setPixel(e,s,t+1,i+3,1,this.COLORS.RED)}static drawFilamentaryGas(e,s,t,i,h){for(let n=1;n<=5;n++)this.setPixel(e,s,t,i+n,1,this.COLORS.RED);this.setPixel(e,s,t-1,i+2,1,this.COLORS.RED),this.setPixel(e,s,t-2,i+3,1,this.COLORS.RED),this.setPixel(e,s,t+1,i+4,1,this.COLORS.RED),this.setPixel(e,s,t+2,i+5,1,this.COLORS.RED),this.setPixel(e,s,t+1,i+1,1,this.COLORS.RED),this.setPixel(e,s,t-1,i+5,1,this.COLORS.RED)}static drawDiffuseGas(e,s,t,i,h){this.setPixel(e,s,t-1,i+1,1,this.COLORS.RED),this.setPixel(e,s,t,i+1,1,this.COLORS.RED),this.setPixel(e,s,t+1,i+1,1,this.COLORS.RED);for(let n=2;n<5;n++)this.setPixel(e,s,t-2,i+n,1,this.COLORS.RED),this.setPixel(e,s,t-1,i+n,1,this.COLORS.RED),this.setPixel(e,s,t,i+n,1,this.COLORS.RED),this.setPixel(e,s,t+1,i+n,1,this.COLORS.RED),this.setPixel(e,s,t+2,i+n,1,this.COLORS.RED);this.setPixel(e,s,t-1,i+5,1,this.COLORS.RED),this.setPixel(e,s,t,i+5,1,this.COLORS.RED),this.setPixel(e,s,t+1,i+5,1,this.COLORS.RED)}static drawEnergyForm(e,s,t,i,h,n,a,r,l){const f=this.getNitrogenBases(r,l)[0];switch(this.getEnergyPattern(f)){case"wave":this.drawWaveManifesta(e,s,i,h,n);break;case"spiral":this.drawSpiralField(e,s,i,h,n);break;case"vortex":this.drawVortexManifesta(e,s,i,h,n);break;case"pulse":this.drawPulseManifesta(e,s,i,h,n);break;case"interference":this.drawInterferencePattern(e,s,i,h,n);break;case"quantum":this.drawQuantumState(e,s,i,h,n);break;case"dimensional":this.drawDimensionalRift(e,s,i,h,n);break;case"infinite":this.drawInfiniteField(e,s,i,h,n);break;default:this.drawEnergyZigzag(e,s,i,h,n)}}static drawWaveManifesta(e,s,t,i,h){for(let n=0;n<Math.min(8,h);n++){const a=Math.round(2*Math.sin(n*Math.PI/3));this.setPixel(e,s,t+a,i+n,1,this.COLORS.RED)}}static drawSpiralField(e,s,t,i,h){let n=0;for(let a=0;a<Math.min(7,h);a++){const r=Math.floor(a/2)+1,l=Math.round(r*Math.cos(n));this.setPixel(e,s,t+l,i+a,1,this.COLORS.RED),n+=Math.PI/2.5}}static drawVortexManifesta(e,s,t,i,h){this.setPixel(e,s,t,i+3,1,this.COLORS.RED);for(let n=1;n<=2;n++)for(let a=-n;a<=n;a++)Math.abs(a)===n&&(this.setPixel(e,s,t+a,i+3-n,1,this.COLORS.RED),this.setPixel(e,s,t+a,i+3+n,1,this.COLORS.RED))}static drawPulseManifesta(e,s,t,i,h){for(let n=0;n<Math.min(8,h);n+=2)for(let a=-1;a<=1;a++)this.setPixel(e,s,t+a,i+n,1,this.COLORS.RED)}static drawInterferencePattern(e,s,t,i,h){for(let n=0;n<Math.min(7,h);n++){const a=Math.sin(n*Math.PI/2),r=Math.sin(n*Math.PI/3+Math.PI/4),l=a+r;l>.5&&(this.setPixel(e,s,t-1,i+n,1,this.COLORS.RED),this.setPixel(e,s,t+1,i+n,1,this.COLORS.RED)),Math.abs(l)>1&&this.setPixel(e,s,t,i+n,1,this.COLORS.RED)}}static drawQuantumState(e,s,t,i,h){this.setPixel(e,s,t-2,i+2,1,this.COLORS.RED),this.setPixel(e,s,t,i+2,1,this.COLORS.RED),this.setPixel(e,s,t+2,i+2,1,this.COLORS.RED),this.setPixel(e,s,t,i+4,1,this.COLORS.RED)}static drawDimensionalRift(e,s,t,i,h){for(let n=1;n<6;n++)this.setPixel(e,s,t,i+n,1,this.COLORS.RED);this.setPixel(e,s,t-1,i+2,1,this.COLORS.RED),this.setPixel(e,s,t+1,i+4,1,this.COLORS.RED)}static drawInfiniteField(e,s,t,i,h){this.setPixel(e,s,t,i+1,1,this.COLORS.RED);for(let n=-1;n<=1;n++)this.setPixel(e,s,t+n,i+2,1,this.COLORS.RED),this.setPixel(e,s,t+n,i+3,1,this.COLORS.RED);this.setPixel(e,s,t,i+4,1,this.COLORS.RED)}static drawEnergyZigzag(e,s,t,i,h){this.setPixel(e,s,t-2,i,1,this.COLORS.RED),this.setPixel(e,s,t-1,i+1,1,this.COLORS.RED),this.setPixel(e,s,t,i+2,1,this.COLORS.RED),this.setPixel(e,s,t+1,i+3,1,this.COLORS.RED),this.setPixel(e,s,t+2,i+4,1,this.COLORS.RED)}static drawDivineForm(e,s,t,i,h,n,a){this.setPixel(e,s,i,h,1,this.COLORS.RED),this.setPixel(e,s,i-1,h+1,1,this.COLORS.RED),this.setPixel(e,s,i+1,h+1,1,this.COLORS.RED),this.setPixel(e,s,i-2,h+2,1,this.COLORS.RED),this.setPixel(e,s,i,h+2,1,this.COLORS.RED),this.setPixel(e,s,i+2,h+2,1,this.COLORS.RED),this.setPixel(e,s,i-2,h+3,1,this.COLORS.RED),this.setPixel(e,s,i-1,h+3,1,this.COLORS.RED),this.setPixel(e,s,i+1,h+3,1,this.COLORS.RED),this.setPixel(e,s,i+2,h+3,1,this.COLORS.RED);for(let r=-3;r<=3;r++)this.setPixel(e,s,i+r,h+4,1,this.COLORS.RED);this.setPixel(e,s,i,h+2,1,this.COLORS.WHITE)}static drawAnimalForm(e,s,t,i,h,n){switch(Math.floor(n.random()*5)){case 0:this.drawQuadrupedMammal(e,s,t,i);break;case 1:this.drawBirdForm(e,s,t,i);break;case 2:this.drawFishForm(e,s,t,i);break;case 3:this.drawInsectForm(e,s,t,i);break;case 4:this.drawReptileForm(e,s,t,i);break}}static drawQuadrupedMammal(e,s,t,i){this.setPixel(e,s,t-2,i,1,this.COLORS.RED),this.setPixel(e,s,t-2,i+1,1,this.COLORS.RED),this.setPixel(e,s,t-1,i+1,1,this.COLORS.RED);for(let h=0;h<=2;h++)this.setPixel(e,s,t+h,i+2,1,this.COLORS.RED),this.setPixel(e,s,t+h,i+3,1,this.COLORS.RED);this.setPixel(e,s,t,i+4,1,this.COLORS.RED),this.setPixel(e,s,t+2,i+4,1,this.COLORS.RED),this.setPixel(e,s,t,i+5,1,this.COLORS.RED),this.setPixel(e,s,t+2,i+5,1,this.COLORS.RED),this.setPixel(e,s,t+3,i+2,1,this.COLORS.RED)}static drawBirdForm(e,s,t,i){this.setPixel(e,s,t-1,i,1,this.COLORS.RED),this.setPixel(e,s,t-2,i,1,this.COLORS.RED),this.setPixel(e,s,t,i+1,1,this.COLORS.RED),this.setPixel(e,s,t,i+2,1,this.COLORS.RED),this.setPixel(e,s,t-2,i+1,1,this.COLORS.RED),this.setPixel(e,s,t-1,i+1,1,this.COLORS.RED),this.setPixel(e,s,t+1,i+1,1,this.COLORS.RED),this.setPixel(e,s,t+2,i+1,1,this.COLORS.RED),this.setPixel(e,s,t,i+3,1,this.COLORS.RED),this.setPixel(e,s,t,i+4,1,this.COLORS.RED)}static drawFishForm(e,s,t,i){this.setPixel(e,s,t-2,i+1,1,this.COLORS.RED),this.setPixel(e,s,t-2,i+2,1,this.COLORS.RED);for(let h=-1;h<=2;h++)this.setPixel(e,s,t+h,i+2,1,this.COLORS.RED);this.setPixel(e,s,t-1,i+1,1,this.COLORS.RED),this.setPixel(e,s,t-1,i+3,1,this.COLORS.RED),this.setPixel(e,s,t+1,i+1,1,this.COLORS.RED),this.setPixel(e,s,t+1,i+3,1,this.COLORS.RED),this.setPixel(e,s,t+3,i+1,1,this.COLORS.RED),this.setPixel(e,s,t+3,i+2,1,this.COLORS.RED),this.setPixel(e,s,t+3,i+3,1,this.COLORS.RED)}static drawInsectForm(e,s,t,i){this.setPixel(e,s,t-1,i,1,this.COLORS.RED),this.setPixel(e,s,t,i+1,1,this.COLORS.RED),this.setPixel(e,s,t+1,i+2,1,this.COLORS.RED),this.setPixel(e,s,t+2,i+3,1,this.COLORS.RED),this.setPixel(e,s,t-1,i+1,1,this.COLORS.RED),this.setPixel(e,s,t+1,i+1,1,this.COLORS.RED),this.setPixel(e,s,t-1,i+2,1,this.COLORS.RED),this.setPixel(e,s,t+1,i+2,1,this.COLORS.RED),this.setPixel(e,s,t,i+3,1,this.COLORS.RED),this.setPixel(e,s,t+2,i+4,1,this.COLORS.RED),this.setPixel(e,s,t-2,i,1,this.COLORS.RED),this.setPixel(e,s,t,i,1,this.COLORS.RED)}static drawReptileForm(e,s,t,i){this.setPixel(e,s,t-2,i+1,1,this.COLORS.RED),this.setPixel(e,s,t-1,i,1,this.COLORS.RED),this.setPixel(e,s,t-1,i+1,1,this.COLORS.RED),this.setPixel(e,s,t,i+1,1,this.COLORS.RED),this.setPixel(e,s,t+1,i+2,1,this.COLORS.RED),this.setPixel(e,s,t,i+3,1,this.COLORS.RED),this.setPixel(e,s,t+1,i+4,1,this.COLORS.RED),this.setPixel(e,s,t+2,i+5,1,this.COLORS.RED)}static drawBacteriaForm(e,s,t,i,h,n){switch(Math.floor(n.random()*7)){case 0:this.drawCoccusBacteria(e,s,t,i,h);break;case 1:this.drawBacillusBacteria(e,s,t,i,h);break;case 2:this.drawSpirillusBacteria(e,s,t,i,h);break;case 3:this.drawStreptococcusBacteria(e,s,t,i,h);break;case 4:this.drawStaphylococcusBacteria(e,s,t,i,h);break;case 5:this.drawVibroBacteria(e,s,t,i,h);break;default:this.drawFilamentousBacteria(e,s,t,i,h)}}static drawCoccusBacteria(e,s,t,i,h){this.setPixel(e,s,t-1,i+1,1,this.COLORS.RED),this.setPixel(e,s,t,i,1,this.COLORS.RED),this.setPixel(e,s,t+1,i+1,1,this.COLORS.RED),this.setPixel(e,s,t-1,i+2,1,this.COLORS.RED),this.setPixel(e,s,t,i+2,1,this.COLORS.RED),this.setPixel(e,s,t+1,i+2,1,this.COLORS.RED),this.setPixel(e,s,t,i+3,1,this.COLORS.RED)}static drawBacillusBacteria(e,s,t,i,h){for(let n=0;n<Math.min(5,h);n++)this.setPixel(e,s,t,i+n,1,this.COLORS.RED),(n===1||n===3)&&(this.setPixel(e,s,t-1,i+n,1,this.COLORS.RED),this.setPixel(e,s,t+1,i+n,1,this.COLORS.RED))}static drawSpirillusBacteria(e,s,t,i,h){this.setPixel(e,s,t-1,i,1,this.COLORS.RED),this.setPixel(e,s,t,i+1,1,this.COLORS.RED),this.setPixel(e,s,t+1,i+2,1,this.COLORS.RED),this.setPixel(e,s,t,i+3,1,this.COLORS.RED),this.setPixel(e,s,t-1,i+4,1,this.COLORS.RED)}static drawStreptococcusBacteria(e,s,t,i,h){this.setPixel(e,s,t,i,1,this.COLORS.RED),this.setPixel(e,s,t-1,i+1,1,this.COLORS.RED),this.setPixel(e,s,t+1,i+1,1,this.COLORS.RED),this.setPixel(e,s,t,i+2,1,this.COLORS.RED),this.setPixel(e,s,t-1,i+3,1,this.COLORS.RED),this.setPixel(e,s,t+1,i+3,1,this.COLORS.RED),this.setPixel(e,s,t,i+4,1,this.COLORS.RED)}static drawStaphylococcusBacteria(e,s,t,i,h){this.setPixel(e,s,t,i,1,this.COLORS.RED),this.setPixel(e,s,t-1,i+1,1,this.COLORS.RED),this.setPixel(e,s,t,i+1,1,this.COLORS.RED),this.setPixel(e,s,t+1,i+1,1,this.COLORS.RED),this.setPixel(e,s,t-1,i+2,1,this.COLORS.RED),this.setPixel(e,s,t+1,i+2,1,this.COLORS.RED),this.setPixel(e,s,t,i+3,1,this.COLORS.RED)}static drawVibroBacteria(e,s,t,i,h){this.setPixel(e,s,t-1,i,1,this.COLORS.RED),this.setPixel(e,s,t,i+1,1,this.COLORS.RED),this.setPixel(e,s,t,i+2,1,this.COLORS.RED),this.setPixel(e,s,t+1,i+3,1,this.COLORS.RED),this.setPixel(e,s,t+1,i+4,1,this.COLORS.RED)}static drawFilamentousBacteria(e,s,t,i,h){for(let n=0;n<Math.min(6,h);n++)this.setPixel(e,s,t,i+n,1,this.COLORS.RED),n===2&&this.setPixel(e,s,t-1,i+n,1,this.COLORS.RED),n===4&&this.setPixel(e,s,t+1,i+n,1,this.COLORS.RED)}static drawVegetationForm(e,s,t,i,h,n){switch(Math.floor(n.random()*6)){case 0:this.drawTreeForm(e,s,t,i,h);break;case 1:this.drawBushForm(e,s,t,i,h);break;case 2:this.drawPalmTreeForm(e,s,t,i,h);break;case 3:this.drawFlowerForm(e,s,t,i,h);break;case 4:this.drawConiferForm(e,s,t,i,h);break;default:this.drawFernForm(e,s,t,i,h)}}static drawTreeForm(e,s,t,i,h){this.setPixel(e,s,t-1,i,1,this.COLORS.RED),this.setPixel(e,s,t,i,1,this.COLORS.RED),this.setPixel(e,s,t+1,i,1,this.COLORS.RED),this.setPixel(e,s,t-2,i+1,1,this.COLORS.RED),this.setPixel(e,s,t-1,i+1,1,this.COLORS.RED),this.setPixel(e,s,t,i+1,1,this.COLORS.RED),this.setPixel(e,s,t+1,i+1,1,this.COLORS.RED),this.setPixel(e,s,t+2,i+1,1,this.COLORS.RED);for(let n=2;n<h-1;n++)this.setPixel(e,s,t,i+n,1,this.COLORS.RED);this.setPixel(e,s,t-1,i+h-1,1,this.COLORS.RED),this.setPixel(e,s,t,i+h-1,1,this.COLORS.RED),this.setPixel(e,s,t+1,i+h-1,1,this.COLORS.RED)}static drawBushForm(e,s,t,i,h){const n=Math.floor(h/2);for(let a=0;a<n;a++){const r=Math.max(1,3-Math.abs(a-1));for(let l=-r;l<=r;l++)Math.abs(l)<=r&&this.setPixel(e,s,t+l,i+a,1,this.COLORS.RED)}for(let a=n;a<h-1;a++)this.setPixel(e,s,t,i+a,1,this.COLORS.RED);this.setPixel(e,s,t-1,i+h-1,1,this.COLORS.RED),this.setPixel(e,s,t+1,i+h-1,1,this.COLORS.RED)}static drawPalmTreeForm(e,s,t,i,h){this.setPixel(e,s,t-3,i,1,this.COLORS.RED),this.setPixel(e,s,t-1,i,1,this.COLORS.RED),this.setPixel(e,s,t,i,1,this.COLORS.RED),this.setPixel(e,s,t+1,i,1,this.COLORS.RED),this.setPixel(e,s,t+3,i,1,this.COLORS.RED),this.setPixel(e,s,t-2,i+1,1,this.COLORS.RED),this.setPixel(e,s,t+2,i+1,1,this.COLORS.RED);for(let n=2;n<h-1;n++){const a=n%2===0?0:n%4===2?1:-1;this.setPixel(e,s,t+a,i+n,1,this.COLORS.RED)}this.setPixel(e,s,t-1,i+h-1,1,this.COLORS.RED),this.setPixel(e,s,t,i+h-1,1,this.COLORS.RED),this.setPixel(e,s,t+1,i+h-1,1,this.COLORS.RED)}static drawFlowerForm(e,s,t,i,h){this.setPixel(e,s,t,i-1,1,this.COLORS.RED),this.setPixel(e,s,t-1,i,1,this.COLORS.RED),this.setPixel(e,s,t,i,1,this.COLORS.RED),this.setPixel(e,s,t+1,i,1,this.COLORS.RED),this.setPixel(e,s,t,i+1,1,this.COLORS.RED);for(let n=2;n<h-1;n++)this.setPixel(e,s,t,i+n,1,this.COLORS.RED);this.setPixel(e,s,t,i+h-1,1,this.COLORS.RED)}static drawConiferForm(e,s,t,i,h){const n=Math.floor(h*.8);for(let a=0;a<n;a++){const r=Math.min(2,Math.floor(a/2));for(let l=-r;l<=r;l++)this.setPixel(e,s,t+l,i+a,1,this.COLORS.RED)}for(let a=n;a<h-1;a++)this.setPixel(e,s,t,i+a,1,this.COLORS.RED);this.setPixel(e,s,t,i+h-1,1,this.COLORS.RED)}static drawFernForm(e,s,t,i,h){this.setPixel(e,s,t-2,i,1,this.COLORS.RED),this.setPixel(e,s,t-1,i+1,1,this.COLORS.RED),this.setPixel(e,s,t,i,1,this.COLORS.RED),this.setPixel(e,s,t+1,i+1,1,this.COLORS.RED),this.setPixel(e,s,t+2,i,1,this.COLORS.RED),this.setPixel(e,s,t-1,i+2,1,this.COLORS.RED),this.setPixel(e,s,t+1,i+2,1,this.COLORS.RED);for(let n=3;n<h-1;n++)this.setPixel(e,s,t,i+n,1,this.COLORS.RED);this.setPixel(e,s,t-1,i+h-1,1,this.COLORS.RED),this.setPixel(e,s,t+1,i+h-1,1,this.COLORS.RED)}static drawVegetableAnimalForm(e,s,t,i,h,n){switch(Math.floor(n.random()*6)){case 0:this.drawTreentHybrid(e,s,t,i,h);break;case 1:this.drawCoralAnimalHybrid(e,s,t,i,h);break;case 2:this.drawWalkingPlantHybrid(e,s,t,i,h);break;case 3:this.drawPhotosynthethicAnimalHybrid(e,s,t,i,h);break;case 4:this.drawMyceliaNeuralHybrid(e,s,t,i,h);break;default:this.drawFlowerBeastHybrid(e,s,t,i,h)}}static drawTreentHybrid(e,s,t,i,h){this.setPixel(e,s,t-1,i,1,this.COLORS.RED),this.setPixel(e,s,t+1,i,1,this.COLORS.RED),this.setPixel(e,s,t,i+1,1,this.COLORS.RED),this.setPixel(e,s,t-2,i+2,1,this.COLORS.RED),this.setPixel(e,s,t,i+2,1,this.COLORS.RED),this.setPixel(e,s,t+2,i+2,1,this.COLORS.RED),this.setPixel(e,s,t,i+3,1,this.COLORS.RED),this.setPixel(e,s,t,i+4,1,this.COLORS.RED),this.setPixel(e,s,t-1,i+5,1,this.COLORS.RED),this.setPixel(e,s,t+1,i+5,1,this.COLORS.RED)}static drawCoralAnimalHybrid(e,s,t,i,h){this.setPixel(e,s,t,i,1,this.COLORS.RED),this.setPixel(e,s,t-1,i+1,1,this.COLORS.RED),this.setPixel(e,s,t,i+1,1,this.COLORS.RED),this.setPixel(e,s,t+1,i+1,1,this.COLORS.RED),this.setPixel(e,s,t-2,i+2,1,this.COLORS.RED),this.setPixel(e,s,t,i+2,1,this.COLORS.RED),this.setPixel(e,s,t+2,i+2,1,this.COLORS.RED),this.setPixel(e,s,t-1,i+3,1,this.COLORS.RED),this.setPixel(e,s,t+1,i+3,1,this.COLORS.RED)}static drawWalkingPlantHybrid(e,s,t,i,h){this.setPixel(e,s,t-1,i,1,this.COLORS.RED),this.setPixel(e,s,t,i,1,this.COLORS.RED),this.setPixel(e,s,t+1,i,1,this.COLORS.RED),this.setPixel(e,s,t,i+1,1,this.COLORS.RED),this.setPixel(e,s,t-2,i+2,1,this.COLORS.RED),this.setPixel(e,s,t,i+2,1,this.COLORS.RED),this.setPixel(e,s,t+2,i+2,1,this.COLORS.RED),this.setPixel(e,s,t,i+3,1,this.COLORS.RED),this.setPixel(e,s,t-1,i+4,1,this.COLORS.RED),this.setPixel(e,s,t+1,i+4,1,this.COLORS.RED),this.setPixel(e,s,t-1,i+5,1,this.COLORS.RED),this.setPixel(e,s,t+1,i+5,1,this.COLORS.RED)}static drawPhotosynthethicAnimalHybrid(e,s,t,i,h){this.setPixel(e,s,t,i,1,this.COLORS.RED),this.setPixel(e,s,t-2,i+1,1,this.COLORS.RED),this.setPixel(e,s,t-1,i+1,1,this.COLORS.RED),this.setPixel(e,s,t,i+1,1,this.COLORS.RED),this.setPixel(e,s,t+1,i+1,1,this.COLORS.RED),this.setPixel(e,s,t+2,i+1,1,this.COLORS.RED),this.setPixel(e,s,t,i+2,1,this.COLORS.RED),this.setPixel(e,s,t,i+3,1,this.COLORS.RED),this.setPixel(e,s,t-1,i+4,1,this.COLORS.RED),this.setPixel(e,s,t+1,i+4,1,this.COLORS.RED)}static drawMyceliaNeuralHybrid(e,s,t,i,h){this.setPixel(e,s,t,i,1,this.COLORS.RED),this.setPixel(e,s,t,i+1,1,this.COLORS.RED),this.setPixel(e,s,t-2,i+2,1,this.COLORS.RED),this.setPixel(e,s,t-1,i+2,1,this.COLORS.RED),this.setPixel(e,s,t,i+2,1,this.COLORS.RED),this.setPixel(e,s,t+1,i+2,1,this.COLORS.RED),this.setPixel(e,s,t+2,i+2,1,this.COLORS.RED),this.setPixel(e,s,t-1,i+3,1,this.COLORS.RED),this.setPixel(e,s,t+1,i+3,1,this.COLORS.RED),this.setPixel(e,s,t,i+4,1,this.COLORS.RED)}static drawFlowerBeastHybrid(e,s,t,i,h){this.setPixel(e,s,t,i-1,1,this.COLORS.RED),this.setPixel(e,s,t-1,i,1,this.COLORS.RED),this.setPixel(e,s,t+1,i,1,this.COLORS.RED),this.setPixel(e,s,t,i+1,1,this.COLORS.RED),this.setPixel(e,s,t,i,1,this.COLORS.RED),this.setPixel(e,s,t,i+2,1,this.COLORS.RED),this.setPixel(e,s,t,i+3,1,this.COLORS.RED),this.setPixel(e,s,t-1,i+4,1,this.COLORS.RED),this.setPixel(e,s,t,i+4,1,this.COLORS.RED),this.setPixel(e,s,t+1,i+4,1,this.COLORS.RED)}static addRandomFeatures(e,s,t,i,h,n){for(let a=0;a<3;a++){const r=i+Math.floor(n.random()*h),l=t+Math.floor(n.random()*6)-3;n.random()<.5&&this.setPixel(e,s,l,r,1,this.COLORS.RED)}}static async drawSolarSystem(e,s,t,i){try{const n=await(await fetch("/api/arecibo")).json();if(!n.success||!n.system_data){console.warn("No system data available from /api/arecibo"),this.drawBasicSolarSystem(e,s,i);return}const a=n.system_data,r=a.total_planets,l=a.current_planet_index,O=a.planets||[];this.drawAreciboStyleSolarSystem(e,s,r,l,i,O)}catch(h){console.warn("Error fetching data from /api/arecibo:",h),this.drawBasicSolarSystem(e,s,i)}}static drawAreciboStyleSolarSystem(e,s,t,i,h,n=[]){const r=h+1;for(let O=0;O<3;O++)for(let f=0;f<3;f++)this.setPixel(e,s,1+f,r+O,1,this.COLORS.YELLOW);let l=5;for(let O=0;O<t;O++){const f=this.getRealPlanetSize(O,i,n),x=r;for(let u=0;u<f;u++)this.setPixel(e,s,l,x+u,1,this.COLORS.YELLOW);if(l+=2,l>=this.WIDTH-1)break}}static getRealPlanetSize(e,s,t){if(e===s)return 3;const i=t.find(h=>h.index===e);if(i&&i.size_category)switch(i.size_category){case"small":return 1;case"medium":return 2;case"large":return 3;default:return 1}return e===0?1:e===1?2:e%2+1}static drawTransmissionMethod(e,s,t,i,h,n){const a=Math.floor(this.WIDTH/2),r=this.createPlanetRNG(i);switch(t){case"Intelligent Life":this.drawIntelligentLifeAntenna(e,s,a,h,n-2,r);break;case"Silicon-Based Life":this.drawSiliconBasedAntenna(e,s,a,h,n-2,r);break;case"Conscious Gas":this.drawTelepathicWaves(e,s,a,h,n-2,r);break;case"Non-Physical Entity":this.drawNonPhysicalTransmission(e,s,a,h,n-2,r);break;case"Robotic Entities":this.drawRoboticAntenna(e,s,a,h,n-2,r);break;case"Have I just found God?":this.drawDoubleSlitExperiment(e,s,a,h,n-2);break}t!=="Animal Life"&&t!=="Vegetation"&&t!=="Bacteria"&&t!=="Vegetable Animals"&&this.drawAntennaSize(e,s,t,i,h+n-2,r)}static drawAntennaSize(e,s,t,i,h,n){let a;switch(t){case"Intelligent Life":a=Math.floor(50+n.random()*450);break;case"Silicon-Based Life":a=Math.floor(100+n.random()*900);break;case"Conscious Gas":a=Math.floor(10+n.random()*190);break;case"Non-Physical Entity":a=Math.floor(1+n.random()*1999);break;case"Robotic Entities":a=Math.floor(200+n.random()*600);break;case"Have I just found God?":a=137;break;default:a=305;break}a>1023&&(a=1023);const r=a.toString(2).padStart(10,"0");for(let l=0;l<5;l++)if(r[l]==="1"){const O=7+l*2;this.setPixel(e,s,O,h,1,this.COLORS.WHITE)}for(let l=0;l<4;l++)this.setPixel(e,s,l,h+1,1,this.COLORS.WHITE);for(let l=5;l<10;l++)if(r[l]==="1"){const O=6+(l-5)*2;this.setPixel(e,s,O,h+1,1,this.COLORS.WHITE)}for(let l=0;l<4;l++)this.setPixel(e,s,19+l,h+1,1,this.COLORS.WHITE)}static createPlanetRNG(e){let s=0;for(let t=0;t<e.length;t++)s+=e.charCodeAt(t);return{random:()=>(s=(s*9301+49297)%233280,s/233280)}}static drawIntelligentLifeAntenna(e,s,t,i,h,n){switch(Math.floor(n.random()*3)){case 0:this.drawParabolicAntenna(e,s,t,i+2);break;case 1:this.drawRadioTower(e,s,t,i+1);break;case 2:this.drawAntennaArray(e,s,t,i+2);break}}static drawParabolicAntenna(e,s,t,i){this.setPixel(e,s,t,i+3,1,this.COLORS.LILAC),this.setPixel(e,s,t,i+2,1,this.COLORS.LILAC),this.setPixel(e,s,t-1,i,1,this.COLORS.LILAC),this.setPixel(e,s,t,i,1,this.COLORS.LILAC),this.setPixel(e,s,t+1,i,1,this.COLORS.LILAC),this.setPixel(e,s,t-1,i+1,1,this.COLORS.LILAC),this.setPixel(e,s,t+1,i+1,1,this.COLORS.LILAC)}static drawRadioTower(e,s,t,i){for(let h=0;h<6;h++)this.setPixel(e,s,t,i+h,1,this.COLORS.LILAC);this.setPixel(e,s,t-1,i+1,1,this.COLORS.LILAC),this.setPixel(e,s,t+1,i+1,1,this.COLORS.LILAC),this.setPixel(e,s,t-1,i+3,1,this.COLORS.LILAC),this.setPixel(e,s,t+1,i+3,1,this.COLORS.LILAC)}static drawAntennaArray(e,s,t,i){for(let h=-1;h<=1;h++){const n=t+h*2;this.setPixel(e,s,n,i+2,1,this.COLORS.LILAC),this.setPixel(e,s,n,i+1,1,this.COLORS.LILAC),this.setPixel(e,s,n,i,1,this.COLORS.LILAC)}}static drawSiliconBasedAntenna(e,s,t,i,h,n){switch(Math.floor(n.random()*3)){case 0:this.drawCrystallineAntenna(e,s,t,i+1);break;case 1:this.drawSiliconPyramid(e,s,t,i+1);break;case 2:this.drawHexagonalArray(e,s,t,i+2);break}}static drawCrystallineAntenna(e,s,t,i){this.setPixel(e,s,t,i+2,1,this.COLORS.LILAC),this.setPixel(e,s,t-1,i+1,1,this.COLORS.LILAC),this.setPixel(e,s,t+1,i+1,1,this.COLORS.LILAC),this.setPixel(e,s,t,i,1,this.COLORS.LILAC),this.setPixel(e,s,t-2,i+3,1,this.COLORS.LILAC),this.setPixel(e,s,t,i+3,1,this.COLORS.LILAC),this.setPixel(e,s,t+2,i+3,1,this.COLORS.LILAC)}static drawSiliconPyramid(e,s,t,i){this.setPixel(e,s,t,i,1,this.COLORS.LILAC),this.setPixel(e,s,t-1,i+1,1,this.COLORS.LILAC),this.setPixel(e,s,t,i+1,1,this.COLORS.LILAC),this.setPixel(e,s,t+1,i+1,1,this.COLORS.LILAC),this.setPixel(e,s,t-2,i+2,1,this.COLORS.LILAC),this.setPixel(e,s,t-1,i+2,1,this.COLORS.LILAC),this.setPixel(e,s,t,i+2,1,this.COLORS.LILAC),this.setPixel(e,s,t+1,i+2,1,this.COLORS.LILAC),this.setPixel(e,s,t+2,i+2,1,this.COLORS.LILAC)}static drawHexagonalArray(e,s,t,i){this.setPixel(e,s,t,i+1,1,this.COLORS.LILAC),this.setPixel(e,s,t-1,i,1,this.COLORS.LILAC),this.setPixel(e,s,t+1,i,1,this.COLORS.LILAC),this.setPixel(e,s,t-1,i+2,1,this.COLORS.LILAC),this.setPixel(e,s,t+1,i+2,1,this.COLORS.LILAC),this.setPixel(e,s,t-2,i+1,1,this.COLORS.LILAC),this.setPixel(e,s,t+2,i+1,1,this.COLORS.LILAC)}static drawNonPhysicalTransmission(e,s,t,i,h,n){switch(Math.floor(n.random()*3)){case 0:this.drawDimensionalVortex(e,s,t,i+2);break;case 1:this.drawEnergyField(e,s,t,i+1,n);break;case 2:this.drawInterdimensionalPortal(e,s,t,i+2);break}}static drawDimensionalVortex(e,s,t,i){this.setPixel(e,s,t,i,1,this.COLORS.LILAC),this.setPixel(e,s,t,i-1,1,this.COLORS.LILAC),this.setPixel(e,s,t+1,i,1,this.COLORS.LILAC),this.setPixel(e,s,t,i+1,1,this.COLORS.LILAC),this.setPixel(e,s,t-1,i,1,this.COLORS.LILAC),this.setPixel(e,s,t-1,i-1,1,this.COLORS.LILAC),this.setPixel(e,s,t+1,i-1,1,this.COLORS.LILAC),this.setPixel(e,s,t+1,i+1,1,this.COLORS.LILAC),this.setPixel(e,s,t-1,i+1,1,this.COLORS.LILAC),this.setPixel(e,s,t-2,i-1,1,this.COLORS.LILAC),this.setPixel(e,s,t+2,i+1,1,this.COLORS.LILAC)}static drawEnergyField(e,s,t,i,h){this.setPixel(e,s,t,i+2,1,this.COLORS.LILAC);for(let n=0;n<8;n++)if(h.random()>.4){const a=Math.floor(h.random()*5)-2,r=Math.floor(h.random()*5)-2;(a!==0||r!==0)&&this.setPixel(e,s,t+a,i+2+r,1,this.COLORS.LILAC)}this.setPixel(e,s,t-1,i+1,1,this.COLORS.LILAC),this.setPixel(e,s,t+1,i+3,1,this.COLORS.LILAC)}static drawInterdimensionalPortal(e,s,t,i){this.setPixel(e,s,t-2,i-1,1,this.COLORS.LILAC),this.setPixel(e,s,t-1,i-1,1,this.COLORS.LILAC),this.setPixel(e,s,t,i-1,1,this.COLORS.LILAC),this.setPixel(e,s,t+1,i-1,1,this.COLORS.LILAC),this.setPixel(e,s,t+2,i-1,1,this.COLORS.LILAC),this.setPixel(e,s,t-2,i,1,this.COLORS.LILAC),this.setPixel(e,s,t+2,i,1,this.COLORS.LILAC),this.setPixel(e,s,t-2,i+1,1,this.COLORS.LILAC),this.setPixel(e,s,t+2,i+1,1,this.COLORS.LILAC),this.setPixel(e,s,t-2,i+2,1,this.COLORS.LILAC),this.setPixel(e,s,t-1,i+2,1,this.COLORS.LILAC),this.setPixel(e,s,t,i+2,1,this.COLORS.LILAC),this.setPixel(e,s,t+1,i+2,1,this.COLORS.LILAC),this.setPixel(e,s,t+2,i+2,1,this.COLORS.LILAC),this.setPixel(e,s,t,i,1,this.COLORS.LILAC)}static drawTelepathicWaves(e,s,t,i,h,n){this.setPixel(e,s,t,i+3,1,this.COLORS.LILAC);const a=3+Math.floor(n.random()*3);for(let r=0;r<a;r++){const l=r+1;if(n.random()>.3){if(l===1)this.setPixel(e,s,t,i+2,1,this.COLORS.LILAC),this.setPixel(e,s,t,i+4,1,this.COLORS.LILAC),this.setPixel(e,s,t-1,i+3,1,this.COLORS.LILAC),this.setPixel(e,s,t+1,i+3,1,this.COLORS.LILAC);else if(l===2)this.setPixel(e,s,t-1,i+1,1,this.COLORS.LILAC),this.setPixel(e,s,t+1,i+1,1,this.COLORS.LILAC),this.setPixel(e,s,t-1,i+5,1,this.COLORS.LILAC),this.setPixel(e,s,t+1,i+5,1,this.COLORS.LILAC),this.setPixel(e,s,t-2,i+3,1,this.COLORS.LILAC),this.setPixel(e,s,t+2,i+3,1,this.COLORS.LILAC);else if(l>=3){const f=r*1.5+n.random()*.5,x=Math.round(Math.cos(f)*l),u=Math.round(Math.sin(f)*l);this.setPixel(e,s,t+x,i+3+u,1,this.COLORS.LILAC)}}}}static drawRoboticAntenna(e,s,t,i,h,n){switch(Math.floor(n.random()*3)){case 0:this.drawSymmetricSpikes(e,s,t,i+2);break;case 1:this.drawSensorGrid(e,s,t,i+1);break;case 2:this.drawMultiArmAntenna(e,s,t,i+1);break}}static drawSymmetricSpikes(e,s,t,i){this.setPixel(e,s,t,i,1,this.COLORS.LILAC),this.setPixel(e,s,t,i-1,1,this.COLORS.LILAC),this.setPixel(e,s,t,i+1,1,this.COLORS.LILAC),this.setPixel(e,s,t-1,i,1,this.COLORS.LILAC),this.setPixel(e,s,t+1,i,1,this.COLORS.LILAC),this.setPixel(e,s,t-1,i-1,1,this.COLORS.LILAC),this.setPixel(e,s,t+1,i-1,1,this.COLORS.LILAC),this.setPixel(e,s,t-1,i+1,1,this.COLORS.LILAC),this.setPixel(e,s,t+1,i+1,1,this.COLORS.LILAC)}static drawSensorGrid(e,s,t,i){for(let h=0;h<3;h++)for(let n=0;n<3;n++)this.setPixel(e,s,t-1+n,i+h,1,this.COLORS.LILAC);this.setPixel(e,s,t,i-1,1,this.COLORS.LILAC),this.setPixel(e,s,t,i+3,1,this.COLORS.LILAC),this.setPixel(e,s,t-2,i+1,1,this.COLORS.LILAC),this.setPixel(e,s,t+2,i+1,1,this.COLORS.LILAC)}static drawMultiArmAntenna(e,s,t,i){this.setPixel(e,s,t,i+2,1,this.COLORS.LILAC),this.setPixel(e,s,t,i+1,1,this.COLORS.LILAC),this.setPixel(e,s,t,i,1,this.COLORS.LILAC),this.setPixel(e,s,t-2,i+1,1,this.COLORS.LILAC),this.setPixel(e,s,t-1,i+1,1,this.COLORS.LILAC),this.setPixel(e,s,t+1,i+1,1,this.COLORS.LILAC),this.setPixel(e,s,t+2,i+1,1,this.COLORS.LILAC),this.setPixel(e,s,t-2,i,1,this.COLORS.LILAC),this.setPixel(e,s,t+2,i,1,this.COLORS.LILAC)}static drawDoubleSlitExperiment(e,s,t,i,h){this.setPixel(e,s,t-4,i+2,1,this.COLORS.LILAC),this.setPixel(e,s,t,i,1,this.COLORS.LILAC),this.setPixel(e,s,t,i+1,1,this.COLORS.LILAC),this.setPixel(e,s,t,i+3,1,this.COLORS.LILAC),this.setPixel(e,s,t,i+5,1,this.COLORS.LILAC),this.setPixel(e,s,t,i+6,1,this.COLORS.LILAC);const n=t+3;this.setPixel(e,s,n,i+3,1,this.COLORS.LILAC),this.setPixel(e,s,n,i+1,1,this.COLORS.LILAC),this.setPixel(e,s,n,i+5,1,this.COLORS.LILAC),this.setPixel(e,s,t-2,i+2,1,this.COLORS.LILAC),this.setPixel(e,s,t+1,i+2,1,this.COLORS.LILAC),this.setPixel(e,s,t+1,i+4,1,this.COLORS.LILAC)}static drawBasicSolarSystem(e,s,t){const i=Math.floor(this.WIDTH/2);this.setPixel(e,s,i,t+2,1,this.COLORS.YELLOW),this.setPixel(e,s,i-1,t+2,1,this.COLORS.YELLOW),this.setPixel(e,s,i+1,t+2,1,this.COLORS.YELLOW),[{col:i-3,row:t+4},{col:i-1,row:t+6},{col:i+2,row:t+5},{col:i+4,row:t+7}].forEach((n,a)=>{a===2?(this.setPixel(e,s,n.col,n.row,1,this.COLORS.YELLOW),this.setPixel(e,s,n.col,n.row-1,1,this.COLORS.YELLOW),this.setPixel(e,s,n.col,n.row+1,1,this.COLORS.YELLOW)):this.setPixel(e,s,n.col,n.row,1,this.COLORS.YELLOW)})}}const ye=({lifeForm:L,planetName:e,className:s="",scale:t=32,showControls:i=!0,showInfo:h=!0})=>{const[n,a]=y.useState(null),[r,l]=y.useState(!0),O=y.useRef(null),[f,x]=y.useState(!0),u=y.useRef(void 0),S=y.useRef(0),P=y.useRef([]),c=y.useRef(new Set),o=y.useRef(new Set),E=y.useRef(0);y.useEffect(()=>{(async()=>{l(!0);try{const g={lifeForm:L,planetName:e,width:23,height:73},R=await Re.generate(g);a(R)}catch(g){console.error("Error generating Arecibo message:",g)}finally{l(!1)}})()},[L,e]),y.useEffect(()=>{if(!O.current||!n)return;const D=O.current,g=D.getContext("2d");if(!g)return;D.width=n.width*t,D.height=n.height*t;const R=()=>{const I=[];for(let N=0;N<n.height;N++){I[N]=[];for(let v=0;v<n.width;v++)I[N][v]=Math.random()}P.current=I,c.current=new Set,o.current=new Set,E.current=0},C=()=>{if(!g)return;g.clearRect(0,0,D.width,D.height),g.fillStyle="#000",g.fillRect(0,0,D.width,D.height);const I=S.current,N=["#000000","#FFFFFF","#9966CC","#00FF00","#0066FF","#FF6600","#FF0000","#FFFF00","#B19CD9"];E.current=Math.min(1,I*1.5),E.current;for(let B=0;B<n.height;B++)for(let T=0;T<n.width;T++){const V=B*n.width+T;Math.random()<.15&&(P.current[B][T]=Math.random());const j=P.current[B][T];if(I<.467){const _=Math.floor(j*255);g.fillStyle=`rgb(${_}, ${_}, ${_})`,g.fillRect(T*t,B*t,t-1,t-1)}else{const _=(I-.467)/.533,U=V;if(n.bitmap[V]===1)if(!c.current.has(U)&&Math.random()<.06&&c.current.add(U),c.current.has(U)){const H=n.colorMap[V]||1;g.fillStyle=N[H]||"#FFFFFF",g.fillRect(T*t,B*t,t-1,t-1)}else{const H=Math.floor(j*255);g.fillStyle=`rgb(${H}, ${H}, ${H})`,g.fillRect(T*t,B*t,t-1,t-1)}else if(_>.3&&!o.current.has(U)&&Math.random()<.04&&o.current.add(U),!o.current.has(U)){const H=Math.floor(j*255);g.fillStyle=`rgb(${H}, ${H}, ${H})`,g.fillRect(T*t,B*t,t-1,t-1)}}}const v=n.bitmap.filter(B=>B===1).length,b=n.bitmap.filter(B=>B===0).length,A=c.current.size,k=o.current.size;!(I>=.467&&A>=v&&k>=b)&&S.current<3?(S.current+=1/90,u.current=requestAnimationFrame(C)):x(!1)};if(f)S.current=0,R(),requestAnimationFrame(()=>C());else{g.clearRect(0,0,D.width,D.height),g.fillStyle="#000",g.fillRect(0,0,D.width,D.height);const I=["#000000","#FFFFFF","#9966CC","#00FF00","#0066FF","#FF6600","#FF0000","#FFFF00","#B19CD9"];for(let N=0;N<n.height;N++)for(let v=0;v<n.width;v++){const b=N*n.width+v;if(n.bitmap[b]===1){const A=n.colorMap[b]||1;g.fillStyle=I[A]||"#FFFFFF",g.fillRect(v*t,N*t,t-1,t-1)}}}return()=>{u.current&&cancelAnimationFrame(u.current)}},[n,t,f]);const m=()=>{x(!0),S.current=0};return r?d.jsx("div",{className:`arecibo-message-container ${s}`,children:d.jsx("div",{className:"relative border border-green-500/30 rounded bg-black flex items-center justify-center",style:{minHeight:"300px"},children:d.jsxs("div",{className:"text-green-400 text-sm",children:[d.jsx("div",{className:"animate-pulse",children:"Generating Arecibo Message..."}),d.jsx("div",{className:"text-xs text-gray-400 mt-2 text-center",children:"Fetching solar system data..."})]})})}):n?d.jsxs("div",{className:`arecibo-message-container ${s}`,children:[d.jsxs("div",{className:"relative",children:[d.jsx("canvas",{ref:O,className:"border border-green-500/30 rounded bg-black",style:{imageRendering:"pixelated",width:"auto",height:"auto"}}),i&&!f&&d.jsx("button",{onClick:m,className:"absolute top-2 right-2 px-2 py-1 text-xs bg-green-500/20 hover:bg-green-500/30 border border-green-500/50 text-green-400 rounded transition-colors",children:"Replay"})]}),h&&d.jsxs("div",{className:"mt-2 text-xs text-gray-400",children:[d.jsxs("div",{className:"flex justify-between items-center",children:[d.jsxs("span",{children:["Life Form: ",d.jsx("span",{className:"text-green-400",children:n.lifeForm})]}),d.jsxs("span",{children:["Planet: ",d.jsx("span",{className:"text-green-400",children:n.planetName})]})]}),d.jsx("div",{className:"mt-1 text-[10px] text-center",children:d.jsx("span",{children:"73×23 Procedural Arecibo Message"})})]})]}):d.jsx("div",{className:`arecibo-message-container ${s}`,children:d.jsx("div",{className:"relative border border-red-500/30 rounded bg-black flex items-center justify-center",style:{minHeight:"300px"},children:d.jsx("div",{className:"text-red-400 text-sm",children:"Error generating Arecibo message"})})})},Ce=({isOpen:L,onClose:e,lifeForm:s,planetName:t})=>{const[i,h]=y.useState(!1),[n,a]=y.useState(!1),r=()=>{a(!1),setTimeout(()=>{h(!1),e()},300)};return y.useEffect(()=>{L&&(h(!0),requestAnimationFrame(()=>{requestAnimationFrame(()=>{a(!0)})}))},[L]),y.useEffect(()=>{const l=O=>{O.key==="Escape"&&r()};return L&&(document.addEventListener("keydown",l),document.body.style.overflow="hidden"),()=>{document.removeEventListener("keydown",l),document.body.style.overflow="unset"}},[L]),i?K.createPortal(d.jsx("div",{className:"fixed inset-0 bg-black/80 backdrop-blur-sm z-50 flex items-center justify-center p-4",style:{opacity:n?1:0,transition:"opacity 300ms ease-in-out"},onClick:r,children:d.jsxs("div",{className:"bg-gray-900/95 border border-green-500/50 rounded-lg shadow-2xl w-full max-w-md max-h-[90vh] overflow-y-auto relative",style:{opacity:n?1:0,transform:n?"scale(1)":"scale(0.95)",transition:"opacity 300ms ease-in-out, transform 300ms ease-in-out"},onClick:l=>l.stopPropagation(),children:[d.jsxs("div",{className:"flex items-center justify-between p-4 border-b border-green-500/30",children:[d.jsx("div",{className:"flex-1",children:d.jsxs("h2",{className:"text-lg font-bold text-green-400 flex items-center gap-2",children:[d.jsxs("svg",{xmlns:"http://www.w3.org/2000/svg",width:20,height:20,viewBox:"0 0 24 24",className:"animate-spin",children:[d.jsx("path",{fill:"currentColor",d:"M12.735 14.654a.75.75 0 0 1-.23-1.44c.224-.094.441-.237.645-.44a.75.75 0 0 1 .996-.058a.75.75 0 0 1 .705.954c-.21.746-.6 1.477-1.105 2.147a.75.75 0 0 1-1.197-.903q.098-.13.186-.26m-2.248.041a.75.75 0 0 0 .953-.707a.75.75 0 0 0-.058-.994a2 2 0 0 1-.442-.646a.75.75 0 0 0-1.438.23a7 7 0 0 1-.26-.186a.75.75 0 0 0-.903 1.198c.67.505 1.4.894 2.148 1.105m-3.811-2.749a.75.75 0 0 0 1.18-.925a8 8 0 0 1-1.01-1.677a.75.75 0 1 0-1.372.604c.317.72.728 1.394 1.202 1.998M4.84 7.672a.75.75 0 0 0 1.49-.178a5.1 5.1 0 0 1 .108-1.862a.75.75 0 0 0-1.454-.366a6.6 6.6 0 0 0-.144 2.406M6.008 3.08a.75.75 0 1 0 1.218.875q.265-.37.62-.727a.75.75 0 0 0-1.06-1.061a7.4 7.4 0 0 0-.778.912m5.755 6.007a7 7 0 0 0-.187.26a.75.75 0 0 1 .23 1.439a2 2 0 0 0-.645.441a.75.75 0 0 1-.995.058a.752.752 0 0 1-.706-.954c.211-.746.6-1.477 1.105-2.147a.75.75 0 0 1 1.198.903m2.062.219a.75.75 0 0 0-.954.707a.75.75 0 0 0 .059.994c.204.204.347.421.441.645a.75.75 0 0 0 1.439-.23q.13.09.26.187a.75.75 0 0 0 .902-1.198c-.67-.505-1.4-.894-2.147-1.105m3.81 2.749a.75.75 0 1 0-1.18.925c.4.511.746 1.079 1.01 1.677a.75.75 0 0 0 1.372-.604a9.4 9.4 0 0 0-1.202-1.998m1.837 4.274a.75.75 0 1 0-1.49.178a5.1 5.1 0 0 1-.109 1.862a.75.75 0 0 0 1.455.366a6.6 6.6 0 0 0 .143-2.406m-1.167 4.592a.75.75 0 0 0-1.218-.875a6 6 0 0 1-.621.727a.75.75 0 0 0 1.06 1.06q.44-.439.779-.911M12.082 7.573a.75.75 0 0 1 .127-1.053a9.4 9.4 0 0 1 1.998-1.202a.75.75 0 0 1 .604 1.373a8 8 0 0 0-1.677 1.01a.75.75 0 0 1-1.053-.128m3.747-2.056a.75.75 0 0 1 .656-.833a6.6 6.6 0 0 1 2.405.143a.75.75 0 1 1-.366 1.455a5.1 5.1 0 0 0-1.862-.109a.75.75 0 0 1-.834-.656m4.203.506a.75.75 0 0 1 1.046-.171q.472.339.912.778a.75.75 0 1 1-1.06 1.06a6 6 0 0 0-.728-.62a.75.75 0 0 1-.17-1.047M12.103 17.48a.75.75 0 0 0-.926-1.18A8 8 0 0 1 9.5 17.31a.75.75 0 1 0 .604 1.372a9.4 9.4 0 0 0 1.999-1.202m-4.275 1.836a.75.75 0 1 0-.178-1.49a5.1 5.1 0 0 1-1.862-.108a.75.75 0 1 0-.366 1.454a6.6 6.6 0 0 0 2.406.144m-4.592-1.168a.75.75 0 1 0 .875-1.218a6 6 0 0 1-.727-.62a.75.75 0 0 0-1.06 1.06q.439.44.912.778",opacity:.5}),d.jsx("path",{fill:"currentColor",d:"M8.928 12.453c.406.836 1.016 1.541 1.825 1.942c-.793.183-1.71.22-2.648.087C5.315 14.087 2.75 12.284 2.75 9a.75.75 0 0 0-1.5 0c0 4.316 3.436 6.513 6.645 6.968c1.612.228 3.27.042 4.558-.584c.868-.422 1.596-1.065 1.988-1.921c.142.741.162 1.578.041 2.432c-.395 2.79-2.198 5.355-5.482 5.355a.75.75 0 0 0 0 1.5c4.316 0 6.513-3.436 6.968-6.645c.228-1.612.042-3.27-.584-4.558c-.346-.712-.84-1.33-1.48-1.745a7.7 7.7 0 0 1 1.99.027c2.792.396 5.356 2.198 5.356 5.483a.75.75 0 0 0 1.5 0c0-4.316-3.436-6.513-6.645-6.968c-1.612-.228-3.27-.043-4.558.584c-.692.336-1.294.812-1.709 1.425a7.6 7.6 0 0 1-.009-2.248c.396-2.79 2.198-5.355 5.483-5.355a.75.75 0 0 0 0-1.5c-4.316 0-6.513 3.436-6.968 6.645c-.228 1.612-.043 3.27.584 4.558"})]}),"Atlas Life Form Analysis"]})}),d.jsx("button",{onClick:r,className:"text-gray-400 hover:text-white transition-colors p-1 rounded hover:bg-gray-700/50 flex-shrink-0",children:d.jsx("svg",{className:"w-5 h-5",fill:"none",stroke:"currentColor",viewBox:"0 0 24 24",children:d.jsx("path",{strokeLinecap:"round",strokeLinejoin:"round",strokeWidth:2,d:"M6 18L18 6M6 6l12 12"})})})]}),d.jsxs("div",{className:"p-6",children:[d.jsx("div",{className:"flex justify-center mb-6",children:d.jsx(ye,{lifeForm:s,planetName:t,scale:6,className:"",showControls:!1,showInfo:!1})}),d.jsx("div",{className:"text-center",children:d.jsxs("p",{className:"text-xs text-gray-400",children:["Trying to understand the Life Form analyzed? ",d.jsx("a",{href:"https://en.wikipedia.org/wiki/Arecibo_message",target:"_blank",rel:"noopener noreferrer",className:"text-green-400 hover:text-green-300 underline transition-colors",children:"Click here"})]})})]}),d.jsx("div",{className:"flex justify-end p-4 border-t border-green-500/30",children:d.jsx("button",{onClick:r,className:"px-4 py-2 bg-green-500/20 hover:bg-green-500/30 border border-green-500/50 text-green-400 rounded transition-colors",children:"Close"})})]})}),document.body):null},De=({planet:L,system:e,galaxy:s,cosmicOriginTime:t,initialAngleRotation:i,effects:h,onToggleEffect:n})=>{const[a,r]=y.useState(!1),[l,O]=y.useState(!1),[f,x]=y.useState({isOnCooldown:!1,isSaved:!1,isCollecting:!1,timeUntilNext:0});y.useEffect(()=>{let E;const m=()=>{const C=$.generateLocationId("planet",s.coordinates.join(","),e.index,L.name),I=$.canCollectFromLocation(C),N=$.getTimeUntilNextCollection(C),v=s.coordinates,b=Y.generatePlanetUrl(v,e.index,L.name,Y.getCurrentPage()),k=ne.getLocations().some(G=>G.stargateUrl===b);x(G=>({isOnCooldown:!I&&N>0,isSaved:k,isCollecting:G.isCollecting,timeUntilNext:N}))},D=()=>{x(C=>({...C,isCollecting:!0})),E=setTimeout(()=>{x(C=>({...C,isCollecting:!1}))},1e3)};m();const g=setInterval(m,1e3),R=ie.subscribe("mining_completed",D);return()=>{clearInterval(g),E&&clearTimeout(E),R()}},[L.name,e.index,s.coordinates]);const u=E=>E.replace(/_/g," "),S=E=>{const m=E/86400;return m<30?`${m.toFixed(2)} days`:m<365?`${(m/30).toFixed(2)} months`:`${(m/365).toFixed(2)} years`},P=E=>{const m=E*9/5+32;return`${E.toFixed(1)}°C (${m.toFixed(1)}°F)`},c=E=>`${E.toExponential(2)} kg`,o=E=>`${E.toFixed(2)} km`;return d.jsxs("div",{className:"h-full flex flex-col relative",children:[d.jsxs("div",{className:"absolute top-0 right-0 flex gap-2 z-10",children:[d.jsx(Oe,{locationType:"planet",locationId:L.name,coordinates:s.coordinates.join(","),systemIndex:e.index,planetName:L.name,planetElements:L.elements,className:"text-xs"}),d.jsx(xe,{type:"planet",name:L.name,coordinates:s.coordinates.join(","),systemIndex:e.index,planetName:L.name,className:"text-xs"}),d.jsx("div",{className:"inline-flex items-center bg-green-500/20 border border-green-500/50 text-green-400 text-[10px] font-medium px-1.5 py-0.5 rounded h-[21px] box-border",children:"VISITED"})]}),d.jsxs("div",{className:"flex items-center gap-3 mb-3",children:[d.jsx(ce,{isOnCooldown:f.isOnCooldown,isSaved:f.isSaved,isCollecting:f.isCollecting}),d.jsx("h3",{className:"text-lg sm:text-xl font-bold text-white",children:"Details"})]}),d.jsxs("div",{className:"grid grid-cols-3 gap-2 mb-3",children:[d.jsxs("div",{className:"bg-white/10 rounded-lg p-2 border border-blue-500/30",children:[d.jsx("div",{className:"text-xs text-gray-200",children:"Type"}),d.jsx("div",{className:"text-sm font-bold text-blue-300 capitalize",children:L.planet_type})]}),d.jsxs("div",{className:"bg-white/10 rounded-lg p-2 border border-purple-500/30",children:[d.jsx("div",{className:"text-xs text-gray-200",children:"Atmosphere"}),d.jsx("div",{className:"text-sm font-bold text-purple-300 capitalize",children:L.atmosphere})]}),L.life_forms!=="None"?d.jsxs("div",{className:"relative",children:[d.jsx("div",{className:"absolute -top-1 -right-1 w-3 h-3 bg-green-400 rounded-full animate-pulse z-20 border border-green-300",children:d.jsx("div",{className:"w-full h-full bg-green-400 rounded-full animate-ping absolute"})}),d.jsxs("button",{onClick:()=>O(!0),className:"w-full bg-white/10 hover:bg-green-500/20 rounded-lg p-2 border border-green-500/30 hover:border-green-400 transition-all duration-300 animate-pulse-glow hover:animate-bounce-subtle group cursor-pointer text-left",title:"Click to view Arecibo message",children:[d.jsx("div",{className:"text-xs text-gray-200 group-hover:text-green-200 transition-colors",children:"Life Forms"}),d.jsx("div",{className:"text-sm font-bold text-green-300 group-hover:text-green-200 capitalize transition-colors",children:L.life_forms})]})]}):d.jsxs("div",{className:"bg-white/10 rounded-lg p-2 border border-green-500/30",children:[d.jsx("div",{className:"text-xs text-gray-200",children:"Life Forms"}),d.jsx("div",{className:"text-sm font-bold text-green-300 capitalize",children:L.life_forms})]})]}),d.jsxs("div",{className:"bg-white/10 rounded-lg p-2 border border-orange-500/30 mb-3",children:[d.jsx("div",{className:"text-xs text-gray-200 mb-2",children:"Physical Properties"}),d.jsxs("div",{className:"grid grid-cols-2 lg:grid-cols-4 gap-1",children:[d.jsxs("div",{className:"bg-white/5 rounded p-1.5 border border-orange-500/20",children:[d.jsx("div",{className:"text-xs text-gray-300",children:"Mass"}),d.jsx("div",{className:"text-xs font-bold text-orange-300",children:c(L.mass)})]}),d.jsxs("div",{className:"bg-white/5 rounded p-1.5 border border-orange-500/20",children:[d.jsx("div",{className:"text-xs text-gray-300",children:"Diameter"}),d.jsx("div",{className:"text-xs font-bold text-orange-300",children:o(L.diameter)})]}),d.jsxs("div",{className:"bg-white/5 rounded p-1.5 border border-orange-500/20",children:[d.jsx("div",{className:"text-xs text-gray-300",children:"Density"}),d.jsxs("div",{className:"text-xs font-bold text-orange-300",children:[L.density.toFixed(2)," kg/m³"]})]}),d.jsxs("div",{className:"bg-white/5 rounded p-1.5 border border-orange-500/20",children:[d.jsx("div",{className:"text-xs text-gray-300",children:"Gravity"}),d.jsxs("div",{className:"text-xs font-bold text-orange-300",children:[L.gravity.toFixed(2)," m/s²"]})]})]})]}),d.jsxs("div",{className:"bg-white/10 rounded-lg p-2 border border-cyan-500/30 mb-3",children:[d.jsx("div",{className:"text-xs text-gray-200 mb-2",children:"Orbital Properties"}),d.jsxs("div",{className:"grid grid-cols-2 lg:grid-cols-4 gap-1",children:[d.jsxs("div",{className:"bg-white/5 rounded p-1.5 border border-cyan-500/20",children:[d.jsx("div",{className:"text-xs text-gray-300",children:"Radius"}),d.jsxs("div",{className:"text-xs font-bold text-cyan-300",children:[L.orbital_radius.toFixed(2)," AU"]})]}),d.jsxs("div",{className:"bg-white/5 rounded p-1.5 border border-cyan-500/20",children:[d.jsx("div",{className:"text-xs text-gray-300",children:"Period"}),d.jsx("div",{className:"text-xs font-bold text-cyan-300",children:S(L.orbital_period_seconds)})]}),d.jsxs("div",{className:"bg-white/5 rounded p-1.5 border border-cyan-500/20",children:[d.jsx("div",{className:"text-xs text-gray-300",children:"Speed"}),d.jsxs("div",{className:"text-xs font-bold text-cyan-300",children:[L.orbital_speed.toFixed(2)," m/s"]})]}),d.jsxs("div",{className:"bg-white/5 rounded p-1.5 border border-cyan-500/20",children:[d.jsx("div",{className:"text-xs text-gray-300",children:"Tilt"}),d.jsxs("div",{className:"text-xs font-bold text-cyan-300",children:[L.axial_tilt.toFixed(2),"°"]})]})]})]}),d.jsxs("div",{className:"grid grid-cols-1 lg:grid-cols-2 gap-2",children:[d.jsxs("div",{className:"bg-white/10 rounded-lg p-2 border border-red-500/30",children:[d.jsx("div",{className:"text-xs text-gray-200 mb-2",children:"Surface Conditions"}),d.jsxs("div",{className:"grid grid-cols-2 gap-1",children:[d.jsxs("div",{className:"bg-white/5 rounded p-1.5 border border-red-500/20",children:[d.jsx("div",{className:"text-xs text-gray-300",children:"Temperature"}),d.jsx("div",{className:"text-xs font-bold text-red-300",children:P(L.surface_temperature)})]}),d.jsxs("div",{className:"bg-white/5 rounded p-1.5 border border-red-500/20",children:[d.jsx("div",{className:"text-xs text-gray-300",children:"Rotation"}),d.jsx("div",{className:"text-xs font-bold text-red-300",children:S(L.rotation_period_seconds)})]})]})]}),d.jsxs("div",{className:"bg-white/10 rounded-lg p-2 border border-yellow-500/30",children:[d.jsxs("div",{className:"flex items-center justify-between mb-2",children:[d.jsxs("div",{className:"text-xs text-gray-200",children:["Elements (",L.elements.length,")"]}),d.jsx("button",{onClick:()=>r(!a),className:"text-xs text-yellow-400 hover:text-yellow-300 transition-colors duration-300",children:a?"▲ Collapse":"▼ Expand"})]}),a?d.jsx("div",{className:"grid grid-cols-2 sm:grid-cols-3 lg:grid-cols-4 gap-2",children:L.elements.map((E,m)=>d.jsx(Z,{elementName:E,expanded:!0,showResources:!0,className:"min-w-0"},m))}):d.jsxs("div",{className:"flex flex-wrap gap-1 justify-center",children:[L.elements.slice(0,6).map((E,m)=>d.jsx(Z,{elementName:E,expanded:!1,className:""},m)),L.elements.length>6&&d.jsxs("div",{className:"inline-flex items-center justify-center h-10 w-10 rounded border border-dashed border-yellow-500/50 text-yellow-400 text-xs",children:["+",L.elements.length-6]})]})]})]}),d.jsxs("div",{className:"mt-4 pt-3 border-t border-white/10",children:[d.jsx("div",{className:"text-xs text-gray-400 mb-2",children:"Technical Data"}),d.jsxs("div",{className:"grid grid-cols-2 sm:grid-cols-3 lg:grid-cols-6 gap-2 text-xs",children:[d.jsxs("div",{className:"bg-white/5 rounded px-1.5 py-0.5",children:[d.jsx("span",{className:"text-gray-400",children:"Status:"}),d.jsx("div",{className:"text-green-400 font-medium",children:"Visited"})]}),d.jsxs("div",{className:"bg-white/5 rounded px-1.5 py-0.5",children:[d.jsx("span",{className:"text-gray-400",children:"Planet:"}),d.jsx("div",{className:"text-white truncate font-medium",children:u(L.name)})]}),d.jsxs("div",{className:"bg-white/5 rounded px-1.5 py-0.5",children:[d.jsx("span",{className:"text-gray-400",children:"System:"}),d.jsx("div",{className:"text-white truncate font-medium",children:u(e.name)})]}),d.jsxs("div",{className:"bg-white/5 rounded px-1.5 py-0.5",children:[d.jsx("span",{className:"text-gray-400",children:"System ID:"}),d.jsxs("div",{className:"text-white font-medium",children:["#",e.index+1]})]}),d.jsxs("div",{className:"bg-white/5 rounded px-1.5 py-0.5",children:[d.jsx("span",{className:"text-gray-400",children:"Galaxy:"}),d.jsx("div",{className:"text-white truncate font-medium",children:u(s.name)})]}),d.jsxs("div",{className:"bg-white/5 rounded px-1.5 py-0.5",children:[d.jsx("span",{className:"text-gray-400",children:"Coordinates:"}),d.jsx("div",{className:"text-white font-medium",children:s.coordinates.join(", ")})]})]})]}),h&&n&&d.jsx(me,{effects:h,onToggleEffect:n}),L.life_forms!=="None"&&d.jsx(Ce,{isOpen:l,onClose:()=>O(!1),lifeForm:L.life_forms,planetName:L.name})]})},Ne=({planet:L,cosmicOriginTime:e,initialAngleRotation:s,onEffectsCreated:t})=>{const i=h=>{h.key==="Escape"&&document.dispatchEvent(new CustomEvent("planet-close-fullscreen"))};return y.useEffect(()=>(document.addEventListener("keydown",i),()=>{document.removeEventListener("keydown",i)}),[]),d.jsx("div",{className:"w-full h-full",children:d.jsx(Q,{planetName:L.name,containerClassName:"w-full h-full",autoRotate:!1,enableControls:!0,showDebugInfo:!1,...t&&{onEffectsCreated:t},planetData:{name:L.name,diameter:L.diameter,density:L.density,gravity:L.gravity,mass:L.mass,orbital_radius:L.orbital_radius,orbital_period_seconds:L.orbital_period_seconds,rotation_period_seconds:L.rotation_period_seconds,surface_temperature:L.surface_temperature,axial_tilt:L.axial_tilt,planet_type:L.planet_type,atmosphere:L.atmosphere,elements:L.elements,initial_orbital_angle:L.initial_orbital_angle||0},cosmicOriginTime:e,initialAngleRotation:s})})},ve=({planetUrl:L,planet:e,cosmicOriginTime:s,initialAngleRotation:t,onEffectsCreated:i,effects:h,onToggleEffect:n})=>{const a=y.useRef(null),r=y.useRef(null),[l,O]=y.useState(!1),[f,x]=y.useState(!1),[u,S]=y.useState(!1),[P,c]=y.useState(!1),[o,E]=y.useState(!1),[m,D]=y.useState(!1),g=()=>{c(!0),setTimeout(()=>{S(!1),c(!1)},300)};return y.useEffect(()=>{h&&n&&h.forEach(R=>{Ee.toggleEffect(R.id,R.enabled)})},[h]),y.useEffect(()=>{const R=a.current;if(!R)return;const C=R.getContext("2d");if(!C)return;let I=[];const N=800;let v,b;const A=800;let k,G=.5;function W(){const j=R?.parentElement;if(!j||!R)return;const _=j.clientWidth,U=j.clientHeight;R.width=Math.min(_,A),R.height=Math.min(U,A),v=R.width/2,b=R.height/2}function B(){W(),I=[];for(let j=0;j<N;j++)I.push({x:Math.random()*(R?.width||800),y:Math.random()*(R?.height||800),z:Math.random()*(R?.width||800),o:Math.random()});T()}function T(){!R||!C||(C.clearRect(0,0,R.width,R.height),I.forEach(j=>{j.z-=G,j.z<=0&&(j.z=R.width,j.x=Math.random()*R.width,j.y=Math.random()*R.height,j.o=Math.random());const _=R.width/j.z,U=(j.x-v)*_+v,H=(j.y-b)*_+b,J=2*_;C.beginPath(),C.fillStyle=`rgba(255, 255, 255, ${j.o})`,C.arc(U,H,J,0,2*Math.PI),C.fill()}),G<60&&(G+=1),k=requestAnimationFrame(T))}B();const V=()=>W();return window.addEventListener("resize",V),()=>{window.removeEventListener("resize",V),k&&cancelAnimationFrame(k)}},[]),y.useEffect(()=>{O(!0),setTimeout(()=>{x(!0)},800)},[]),y.useEffect(()=>(document.addEventListener("planet-close-fullscreen",g),()=>{document.removeEventListener("planet-close-fullscreen",g)}),[]),y.useEffect(()=>{if(o){const R=setTimeout(()=>E(!1),50);return()=>clearTimeout(R)}},[o]),y.useEffect(()=>{const R=setInterval(()=>{r.current&&m&&!r.current.isGeneratingImage&&m&&D(!1)},50);return()=>clearInterval(R)},[m]),d.jsxs("div",{className:"h-full flex flex-col",children:[d.jsx("div",{className:"flex items-center justify-between mb-3",children:d.jsx("h3",{className:"text-sm font-medium text-white",children:e?.name||"Planet"})}),d.jsxs("div",{className:"relative w-full max-w-80 sm:max-w-96 aspect-square mx-auto bg-black flex justify-center items-center rounded-xl overflow-hidden border-2 border-blue-400/30 mb-4",children:[d.jsx("canvas",{ref:a,className:`absolute inset-0 w-full h-full object-cover transition-opacity duration-[2500ms] ${f?"opacity-0":"opacity-100"}`,style:{filter:f?"blur(50px)":"none"}}),l&&e&&d.jsxs("div",{className:`planet-renderer-container absolute inset-0 w-full h-full transition-all duration-500 ${l&&f?"opacity-100 blur-0":"opacity-0 blur-[25px]"}`,children:[d.jsx(Q,{ref:r,planetName:e.name,containerClassName:"w-full h-full",autoRotate:!1,enableControls:!0,showDebugInfo:!1,onEffectsCreated:i,planetData:{name:e.name,diameter:e.diameter,density:e.density,gravity:e.gravity,mass:e.mass,orbital_radius:e.orbital_radius,orbital_period_seconds:e.orbital_period_seconds,rotation_period_seconds:e.rotation_period_seconds,surface_temperature:e.surface_temperature,axial_tilt:e.axial_tilt,planet_type:e.planet_type,atmosphere:e.atmosphere,elements:e.elements,initial_orbital_angle:e.initial_orbital_angle||0},cosmicOriginTime:s,initialAngleRotation:t,planetUrl:L}),d.jsx(fe,{isVisible:m}),f&&d.jsxs("div",{className:"absolute top-2 right-2 flex gap-2 z-10",children:[d.jsx("button",{onClick:()=>{r.current&&!m&&(D(!0),r.current.captureScreenshot())},disabled:m,className:`p-2 border border-white/30 rounded-lg transition-all duration-200 backdrop-blur-sm shadow-lg ${m?"bg-black/40 cursor-not-allowed opacity-50":"bg-black/60 hover:bg-black/80"}`,title:m?"Generating image...":"Download 4K screenshot",children:m?d.jsx("div",{className:"w-4 h-4 border-2 border-white/30 border-t-white rounded-full animate-spin"}):d.jsx(ue,{className:"w-4 h-4 text-white"})}),d.jsx("button",{onClick:()=>{m||(S(!0),E(!0))},disabled:m,className:`p-2 border border-white/30 rounded-lg transition-all duration-200 backdrop-blur-sm shadow-lg ${m?"bg-black/40 cursor-not-allowed opacity-50":"bg-black/60 hover:bg-black/80"}`,title:m?"Please wait...":"Expand to fullscreen",children:d.jsx("svg",{className:"w-4 h-4 text-white",fill:"none",stroke:"currentColor",viewBox:"0 0 24 24",children:d.jsx("path",{strokeLinecap:"round",strokeLinejoin:"round",strokeWidth:2,d:"M4 8V4m0 0h4M4 4l5 5m11-1V4m0 0h-4m4 0l-5 5M4 16v4m0 0h4m-4 0l5-5m11 5l-5-5m5 5v-4m0 4h-4"})})})]})]})]}),d.jsxs("div",{className:"text-center mt-auto",children:[d.jsx(oe,{href:L,onTakeScreenshot:()=>{r.current&&!m&&(D(!0),r.current.captureScreenshot())},isGeneratingImage:m}),d.jsx("div",{className:"mt-2 text-xs text-gray-500 text-center",children:"Gateway to the stars"})]}),u&&e&&K.createPortal(d.jsx("div",{className:`fixed inset-0 z-50 bg-black/95 backdrop-blur-xl transition-all duration-300 ${P||o?"opacity-0 scale-95":"opacity-100 scale-100"}`,children:d.jsxs("div",{className:`w-full h-full flex flex-col p-1 sm:p-2 transition-all duration-300 delay-75 ${P||o?"opacity-0 translate-y-4":"opacity-100 translate-y-0"}`,children:[d.jsxs("div",{className:"flex items-center justify-between mb-2 sm:mb-4",children:[d.jsx("div",{className:"block sm:hidden",children:d.jsx("h2",{className:"text-xs font-medium text-white",children:"Planet View"})}),d.jsx("div",{className:"hidden sm:block",children:d.jsxs("div",{children:[d.jsx("h2",{className:"text-lg font-bold text-white",children:"Planet Visualization"}),d.jsxs("div",{className:"text-sm text-gray-400",children:["Name: ",e.name," • Type: ",e.planet_type]})]})}),d.jsx("button",{onClick:g,className:"p-0.5 sm:p-2 bg-red-500/20 hover:bg-red-500/30 border border-red-500/30 rounded transition-colors duration-200 text-red-400 hover:text-red-300",title:"Close",children:d.jsx("svg",{className:"w-3 h-3 sm:w-6 sm:h-6",fill:"none",stroke:"currentColor",viewBox:"0 0 24 24",children:d.jsx("path",{strokeLinecap:"round",strokeLinejoin:"round",strokeWidth:2,d:"M6 18L18 6M6 6l12 12"})})})]}),d.jsx("div",{className:"flex-1 border border-white/20 rounded-lg bg-black/20 overflow-hidden min-h-0",children:d.jsx(Ne,{planet:e,cosmicOriginTime:s,initialAngleRotation:t})}),d.jsxs("div",{className:"mt-2 sm:mt-4 text-center text-xs sm:text-sm text-gray-400",children:[d.jsx("div",{className:"hidden sm:block",children:"Mouse: Rotate • Scroll: Zoom • ESC: Close"}),d.jsx("div",{className:"sm:hidden",children:"Pinch: Zoom • Drag: Rotate • ESC: Close"})]})]})}),document.body)]})},Ie=({currentPlanet:L,system:e,galaxy:s,systemPlanets:t})=>{const[i,h]=y.useState(null),[n,a]=y.useState(null),[r,l]=y.useState(!1),[O,f]=y.useState(!1),[x,u]=y.useState(!0);y.useEffect(()=>{if(t&&t.length>0){const c=t.findIndex(o=>o.name.toLowerCase()===L.toLowerCase());c!==-1?(c>0?(h(t[c-1].name.toLowerCase()),l(!0)):e.index>0?(h("__prev_system__"),l(!0)):l(!1),c<t.length-1?(a(t[c+1].name.toLowerCase()),f(!0)):(a("__next_system__"),f(!0))):(l(!1),f(!1))}else l(!1),f(!1);u(!1)},[L,e.index,t]);const S=async()=>{const c=s.coordinates.join(",");if(i==="__prev_system__"){if(!F.canAffordTravel("system",1)){F.executeTravel("system",1);return}if(!F.executeTravel("system",1))return;try{const E=await fetch(`/system/${e.index-1}`,{headers:{Accept:"application/json"}});if(E.ok){const m=await E.json();if(m.system&&m.system.planets&&m.system.planets.length>0){const g=m.system.planets[m.system.planets.length-1].name.toLowerCase();z(c,e.index-1,g,m.system.planets),X(c,e.index-1),window.location.href=`/planet/${g}`;return}}window.location.href=`/system/${e.index-1}`}catch{window.location.href=`/system/${e.index-1}`}}else if(i){if(!F.canAffordTravel("planet",1)){F.executeTravel("planet",1);return}if(!F.executeTravel("planet",1))return;z(c,e.index,i,t),window.location.href=`/planet/${i}`}},P=async()=>{const c=s.coordinates.join(",");if(n==="__next_system__"){if(!F.canAffordTravel("system",1)){F.executeTravel("system",1);return}if(!F.executeTravel("system",1))return;try{const E=await fetch(`/system/${e.index+1}`,{headers:{Accept:"application/json"}});if(E.ok){const m=await E.json();if(m.system&&m.system.planets&&m.system.planets.length>0){const g=m.system.planets[0].name.toLowerCase();z(c,e.index+1,g,m.system.planets),X(c,e.index+1),window.location.href=`/planet/${g}`;return}}window.location.href=`/system/${e.index+1}`}catch{window.location.href=`/system/${e.index+1}`}}else if(n){if(!F.canAffordTravel("planet",1)){F.executeTravel("planet",1);return}if(!F.executeTravel("planet",1))return;z(c,e.index,n,t),window.location.href=`/planet/${n}`}};return x?null:d.jsx("div",{className:"relative",children:d.jsxs("div",{className:"flex items-center justify-between mb-4",children:[d.jsx("button",{onClick:S,disabled:!r,className:`flex items-center justify-center px-3 py-1.5 rounded-lg transition-all duration-200 ${r?"bg-white/10 hover:bg-white/20 border border-white/20 text-white hover:text-blue-300":"bg-white/5 border border-white/10 text-gray-600 cursor-not-allowed"}`,children:d.jsx("svg",{className:"w-4 h-4",fill:"none",stroke:"currentColor",viewBox:"0 0 24 24",children:d.jsx("path",{strokeLinecap:"round",strokeLinejoin:"round",strokeWidth:2,d:"M15 19l-7-7 7-7"})})}),d.jsx("button",{onClick:P,disabled:!O,className:`flex items-center justify-center px-3 py-1.5 rounded-lg transition-all duration-200 ${O?"bg-white/10 hover:bg-white/20 border border-white/20 text-white hover:text-blue-300":"bg-white/5 border border-white/10 text-gray-600 cursor-not-allowed"}`,children:d.jsx("svg",{className:"w-4 h-4",fill:"none",stroke:"currentColor",viewBox:"0 0 24 24",children:d.jsx("path",{strokeLinecap:"round",strokeLinejoin:"round",strokeWidth:2,d:"M9 5l7 7-7 7"})})})]})})};class q{static instance;_effectsControlEnabled=!1;_effectsLoggingEnabled=!0;_debugLogsEnabled=!0;listeners=[];static getInstance(){return q.instance||(q.instance=new q),q.instance}get ENABLE_EFFECTS_CONTROL(){return this._effectsControlEnabled}get ENABLE_EFFECTS_LOGGING(){return this._effectsLoggingEnabled}get ENABLE_DEBUG_LOGS(){return this._debugLogsEnabled}toggleEffectsControl(){this._effectsControlEnabled=!this._effectsControlEnabled,this.notifyListeners()}enableEffectsControl(){this._effectsControlEnabled=!0,this.notifyListeners()}disableEffectsControl(){this._effectsControlEnabled=!1,this.notifyListeners()}addListener(e){this.listeners.push(e)}removeListener(e){this.listeners=this.listeners.filter(s=>s!==e)}notifyListeners(){this.listeners.forEach(e=>e())}}const w=q.getInstance();w.ENABLE_EFFECTS_CONTROL;w.ENABLE_EFFECTS_LOGGING;w.ENABLE_DEBUG_LOGS;const ke=()=>{y.useEffect(()=>{let L="",e;const s=t=>{t.key.match(/^[a-zA-Z]$/)&&(L+=t.key.toUpperCase(),e&&clearTimeout(e),e=setTimeout(()=>{L=""},2e3),L.includes("ATLAS")&&(w.enableEffectsControl(),L="",e&&clearTimeout(e)),L.length>10&&(L=L.slice(-10)))};return document.addEventListener("keydown",s),()=>{document.removeEventListener("keydown",s),e&&clearTimeout(e)}},[])},je=({planet:L,system:e,galaxy:s,planet_url:t,version:i,image_url:h,cosmic_origin_time:n,initial_angle_rotation:a})=>{const[r]=y.useState(s.coordinates.join(",")),[l,O]=y.useState([]),[f,x]=y.useState(w.ENABLE_EFFECTS_CONTROL);ke();const u=E=>{O(E)},S=(E,m)=>{O(D=>D.map(g=>g.id===E?{...g,enabled:m}:g))};y.useEffect(()=>{document.body.setAttribute("data-coordinates",r),document.body.setAttribute("data-system-index",e.index.toString()),document.body.setAttribute("data-planet-name",L.name.toLowerCase()),z(r,e.index,L.name,e.planets||[]),X(r,e.index)},[r,e.index,L.name]),y.useEffect(()=>{const E=()=>{x(w.ENABLE_EFFECTS_CONTROL)};return w.addListener(E),()=>{w.removeListener(E)}},[]);const P=E=>E.replace(/_/g," "),c=E=>E.replace(/_/g," "),o=E=>E.replace(/_/g," ");return d.jsxs("div",{className:"w-full h-screen bg-gradient-to-br from-slate-900 via-purple-900 to-slate-900 text-white overflow-auto",children:[d.jsx("div",{className:"absolute inset-0 opacity-20",style:{backgroundImage:`url("data:image/svg+xml,%3Csvg width='60' height='60' viewBox='0 0 60 60' xmlns='http://www.w3.org/2000/svg'%3E%3Cg fill='none' fill-rule='evenodd'%3E%3Cg fill='%23ffffff' fill-opacity='0.1'%3E%3Ccircle cx='30' cy='30' r='1'/%3E%3C/g%3E%3C/g%3E%3C/svg%3E")`}}),d.jsx(he,{}),d.jsxs("div",{className:"relative z-10 pt-1",children:[d.jsx(ae,{}),d.jsxs("div",{className:"w-full px-2 sm:px-4 lg:px-6 py-4 sm:py-8",children:[d.jsxs("div",{className:"text-center mb-8",children:[d.jsx("div",{className:"flex items-center justify-center gap-4 mb-4",children:d.jsxs("h1",{className:"text-3xl sm:text-4xl md:text-5xl font-bold bg-gradient-to-r from-blue-400 via-purple-400 to-pink-400 bg-clip-text text-transparent",children:["Planet '",P(L.name),"'"]})}),d.jsxs("p",{className:"text-lg sm:text-xl text-gray-300",children:["in System '",c(e.name),"' - Galaxy '",o(s.name),"'"]}),d.jsxs("p",{className:"text-sm sm:text-base text-gray-400",children:["Coordinates ",s.coordinates.join(", ")]})]}),d.jsx(Ie,{currentPlanet:L.name,system:e,galaxy:s,systemPlanets:e.planets||[]}),d.jsx("div",{className:"bg-white/5 backdrop-blur-lg rounded-2xl border border-white/10 mb-8 shadow-2xl p-4 sm:p-6",children:d.jsxs("div",{className:"flex flex-col lg:grid lg:grid-cols-[400px_1fr] gap-6 lg:gap-8 relative",children:[d.jsx("div",{className:"order-1 lg:order-1",children:d.jsx(ve,{planetUrl:t,planet:{...L,name:P(L.name)},cosmicOriginTime:n,initialAngleRotation:a,onEffectsCreated:u,effects:l,onToggleEffect:S})}),d.jsx("div",{className:"hidden lg:block absolute left-[416px] top-0 bottom-0 w-1 rounded-full bg-white/10 -translate-x-1.5"}),d.jsx("div",{className:"order-2 lg:order-2",children:d.jsx(De,{planet:L,system:e,galaxy:s,cosmicOriginTime:n,initialAngleRotation:a,effects:f?l:void 0,onToggleEffect:f?S:void 0})})]})}),d.jsx("div",{className:"bg-white/5 backdrop-blur-lg rounded-2xl border border-white/10 mb-8 shadow-2xl p-4 sm:p-6 text-center",children:d.jsx("button",{onClick:()=>window.location.href=`/system/${e.index}`,className:"w-full sm:w-auto px-6 sm:px-8 py-3 sm:py-4 bg-gradient-to-r from-gray-600 via-gray-700 to-gray-600 hover:from-gray-700 hover:via-gray-800 hover:to-gray-700 text-white font-bold rounded-xl transition-all duration-300 transform hover:scale-105 shadow-lg backdrop-blur-sm",children:d.jsxs("span",{className:"text-base sm:text-lg",children:["← Back to System '",c(e.name),"'"]})})})]}),d.jsx(Se,{version:i})]}),d.jsx(Le,{}),d.jsx(re,{currentLocation:{type:"planet",name:L.name,coordinates:s.coordinates.join(","),systemIndex:e.index,planetName:L.name}})]})};document.addEventListener("DOMContentLoaded",async()=>{try{const L=document.getElementById("planet-data"),e=document.getElementById("system-data"),s=document.getElementById("galaxy-data"),t=document.getElementById("meta-data");if(!L||!e||!s||!t)return;const i=JSON.parse(L.textContent||"{}"),h=JSON.parse(e.textContent||"{}"),n=JSON.parse(s.textContent||"{}"),a=JSON.parse(t.textContent||"{}"),r={planet:i,system:h,galaxy:n,planet_url:a.planet_url,version:a.version,image_url:a.image_url,cosmic_origin_time:a.cosmic_origin_time,initial_angle_rotation:a.initial_angle_rotation},l=document.getElementById("atlas-react-root");l&&M.createRoot(l).render(p.createElement(je,r))}catch{}});
