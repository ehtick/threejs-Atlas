import{S as k}from"./atlas_BlTNaWGHZ8zx8h3TIfddO.js";import{G as x,C as w,B as z,a as O,L as G,N as L,h as v,V as A}from"./atlas_Xs9BLEnnn6iCcADsGARg5.js";class R{snowflakeGroup;planetRadius;materials=[];particleSystems=[];trailPositions=[];trailColors=[];globalWindDirection;rng;startTime;timeSpeed;trailLength=15;particleCount;rotationSpeed;particleOpacity;windSpeedMultiplier;verticalOscillation;gustCycles;gustPhases;gustZones;burstZone;burstCycleDuration;burstDuration;burstStartOffset;constructor(e,r={}){this.snowflakeGroup=new x,this.planetRadius=e;const u=r.seed||Math.floor(Math.random()*1e6);this.rng=new k(u),this.particleCount=r.particleCount||10,r.windSpeed;const g=(r.size||1)*(e*.2),o=r.opacity||1;this.globalWindDirection=this.rng.uniform(0,Math.PI*2),this.startTime=this.rng.uniform(0,1e3),this.timeSpeed=this.rng.uniform(2,4),this.rotationSpeed=this.rng.uniform(.2,.8),this.particleOpacity=this.rng.uniform(.05,.25),this.windSpeedMultiplier=this.rng.uniform(1.1,2.5),this.verticalOscillation=this.rng.uniform(.1,.4),this.gustCycles=[],this.gustPhases=[],this.gustZones=[];for(let n=0;n<this.particleCount;n++){this.gustCycles.push(this.rng.uniform(15,30)),this.gustPhases.push(this.rng.uniform(0,1));const i=this.rng.uniform(0,Math.PI*2),t=this.rng.uniform(Math.PI*.3,Math.PI*.6);this.gustZones.push({start:i,end:(i+t)%(Math.PI*2)})}this.burstZone={lat:this.rng.uniform(-Math.PI/3,Math.PI/3),lon:this.rng.uniform(0,Math.PI*2),radius:this.rng.uniform(1.2,2)},this.burstCycleDuration=this.rng.uniform(45,75),this.burstDuration=this.rng.uniform(8,15),this.burstStartOffset=this.rng.uniform(0,this.burstCycleDuration);const h=r.colors||[new w(1,1,1),new w(.9,.9,.9),new w(.7,.7,.7),new w(.5,.5,.5),new w(.3,.3,.3)];this.createSnowflakeSystem(this.particleCount,g,o,h)}createSnowflakeSystem(e,r,u,g){const o=[];for(let i=0;i<e;i++){let t,s,c,d=0;do{const l=(this.rng.uniform(-1,1)+this.rng.uniform(-1,1))*.2,f=this.rng.uniform(-1,1)*this.burstZone.radius;t=Math.max(0,Math.min(Math.PI,this.burstZone.lat+Math.PI/2+l)),s=(this.burstZone.lon+f)%(Math.PI*2);const S=Math.abs(t-(this.burstZone.lat+Math.PI/2)),y=Math.min(Math.abs(s-this.burstZone.lon),Math.PI*2-Math.abs(s-this.burstZone.lon));c=Math.max(S/.3,y/this.burstZone.radius),d++}while(c>1&&d<10);c>1&&(t=this.burstZone.lat+Math.PI/2+this.rng.uniform(-.1,.1),s=this.burstZone.lon+this.rng.uniform(-this.burstZone.radius,this.burstZone.radius));const a=this.planetRadius*this.rng.uniform(1.001,1.005),p=a*Math.sin(t)*Math.cos(s),b=a*Math.cos(t),m=a*Math.sin(t)*Math.sin(s);o.push(p,b,m)}const h=[],n=new w;for(let i=0;i<this.trailLength;i++){const t=Math.pow(1-i/(this.trailLength-1),1.5);n.setRGB(t,t,t),h.push(n.r,n.g,n.b)}for(let i=0;i<e;i++){const t=i*3,s=o[t],c=o[t+1],d=o[t+2],a=new Float32Array(this.trailLength*3);for(let l=0;l<this.trailLength;l++){const f=l*.1;a[l*3]=s+this.rng.uniform(-1,1)*f*this.planetRadius*.01,a[l*3+1]=c+this.rng.uniform(-1,1)*f*this.planetRadius*.01,a[l*3+2]=d+this.rng.uniform(-1,1)*f*this.planetRadius*.01}const p=new z;p.setAttribute("position",new O(a,3)),p.setAttribute("color",new O(new Float32Array(h),3));const b=new G({vertexColors:!0,transparent:!0,opacity:this.particleOpacity,blending:L,depthTest:!0,linewidth:3}),m=new v(p,b);this.materials.push(b),this.particleSystems.push(m),this.trailPositions.push(a),this.trailColors.push(new Float32Array(h)),m.rnd=this.rng.uniform(0,1),m.particleIndex=i,this.snowflakeGroup.add(m)}}update(e=.016){const u=(this.startTime+Date.now()/1e3*this.timeSpeed)%1e3,o=(Date.now()/1e3+this.burstStartOffset)%this.burstCycleDuration;let h=0;if(o<this.burstDuration){const n=o/this.burstDuration;n<.2?h=n/.2:n>.8?h=(1-n)/.2:h=1}this.snowflakeGroup.visible=!0,Math.floor(o)%5===0&&o%1<.1&&console.log("❄️ Burst Debug:",{burstTime:Math.round(o),burstIntensity:Math.round(h*100)/100,cycleDuration:Math.round(this.burstCycleDuration),burstDuration:Math.round(this.burstDuration)}),this.particleSystems.forEach((n,i)=>{const t=n.geometry.getAttribute("position"),s=t.array,c=n.rnd,d=n.particleIndex,a=this.calculateTrailPath(u,d,c);for(let I=this.trailLength-1;I>0;I--){const D=I*3,T=(I-1)*3;s[D]=s[T],s[D+1]=s[T+1],s[D+2]=s[T+2]}s[0]=a.x,s[1]=a.y,s[2]=a.z,t.needsUpdate=!0;const p=Date.now()/1e3,b=this.gustCycles[i],m=this.gustPhases[i],l=(p/b+m)%1;let f=0;l<.3?f=l/.3:l<.7?f=1:f=(1-l)/.3;const S=new A(s[0],s[1],s[2]),y=Math.atan2(S.z,S.x),P=y<0?y+Math.PI*2:y,M=this.gustZones[i];let C=!1;M.start<M.end?C=P>=M.start&&P<=M.end:C=P>=M.start||P<=M.end,this.materials[i].opacity=C?this.particleOpacity*f:0})}calculateTrailPath(e,r,u){e+=10*u+r*.1;const g=this.burstZone.lon+(u-.5)*this.burstZone.radius,o=this.burstZone.lat+Math.PI/2+(u-.5)*.2,h=this.windSpeedMultiplier,n=e*h,i=g+Math.cos(this.globalWindDirection)*n,t=o+this.verticalOscillation*Math.sin(e*.5+u),s=.015*Math.sin(e*2+u*10),c=this.planetRadius*(1.005+s),d=c*Math.sin(t)*Math.cos(i),a=c*Math.cos(t),p=c*Math.sin(t)*Math.sin(i);return{x:d,y:a,z:p}}addToScene(e,r){r&&this.snowflakeGroup.position.copy(r),e.add(this.snowflakeGroup)}getObject3D(){return this.snowflakeGroup}dispose(){this.materials.forEach(e=>e.dispose()),this.particleSystems.forEach(e=>e.geometry.dispose()),this.materials=[],this.particleSystems=[],this.trailPositions=[],this.trailColors=[],this.snowflakeGroup.clear()}}function E(Z,e,r){if(e.type!=="tundra")return null;const u=r||Math.floor(Math.random()*1e6),g=e.snow_intensity||.7,o=e.wind_strength||1,h=Math.floor(g*200+50),n=o*5;return new R(Z,{particleCount:h,windSpeed:n,size:1.2,opacity:.9,seed:u+15e3})}export{R as T,E as c};
