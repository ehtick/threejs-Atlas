import{c as oe,R as ae}from"./atlas_Bz_drvPTjLB3DYaygMa-i.js";import{c as O,A as ce,a as h,b as q,d as ne,e as fe}from"./atlas_DHu_5lp7S13wWVWuZS6hx.js";import{c as I,L as W,a as ie}from"./atlas_B7LzHi9nvxOPokGGNO8ME.js";import{c as N}from"./atlas_DLYW1hwFoEVcZewQdWHFI.js";import{c as z,T as de}from"./atlas_7LJWBKqn51UAAE_vlfydi.js";import{c as B,R as le}from"./atlas_5-n75ycfYzckqSeaP1vQB.js";import{c as pe,A as me}from"./atlas_DCnp7L347Zej0R-2R5015.js";import{P as ue,c as he}from"./atlas_Cr3k84KcuhTP7t_CGBkD_.js";import{g as x,c as _e,P as ye}from"./atlas_DX3hKSyhvOd5vhsBE2wL_.js";import{P as ge}from"./atlas_Sv53Ev1O8wcl6__c35cW_.js";import{c as U}from"./atlas_CAWeIumbOszb3FHtAtyvT.js";import{c as Y}from"./atlas_DUoJmawPBgYtg870BsqVB.js";import{c as Ee}from"./atlas_DoSWiOdnBZbd-dYCrN68D.js";import{c as Se}from"./atlas_BSoEj-I7padPeWkAWheMh.js";import{c as be}from"./atlas_uAqjLpolM4eSCUZ1BRnwC.js";import{c as Ie}from"./atlas_NBZZX46gV9TeICCphfBLD.js";import{c as V,D as Pe}from"./atlas_Bsd3-FULeVDmofoP0ilC2.js";import{E as Fe,c as j}from"./atlas_C4rCm3TtBRbJVgPfVT8m2.js";import{c as H,E as Te}from"./atlas_B_42zUbgAdUl4p2nl2jB8.js";import{c as J,A as xe}from"./atlas_Fvg7WNO-8ZJ01ts4BbiZ3.js";import{c as we,S as Ae}from"./atlas_DKH_vnQBpQTm_NiFXqLwi.js";import{P as $}from"./atlas_B7hacUGg4jGaucWb9CcjI.js";import{F as K}from"./atlas_DuVnO2eO66P0xXoWMalh0.js";import{c as Ce,O as Le}from"./atlas_D74DtF5Z1WceKpmyMiyJN.js";import{c as Q,F as Me}from"./atlas_UgvC-2iBpKt-xhd5nzzW6.js";import{c as X,A as ve}from"./atlas_C6kCj00U5Xut6Jp4myEj5.js";import{c as $e}from"./atlas_C7v_V9WUFQwCq63JHdhkd.js";import{c as Z,L as ke}from"./atlas_BZDyiF0r8zZN78JG08HQG.js";import{c as R,M as Ge}from"./atlas_CiYAFdv0uSI9zybKDl99G.js";import{c as Oe,F as qe}from"./atlas_v6gP3UUBgXrUyXjmDqWOW.js";import{c as We,V as Ne}from"./atlas_oljttk0ZMT4Bb4d3z7Byx.js";import{g as D,C as ze}from"./atlas_YyHXU7w5UzCW5Af7UsLdJ.js";const Be=!1;class P{static instance;creators=new Map;effects=new Map;nextId=1;layerSystem;constructor(){this.registerDefaultEffects()}static getInstance(){return P.instance||(P.instance=new P),P.instance}registerDefaultEffects(){this.registerEffect("atmosphere_glow",{create:(e,t)=>new ce(t,e),fromPythonData:(e,t)=>O(t,e.atmosphere||{})}),this.registerEffect("atmosphere_clouds",{create:(e,t)=>new q(t,e),fromPythonData:(e,t)=>h(t,e.surface_elements||{})}),this.registerEffect("atmospheric_streaks",{create:(e,t)=>new xe(t,e),fromPythonData:(e,t)=>J(t,e.atmosphere||{})}),this.registerEffect("atmosphere",{create:(e,t)=>new fe(t,e),fromPythonData:(e,t)=>ne(t,e)}),this.registerEffect("ring_system",{create:(e,t)=>new ae(t,e),fromPythonData:(e,t)=>oe(e.rings||{},t)}),this.registerEffect("fragmentation",{create:(e,t)=>new K(t,e),fromPythonData:(e,t)=>new K(t,{color:e.surface?.fragment_color||[.3,.3,.3],fragmentCount:e.surface?.fragment_count||20})}),this.registerEffect("land_masses",{create:(e,t)=>new W(t,e),fromPythonData:(e,t)=>I(t,e.surface_elements||{},e.seeds?.planet_seed)}),this.registerEffect("ocean_waves",{create:(e,t)=>new Le(e),fromPythonData:(e,t)=>Ce(e)}),this.registerEffect("aquifer_water",{create:(e,t,o)=>new ve(o,e),fromPythonData:(e,t,o)=>X(o,e)}),this.registerEffect("fluid_layers",{create:(e,t)=>new Me(t,e),fromPythonData:(e,t)=>Q(t,e)}),this.registerEffect("lava_flows",{create:(e,t)=>new ke(t,e),fromPythonData:(e,t)=>Z(t,e.surface_elements||{},e.seeds?.planet_seed)}),this.registerEffect("molten_lava",{create:(e,t,o)=>new Ge(o,e),fromPythonData:(e,t,o)=>R(o,e,e.seeds?.planet_seed)}),this.registerEffect("fire_eruption",{create:(e,t)=>new qe(t,e),fromPythonData:(e,t,o)=>Oe(e,t)}),this.registerEffect("crystal_formations",{create:(e,t)=>(console.warn("Crystal formations effect not implemented yet"),null)}),this.registerEffect("star_field",{create:(e,t)=>new Ae(t,e),fromPythonData:(e,t)=>we(t,e.seeds?.planet_seed||e.planet_seed)}),this.registerEffect("tundra_snowflakes",{create:(e,t)=>new de(t,e),fromPythonData:(e,t)=>z(t,e.surface_elements||{},e.seeds?.planet_seed)}),this.registerEffect("river_lines",{create:(e,t)=>new le(t,e),fromPythonData:(e,t)=>B(t,e.surface_elements||{},e.seeds?.planet_seed)}),this.registerEffect("anomaly_phase_matter",{create:(e,t)=>new me(t,e),fromPythonData:(e,t)=>pe(t,e.surface_elements||{},e.seeds?.planet_seed)}),this.registerEffect("pulsating_cube",{create:(e,t)=>new ue(t,e),fromPythonData:(e,t)=>{const o=x(e);return he(t,e.surface_elements||{},e.seeds?.planet_seed,o,e)}}),this.registerEffect("planet_rays",{create:(e,t)=>new ye(t,e),fromPythonData:(e,t)=>_e(t,e.surface_elements||{},e.seeds?.planet_seed)}),this.registerEffect("visual_debug_3d",{create:(e,t)=>new Ne(t,e),fromPythonData:(e,t)=>We(e,t)}),this.registerEffect("diamond_cracks",{create:(e,t)=>new Pe({...e,radius:t}),fromPythonData:(e,t)=>V(e,t,e.seeds?.shape_seed||e.seeds?.planet_seed)}),this.registerEffect("exotic_geometric_shapes",{create:(e,t)=>new Fe(t,e),fromPythonData:(e,t)=>{const o=x(e);return j(t,e.surface_elements||{},e.seeds?.planet_seed,o)}}),this.registerEffect("exotic_doodles",{create:(e,t)=>new Te(t,e),fromPythonData:(e,t)=>H(t,e.surface_elements||{},e.seeds?.planet_seed)})}registerEffect(e,t){this.creators.set(e,t)}createEffect(e,t,o,n,u=0){const c=this.creators.get(e);if(!c)return console.warn(`Effect type '${e}' not registered`),null;try{const d=c.create(t,o,this.layerSystem);if(!d)return null;const _={id:`effect_${this.nextId++}`,type:e,effect:d,priority:u,enabled:!0};return this.effects.set(_.id,_),_}catch(d){return console.error(`Error creating effect '${e}':`,d),null}}createEffectFromPythonData(e,t,o,n,u=0){const c=this.creators.get(e);if(!c||!c.fromPythonData)return this.createEffect(e,t,o,n,u);try{const d=c.fromPythonData(t,o,this.layerSystem);if(!d)return null;const _={id:`effect_${this.nextId++}`,type:e,effect:d,priority:u,enabled:!0};return this.effects.set(_.id,_),_}catch(d){return console.error(`Error creating effect '${e}' from Python data:`,d),null}}createEffectsFromList(e,t,o){const n=[],u=e.sort((c,d)=>(c.priority||0)-(d.priority||0));for(const c of u){const d=this.createEffect(c.type,c.params,t,o,c.priority);d&&(d.enabled=c.enabled!==!1,n.push(d))}return n}createEffectsFromPythonPlanetData(e,t,o,n,u){const c=[];try{const d=x(e);if(u?this.layerSystem=u:this.layerSystem=new ge(o,d),e.surface_elements){const r=e.surface_elements;if(r.effects_3d&&Array.isArray(r.effects_3d))for(const p of r.effects_3d){if(p.type==="atmospheric_streaks"){const E=J(t,p.params,e.seeds?.shape_seed+3e3),S={id:`effect_${this.nextId++}`,type:"atmospheric_streaks",effect:E,priority:p.priority||0,enabled:!0,name:"Atmospheric Streaks"};this.effects.set(S.id,S),c.push(S),E.addToScene(n,o.position);continue}const y=this.createEffect(p.type,p.params,t,o,p.priority||0);y?(y.name=p.type.replace(/_/g," ").replace(/\b\w/g,E=>E.toUpperCase()),c.push(y),y.effect.apply&&y.effect.apply(o),y.effect.addToScene&&y.effect.addToScene(n,o.position)):console.error("❌ FALLO AL CREAR EFECTO:",p.type)}switch(r.type.toLowerCase()){case"gas_giant":if(this.layerSystem){const s=U(this.layerSystem,{...r,base_color:d,turbulence:e.turbulence||r.turbulence},e.seeds?.shape_seed||e.seeds?.planet_seed||e.seeds?.planet_seed),a=Y(this.layerSystem,{...r,base_color:d,storm_intensity:e.storm_intensity||r.storm_intensity},(e.seeds?.shape_seed||e.seeds?.planet_seed)+1e3),l={id:`effect_${this.nextId++}`,type:"cloud_bands_layer",effect:s,priority:0,enabled:!0};this.effects.set(l.id,l),c.push(l);const i={id:`effect_${this.nextId++}`,type:"cloud_gyros_layer",effect:a,priority:1,enabled:!0};if(this.effects.set(i.id,i),c.push(i),r.polar_hexagon&&r.polar_hexagon.enabled){const f=e.timing?.elapsed_time?e.timing.elapsed_time/31557600:0,m=new $({planetColor:d,hexagonData:r.polar_hexagon,planetRadius:t,currentTime:f}),g={id:`effect_${this.nextId++}`,type:"polar_hexagon",effect:m,priority:10,enabled:!0};this.effects.set(g.id,g),c.push(g),n&&m.addToScene(n)}}else console.error("❌ PlanetLayerSystem not initialized!");break;case"frozen_gas_giant":if(this.layerSystem){const s=U(this.layerSystem,{...r,base_color:d,turbulence:e.turbulence||r.turbulence,icy_tint:!0},e.seeds?.shape_seed||e.seeds?.planet_seed),a={id:`effect_${this.nextId++}`,type:"cloud_bands_layer",effect:s,priority:0,enabled:!0};if(this.effects.set(a.id,a),c.push(a),r.polar_hexagon&&r.polar_hexagon.enabled){const l=e.timing?.elapsed_time?e.timing.elapsed_time/31557600:0,i=new $({planetColor:d,hexagonData:r.polar_hexagon,planetRadius:t,currentTime:l}),f={id:`effect_${this.nextId++}`,type:"polar_hexagon",effect:i,priority:10,enabled:!0};this.effects.set(f.id,f),c.push(f),n&&i.addToScene(n)}}break;case"aquifer":console.log("🌊 Processing Aquifer planet with surface data:",r),console.log("🌊 Surface.clouds:",r.clouds);const p=X(this.layerSystem,e);if(p){const s={id:`effect_${this.nextId++}`,type:"aquifer_water",effect:p,priority:2,enabled:!0,name:"Aquifer Water Surface"};this.effects.set(s.id,s),c.push(s),console.log("🌊 AquiferWater effect added for aquifer planet")}const y=$e(this.layerSystem,e);if(y){const s={id:`effect_${this.nextId++}`,type:"ocean_currents",effect:y,priority:1,enabled:!0,name:"Ocean Currents"};this.effects.set(s.id,s),c.push(s),console.log("🌊 Ocean Currents effect added for aquifer planet")}if(r.clouds&&r.clouds.length>0){const s=h(t,r,(e.seeds?.shape_seed||e.seeds?.planet_seed)+4e3),a={id:`effect_${this.nextId++}`,type:"atmosphere_clouds",effect:s,priority:15,enabled:!0,name:"Atmospheric Clouds"};this.effects.set(a.id,a),c.push(a),s.addToScene(n,o.position),console.log("☁️ Atmospheric Clouds added to Aquifer planet")}if(r.land_masses&&r.land_masses.length>0){const s=I(t,r,(e.seeds?.shape_seed||e.seeds?.planet_seed)+7e3);if(s){const a={id:`effect_${this.nextId++}`,type:"land_masses",effect:s,priority:3,enabled:!0,name:"Emergent Land Masses"};this.effects.set(a.id,a),c.push(a),s.addToScene(n,o.position)}}if(r.atmosphere_clouds&&r.atmosphere_clouds.length>0){const s=h(t,r,(e.seeds?.shape_seed||e.seeds?.planet_seed)+8e3);if(s){const a={id:`effect_${this.nextId++}`,type:"atmosphere_clouds",effect:s,priority:4,enabled:!0,name:"Atmospheric Clouds"};this.effects.set(a.id,a),c.push(a),s.addToScene(n,o.position)}}break;case"nebulous":if(this.layerSystem){const s=Y(this.layerSystem,{...r,base_color:d,storm_intensity:r.nebula_density||.6,color_variance:r.color_variance||.2},(e.seeds?.shape_seed||e.seeds?.planet_seed)+2e3),a={id:`effect_${this.nextId++}`,type:"cloud_gyros_layer",effect:s,priority:0,enabled:!0};if(this.effects.set(a.id,a),c.push(a),r.polar_hexagon&&r.polar_hexagon.enabled){const l=e.timing?.elapsed_time?e.timing.elapsed_time/31557600:0,i=new $({planetColor:d,hexagonData:r.polar_hexagon,planetRadius:t,currentTime:l}),f={id:`effect_${this.nextId++}`,type:"polar_hexagon",effect:i,priority:10,enabled:!0};this.effects.set(f.id,f),c.push(f),n&&i.addToScene(n)}}break;case"metallic":case"metallic_3d":if(this.layerSystem){const s=be(this.layerSystem,e,e.seeds?.shape_seed||e.seeds?.planet_seed),a={id:`effect_${this.nextId++}`,type:"metallic_surface_layer",effect:s,priority:0,enabled:!0};this.effects.set(a.id,a),c.push(a)}break;case"diamond":if(this.layerSystem){const s=Ie(this.layerSystem,e,e.seeds?.shape_seed||e.seeds?.planet_seed),a={id:`effect_${this.nextId++}`,type:"diamond_surface_layer",effect:s,priority:0,enabled:!0};this.effects.set(a.id,a),c.push(a);const l=V(e,t,e.seeds?.shape_seed||e.seeds?.planet_seed),i={id:`effect_${this.nextId++}`,type:"diamond_cracks",effect:l,priority:1,enabled:!0};if(this.effects.set(i.id,i),c.push(i),l.addToScene(n,o.position),r.clouds&&r.clouds.length>0){const f=h(t,r,(e.seeds?.shape_seed||e.seeds?.planet_seed)+4e3),m={id:`effect_${this.nextId++}`,type:"atmosphere_clouds",effect:f,priority:15,enabled:!0,name:"Atmospheric Clouds"};this.effects.set(m.id,m),c.push(m),f.addToScene(n,o.position)}}break;case"rocky":if(this.layerSystem){const s=Ee(this.layerSystem,e,e.seeds?.shape_seed||e.seeds?.planet_seed),a={id:`effect_${this.nextId++}`,type:"rocky_terrain_layer",effect:s,priority:0,enabled:!0};if(this.effects.set(a.id,a),c.push(a),r.clouds&&r.clouds.length>0){const l=h(t,r,(e.seeds?.shape_seed||e.seeds?.planet_seed)+4e3),i={id:`effect_${this.nextId++}`,type:"atmosphere_clouds",effect:l,priority:15,enabled:!0,name:"Atmospheric Clouds"};this.effects.set(i.id,i),c.push(i),l.addToScene(n,o.position)}}break;case"icy":if(this.layerSystem){const s=Se(this.layerSystem,e,e.seeds?.shape_seed||e.seeds?.planet_seed),a={id:`effect_${this.nextId++}`,type:"icy_terrain_layer",effect:s,priority:0,enabled:!0};this.effects.set(a.id,a),c.push(a);const l=ie(t,r,(e.seeds?.shape_seed||e.seeds?.planet_seed)+8e3);if(l){const f={id:`effect_${this.nextId++}`,type:"transparent_land_masses",effect:l,priority:1,enabled:!0,name:"Ice Formations"};this.effects.set(f.id,f),c.push(f),l.addToScene(n,o.position),console.log("🧊 Ice Formations (transparent LandMasses) added to Icy planet")}else console.warn("❄️ Failed to create transparent LandMasses for Icy planet");if(r.clouds&&r.clouds.length>0){const f=h(t,r,(e.seeds?.shape_seed||e.seeds?.planet_seed)+4e3),m={id:`effect_${this.nextId++}`,type:"atmosphere_clouds",effect:f,priority:15,enabled:!0,name:"Atmospheric Clouds"};this.effects.set(m.id,m),c.push(m),f.addToScene(n,o.position),console.log("☁️ Atmospheric Clouds added to Icy planet")}const i=N(t,r,(e.seeds?.shape_seed||e.seeds?.planet_seed)+9e3);if(i){const f={id:`effect_${this.nextId++}`,type:"icy_features",effect:i,priority:2,enabled:!0,name:"Ice Crystals & Features"};this.effects.set(f.id,f),c.push(f),i.addToScene(n,o.position),console.log("❄️ Icy Features (crystals, cracks, ice caps) added to Icy planet")}}break;case"oceanic":const E=Q(t,e);if(E){const s={id:`effect_${this.nextId++}`,type:"fluid_layers",effect:E,priority:3,enabled:!0,name:"Fluid Ocean Layers"};this.effects.set(s.id,s),c.push(s),E.addToScene(n,o.position),console.log("🌊 FluidLayers effect added for oceanic planet")}if(r.green_patches&&r.green_patches.length>0){const s=I(t,r,(e.seeds?.shape_seed||e.seeds?.planet_seed)+6e3);if(s){const a={id:`effect_${this.nextId++}`,type:"land_masses",effect:s,priority:5,enabled:!0,name:"Land Masses (Islands)"};this.effects.set(a.id,a),c.push(a),s.addToScene(n,o.position)}}if(r.clouds&&r.clouds.length>0){const s=h(t,r,(e.seeds?.shape_seed||e.seeds?.planet_seed)+4e3),a={id:`effect_${this.nextId++}`,type:"atmosphere_clouds",effect:s,priority:15,enabled:!0,name:"Atmospheric Clouds"};this.effects.set(a.id,a),c.push(a),s.addToScene(n,o.position)}break;case"tundra":if(r.green_patches&&r.green_patches.length>0){const s=I(t,r,(e.seeds?.shape_seed||e.seeds?.planet_seed)+6e3);if(s){const a={id:`effect_${this.nextId++}`,type:"land_masses",effect:s,priority:5,enabled:!0,name:"Tundra Terrain"};this.effects.set(a.id,a),c.push(a),s.addToScene(n,o.position),console.log("🏔️ Tundra terrain (LandMasses) added")}}const S=N(t,r,(e.seeds?.shape_seed||e.seeds?.planet_seed)+9e3);if(S){const s={id:`effect_${this.nextId++}`,type:"icy_features",effect:S,priority:6,enabled:!0,name:"Snow Patches & Ice"};this.effects.set(s.id,s),c.push(s),S.addToScene(n,o.position),console.log("❄️ Sparse ice features added to Tundra planet")}if(r.clouds&&r.clouds.length>0){const s=h(t,r,(e.seeds?.shape_seed||e.seeds?.planet_seed)+4e3),a={id:`effect_${this.nextId++}`,type:"atmosphere_clouds",effect:s,priority:15,enabled:!0,name:"Atmospheric Clouds"};this.effects.set(a.id,a),c.push(a),s.addToScene(n,o.position),console.log("☁️ Atmospheric clouds added to Tundra planet")}const w=z(t,r,(e.seeds?.shape_seed||e.seeds?.planet_seed)+15e3);if(w){const s={id:`effect_${this.nextId++}`,type:"tundra_snowflakes",effect:w,priority:20,enabled:!0,name:"Snowflakes"};this.effects.set(s.id,s),c.push(s),w.addToScene(n,o.position),console.log("❄️ Tundra snowflakes added to Tundra planet")}break;case"arid":console.log("🏜️ Processing Arid planet - adding atmospheric clouds and land masses");let F;if(r.clouds&&r.clouds.length>0?F=h(t,r,(e.seeds?.shape_seed||e.seeds?.planet_seed)+4e3):F=new q(t,{color:new ze(.9,.8,.7),cloudCount:20,size:4.2,opacity:.7,density:1.2,seed:(e.seeds?.shape_seed||e.seeds?.planet_seed)+4e3,rotationSpeed:.004,movementAmplitude:.012,puffiness:1.3,timeSpeed:1}),F){const s={id:`effect_${this.nextId++}`,type:"atmosphere_clouds",effect:F,priority:15,enabled:!0,name:"Atmospheric Clouds"};this.effects.set(s.id,s),c.push(s),F.addToScene(n,o.position),console.log("☁️ Atmospheric Clouds added to Arid planet")}let T;if(r.green_patches&&r.green_patches.length>0){const s={...r,green_patches:r.green_patches.map(a=>({...a,color:[.5,0,0,a.color?.[3]||1]}))};T=I(t,s,(e.seeds?.shape_seed||e.seeds?.planet_seed)+6e3)}else T=new W(t,{seed:(e.seeds?.shape_seed||e.seeds?.planet_seed)+6e3,greenPatches:Array.from({length:25},(s,a)=>{const l=(e.seeds?.shape_seed||e.seeds?.planet_seed)+6e3+a*100,i=Math.sin(l)*.5+.5,f=Math.acos(1-2*(a+i)/25),m=2*Math.PI*(a*2.399%1);let g;return a<8?g=.25+i*.25:a<16?g=.15+i*.15:g=.08+i*.12,{position_3d:[Math.sin(f)*Math.cos(m),Math.sin(f)*Math.sin(m),Math.cos(f)],size:g,sides:12+Math.floor(i*16),color:[.5,0,0,.7+i*.2]}})});if(T){const s={id:`effect_${this.nextId++}`,type:"land_masses",effect:T,priority:5,enabled:!0,name:"Arid Terrain"};this.effects.set(s.id,s),c.push(s),T.addToScene(n,o.position),console.log("🏜️ Arid terrain (LandMasses with dark reddish color) added to Arid planet")}const A=B(t,r,e.seeds?.shape_seed||e.seeds?.planet_seed);if(A){const s={id:`effect_${this.nextId++}`,type:"river_lines",effect:A,priority:6,enabled:!0,name:"Dried River Channels"};this.effects.set(s.id,s),c.push(s),A.addToScene(n,o.position),console.log("🏜️ Dried river channels added to Arid planet")}break;case"molten_core":case"molten core":console.log("🌋 Processing Molten Core planet - adding lava effects");const k=R(this.layerSystem,e);if(k){const s={id:`effect_${this.nextId++}`,type:"molten_lava",effect:k,priority:2,enabled:!0,name:"Molten Lava Surface"};this.effects.set(s.id,s),c.push(s),console.log("🌋 Molten Lava surface layer added for Molten Core planet")}const C=Z(t,r,(e.seeds?.planet_seed||e.seeds?.shape_seed)+9e3);if(C){const s={id:`effect_${this.nextId++}`,type:"lava_flows",effect:C,priority:4,enabled:!0,name:"Lava Flows & Fire Whips"};this.effects.set(s.id,s),c.push(s),C.addToScene(n,o.position),console.log("🔥 Lava Flows (fire whips) added to Molten Core planet")}const L=this.createEffectFromPythonData("fire_eruption",e,t,o)?.effect;if(L){const s={id:`effect_${this.nextId++}`,type:"fire_eruption",effect:L,priority:15,enabled:!0,name:"Fire Eruptions"};this.effects.set(s.id,s),c.push(s),L.addToScene(n,o.position),console.log("🔥 Fire Eruptions added to Molten Core planet")}if(r.green_patches&&r.green_patches.length>0){const s={...r,green_patches:r.green_patches.map(l=>({...l,color:[1,.55,0,l.color?.[3]||.9]}))},a=I(t,s,(e.seeds?.planet_seed||e.seeds?.shape_seed)+1e4);if(a){const l={id:`effect_${this.nextId++}`,type:"land_masses",effect:a,priority:3,enabled:!0,name:"Incandescent Land Masses"};this.effects.set(l.id,l),c.push(l),a.addToScene(n,o.position),console.log("🌋 Incandescent Land Masses added to Molten Core planet")}}if(r.clouds&&r.clouds.length>0){const s=h(t,r,(e.seeds?.planet_seed||e.seeds?.shape_seed)+4e3),a={id:`effect_${this.nextId++}`,type:"atmosphere_clouds",effect:s,priority:15,enabled:!0,name:"Molten Atmospheric Clouds"};this.effects.set(a.id,a),c.push(a),s.addToScene(n,o.position),console.log("🌫️ Molten Atmospheric Clouds added to Molten Core planet")}break;case"exotic":if(console.log("👽 Processing Exotic planet"),r.clouds&&r.clouds.length>0){const s=h(t,r,(e.seeds?.shape_seed||e.seeds?.planet_seed)+4e3),a={id:`effect_${this.nextId++}`,type:"atmosphere_clouds",effect:s,priority:15,enabled:!0,name:"Exotic Atmospheric Clouds"};this.effects.set(a.id,a),c.push(a),s.addToScene(n,o.position),console.log("☁️ Exotic Atmospheric Clouds added")}const M=j(t,r,(e.seeds?.shape_seed||e.seeds?.planet_seed)+5e3,d);if(M){const s={id:`effect_${this.nextId++}`,type:"exotic_geometric_shapes",effect:M,priority:10,enabled:!0,name:"Exotic Geometric Shapes"};this.effects.set(s.id,s),c.push(s),M.addToScene(n,o.position),console.log("🔷 Exotic Geometric Shapes added")}const v=H(t,r,(e.seeds?.shape_seed||e.seeds?.planet_seed)+6e3);if(v){const s={id:`effect_${this.nextId++}`,type:"exotic_doodles",effect:v,priority:12,enabled:!0,name:"Exotic Doodles"};this.effects.set(s.id,s),c.push(s),v.addToScene(n,o.position),console.log("🎨 Exotic Doodles added")}break;case"anomaly":console.log("🌌 DETECTED ANOMALY PLANET - Creating effects"),console.log("🌌 Planet data:",{surfaceType:r.type,planetType:e.planet_info?.type}),console.log("🎭 SHOWCASE MODE: Activating ALL anomaly effects for evaluation");const G=["anomaly_phase_matter","pulsating_cube","planet_rays"],te=e.seeds?.planet_seed||Math.floor(Math.random()*1e6),se=G.length;for(let s=0;s<se;s++){const a=G[s],l=te+s*1e4,i=this.createEffectFromPythonData(a,{...e,seeds:{...e.seeds,planet_seed:l}},t,o,10+s);i&&(i.name=a.replace(/_/g," ").replace(/\b\w/g,f=>f.toUpperCase()),c.push(i),i.effect.addToScene&&i.effect.addToScene(n,o.position),console.log(`🎭 Added anomaly effect: ${i.name}`))}if(e.atmosphere&&e.atmosphere.type!=="None"){const s=this.createEffectFromPythonData("atmosphere",e.atmosphere,t,o,5);s&&(c.push(s),s.effect.addToScene(n,o.position),console.log("🌫️ Anomalous atmosphere added"))}break;default:if(e.planet_info?.type?.toLowerCase()==="anomaly"){console.log("🌌 DETECTED ANOMALY PLANET via planet_info.type - Creating effects"),console.log("🎭 SHOWCASE MODE (alt detection): Activating ALL anomaly effects for evaluation");const a=["anomaly_phase_matter","pulsating_cube","planet_rays"],l=e.seeds?.planet_seed||Math.floor(Math.random()*1e6),i=a.length;for(let f=0;f<i;f++){const m=a[f],g=l+f*1e4,b=this.createEffectFromPythonData(m,{...e,seeds:{...e.seeds,planet_seed:g}},t,o,10+f);b&&(b.name=m.replace(/_/g," ").replace(/\b\w/g,re=>re.toUpperCase()),c.push(b),b.effect.addToScene&&b.effect.addToScene(n,o.position),console.log(`🎭 Added anomaly effect: ${b.name}`))}if(e.atmosphere&&e.atmosphere.type!=="None"){const f=this.createEffectFromPythonData("atmosphere",e.atmosphere,t,o,5);f&&(c.push(f),f.effect.addToScene(n,o.position),console.log("🌫️ Anomalous atmosphere added"))}}else if(o.material instanceof D){const s=x(e);o.material.color.copy(s)}break}}else if(o.material instanceof D){const r=x(e);o.material.color.copy(r)}const _=e.planet_info?.type?.toLowerCase()||e.surface_elements?.type?.toLowerCase(),ee=_==="anomaly"||e.surface_elements?.type==="anomaly";if(e.atmosphere&&!ee){if(e.atmosphere.streaks||["Gas Giant","Frozen Gas Giant"].includes(e.planet_info?.type)){const r=O(t,e.atmosphere||{},e.seeds?.shape_seed+2e3);if(r){const p={id:`effect_${this.nextId++}`,type:"atmosphere_glow",effect:r,priority:20,enabled:!0};this.effects.set(p.id,p),c.push(p),r.addToScene(n,o.position)}}if(e.atmosphere.type&&e.atmosphere.type!=="None"){const r={...e.atmosphere};_==="oceanic"&&(r.opacity=Math.min(r.opacity||.3,.15),r.width=Math.min(r.width||15,8));const p=this.createEffectFromPythonData("atmosphere",r,t,o,5);p&&(c.push(p),p.effect.addToScene(n,o.position))}}if(e.rings&&e.rings.has_rings||["Gas Giant","Frozen Gas Giant","Super Earth"].includes(e.planet_info?.type)){const r=this.createEffectFromPythonData("ring_system",e,t,o,1);r?(c.push(r),r.effect.addToScene(n,o.position)):console.warn("⚠️ Failed to create ring effect")}if(e.surface_elements?.has_fragmentation_zones){const r=this.createEffectFromPythonData("fragmentation",e,t,o,5);r&&(c.push(r),r.effect.addToScene(n,o.position))}this.layerSystem&&this.layerSystem.addToScene(n);try{const r=this.createEffectFromPythonData("star_field",e,t,o,-100);r&&r.effect&&(r.effect.addToScene(n,o.position),c.push(r))}catch(r){console.warn("Could not create StarField:",r)}return c.forEach((r,p)=>{}),c.length===0&&console.warn("⚠️ NO EFFECTS WERE CREATED! Check the data structure and conditions."),c}catch(d){throw console.error("Error in EffectRegistry.createEffectsFromPythonPlanetData:",d),d}}getEffect(e){return this.effects.get(e)||null}getEffectsByType(e){return Array.from(this.effects.values()).filter(t=>t.type===e)}getAllEffects(){return Array.from(this.effects.values())}toggleEffect(e,t){const o=this.effects.get(e);if(o){o.enabled=t!==void 0?t:!o.enabled;const n=o.effect;if(n&&n.getObject3D){const u=n.getObject3D();u&&(u.visible=o.enabled,console.log(`🎮 Toggle effect ${o.type}: visible = ${o.enabled}`))}if(this.layerSystem){const u=this.layerSystem.getLayerMeshes(),d={cloud_bands_layer:"cloudBands",cloud_gyros_layer:"cloudGyros",metallic_surface_layer:"metallicSurface",diamond_surface_layer:"diamondSurface",rocky_terrain_layer:"rockyTerrain",icy_terrain_layer:"icyTerrain",aquifer_water:"aquiferWater",ocean_currents:"oceanCurrents",molten_lava:"moltenLava"}[o.type];d&&u[d]&&(u[d].visible=o.enabled)}}else console.warn(`⚠️ Effect not found: ${e}`)}updateAllEffects(e,t){this.layerSystem&&this.layerSystem.update(e,t);for(const o of this.effects.values())if(o.enabled&&o.effect.update)try{o.effect.update(e,t)}catch(n){console.error(`Error updating effect ${o.type}:`,n)}}updateLightForAllEffects(e){this.layerSystem&&this.layerSystem.updateFromThreeLight(e);for(const t of this.effects.values())if(t.enabled&&t.effect.updateFromThreeLight)try{t.effect.updateFromThreeLight(e)}catch(o){console.error(`Error updating light for effect ${t.type}:`,o)}}removeEffect(e){const t=this.effects.get(e);t&&(t.effect.dispose&&t.effect.dispose(),this.effects.delete(e))}clearAllEffects(){this.layerSystem&&(this.layerSystem.dispose(),this.layerSystem=void 0);for(const e of this.effects.values())e.effect.dispose&&e.effect.dispose();this.effects.clear(),this.nextId=1}getStats(){const e=Array.from(this.effects.values());return{registeredTypes:this.creators.size,activeEffects:e.length,enabledEffects:e.filter(t=>t.enabled).length}}getAvailableEffectTypes(){return Array.from(this.creators.keys())}}const bt=P.getInstance();export{bt as e};
