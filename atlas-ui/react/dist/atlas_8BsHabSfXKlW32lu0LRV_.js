import{S as R,D as _,g as P}from"./atlas_BCLm0rswpwHY6zwJL8hnM.js";import{C as d,G as U,V as f,B as H,a as T,S as N,N as V,P as X,Q as B}from"./atlas_CLp6T-BwF8hBVTNM0OiQd.js";const o={TRAIL_COUNT:{min:8,max:15},EMISSION_FREQUENCY:{min:.3,max:1.2},TRAIL_HEIGHT:{min:.3,max:.8},TRAIL_SPREAD:{min:.4,max:1.4},PARTICLES_PER_TRAIL:{min:20,max:40},PARTICLE_SIZE:{min:.08,max:.22},PARTICLE_LIFETIME:{min:1.5,max:5},PARTICLE_SPEED:{min:.08,max:.35},PARTICLE_DRAG:{min:.85,max:.98},ATMOSPHERE_HEIGHT:{min:4,max:10},OPACITY:{min:.15,max:.45},TURBULENCE:{min:.3,max:1.8},WIND_STRENGTH:{min:.05,max:.25}};class Y{position;direction;lastEmissionTime=0;isActive=!1;rng;particleDirections=[];particleSpeeds=[];particleSizes=[];particleLifetimes=[];particleBirthTimes=[];particleActive=[];constructor(e,t,a,i,s,l,r,n){this.position=e,this.direction=e.clone().normalize(),this.rng=new R(t);for(let c=0;c<a;c++)this.particleDirections.push(this.getRandomDirection(i)),this.particleSpeeds.push(s*(.6+this.rng.random()*.8)),this.particleSizes.push(l*n*(.7+this.rng.random()*.6)),this.particleLifetimes.push(r*(.8+this.rng.random()*.4)),this.particleBirthTimes.push(-1),this.particleActive.push(!1)}initializeStateFromAbsoluteTime(e,t,a){const i=1/t,s=a*.618%1;this.lastEmissionTime=e-s*i;const l=Math.min(10,this.particleLifetimes.length);for(let r=0;r<l;r++){const n=this.lastEmissionTime-r*i,c=e-n;c>=0&&c<this.particleLifetimes[r]&&(this.particleActive[r]=!0,this.particleBirthTimes[r]=n)}this.isActive=!0}shouldEmit(e,t){return e-this.lastEmissionTime>=1/t}startEmission(e){this.lastEmissionTime=e,this.isActive=!0}getRandomDirection(e){const t=this.rng.uniform(0,Math.PI*2),a=this.rng.uniform(0,e*.7),i=.3,s=a*(1-i),l=new f(Math.sin(s)*Math.cos(t),Math.sin(s)*Math.sin(t),Math.cos(s)+i).normalize(),r=new B;return r.setFromUnitVectors(new f(0,0,1),this.direction),l.applyQuaternion(r),l}}class y{trailGroup;trails=[];particleSystem;particleGeometry;particleMaterial;params;startTime;planetRadius;maxParticles=1200;orbitalVisibilityFactor;static vertexShader=`
    attribute float size;
    attribute float opacity;
    attribute float atmosphereFade;
    
    varying float vOpacity;
    varying float vAtmosphereFade;
    
    void main() {
      vOpacity = opacity;
      vAtmosphereFade = atmosphereFade;
      
      vec4 mvPosition = modelViewMatrix * vec4(position, 1.0);
      gl_PointSize = size * (300.0 / -mvPosition.z);
      gl_Position = projectionMatrix * mvPosition;
    }
  `;static fragmentShader=`
    uniform vec3 baseColor;
    uniform vec3 atmosphereColor;
    uniform float globalOpacity;
    
    varying float vOpacity;
    varying float vAtmosphereFade;
    
    void main() {
      vec2 center = gl_PointCoord - vec2(0.5);
      float dist = length(center);
      
      float alpha = 1.0 - smoothstep(0.1, 0.5, dist);
      alpha *= vOpacity * globalOpacity;
      
      if (alpha < 0.02) discard;
      
      vec3 color = mix(baseColor, atmosphereColor, vAtmosphereFade);
      
      gl_FragColor = vec4(color, alpha);
    }
  `;constructor(e,t={}){this.planetRadius=e;const a=t.seed||Math.floor(Math.random()*1e6),i=new R(a);this.startTime=t.startTime||a%1e4/1e3;const s=t.baseColor instanceof d?t.baseColor:new d(.25,.25,.28),l=t.atmosphereColor instanceof d?t.atmosphereColor:new d(.35,.35,.38);this.params={trailCount:t.trailCount||Math.floor(i.uniform(o.TRAIL_COUNT.min,o.TRAIL_COUNT.max)),emissionFrequency:t.emissionFrequency||i.uniform(o.EMISSION_FREQUENCY.min,o.EMISSION_FREQUENCY.max),trailHeight:t.trailHeight||i.uniform(o.TRAIL_HEIGHT.min,o.TRAIL_HEIGHT.max),trailSpread:t.trailSpread||i.uniform(o.TRAIL_SPREAD.min,o.TRAIL_SPREAD.max),particlesPerTrail:t.particlesPerTrail||Math.floor(i.uniform(o.PARTICLES_PER_TRAIL.min,o.PARTICLES_PER_TRAIL.max)),particleSize:t.particleSize||i.uniform(o.PARTICLE_SIZE.min,o.PARTICLE_SIZE.max),particleLifetime:t.particleLifetime||i.uniform(o.PARTICLE_LIFETIME.min,o.PARTICLE_LIFETIME.max),particleSpeed:t.particleSpeed||i.uniform(o.PARTICLE_SPEED.min,o.PARTICLE_SPEED.max),particleDrag:t.particleDrag||i.uniform(o.PARTICLE_DRAG.min,o.PARTICLE_DRAG.max),baseColor:s,atmosphereColor:l,opacity:t.opacity||i.uniform(o.OPACITY.min,o.OPACITY.max),atmosphereHeight:t.atmosphereHeight||i.uniform(o.ATMOSPHERE_HEIGHT.min,o.ATMOSPHERE_HEIGHT.max),fadeDistance:t.fadeDistance||i.uniform(.3,.8),turbulenceStrength:t.turbulenceStrength||i.uniform(o.TURBULENCE.min,o.TURBULENCE.max),windStrength:t.windStrength||i.uniform(o.WIND_STRENGTH.min,o.WIND_STRENGTH.max),seed:a,startTime:this.startTime,timeSpeed:t.timeSpeed||i.uniform(.3,1.5),orbitalData:t.orbitalData,currentTime:t.currentTime||0,planetTemperature:t.planetTemperature||0},this.orbitalVisibilityFactor=this.calculateOrbitalVisibility(),this.trailGroup=new U,this.createTrailPoints(i),this.initializeStateFromAbsoluteTime(),this.createParticleSystem(),this.initializeActiveTrails();const r=this.params.cosmicOriginTime||_,n=P(r,this.params.timeSpeed,this.startTime);this.updateParticleGeometry(n)}initializeStateFromAbsoluteTime(){const e=this.params.cosmicOriginTime||_,t=P(e,this.params.timeSpeed,this.startTime);for(let a=0;a<this.trails.length;a++)this.trails[a].initializeStateFromAbsoluteTime(t,this.params.emissionFrequency,a)}createTrailPoints(e){const t=this.params.trailCount;for(let a=0;a<t;a++){const i=e.uniform(0,Math.PI*2),s=Math.acos(e.uniform(-1,1)),l=new f(Math.sin(s)*Math.cos(i)*this.planetRadius,Math.sin(s)*Math.sin(i)*this.planetRadius,Math.cos(s)*this.planetRadius),r=new Y(l,Math.floor(e.random()*1e6),this.params.particlesPerTrail,this.params.trailSpread,this.params.particleSpeed,this.params.particleSize,this.params.particleLifetime,this.planetRadius);r.isActive=!0,r.lastEmissionTime=-10,this.trails.push(r)}}createParticleSystem(){this.particleGeometry=new H;const e=new Float32Array(this.maxParticles*3),t=new Float32Array(this.maxParticles),a=new Float32Array(this.maxParticles),i=new Float32Array(this.maxParticles);this.particleGeometry.setAttribute("position",new T(e,3)),this.particleGeometry.setAttribute("size",new T(t,1)),this.particleGeometry.setAttribute("opacity",new T(a,1)),this.particleGeometry.setAttribute("atmosphereFade",new T(i,1)),this.particleMaterial=new N({vertexShader:y.vertexShader,fragmentShader:y.fragmentShader,uniforms:{baseColor:{value:this.params.baseColor},atmosphereColor:{value:this.params.atmosphereColor},globalOpacity:{value:this.params.opacity}},transparent:!0,blending:V,depthWrite:!1,vertexColors:!1}),this.particleSystem=new X(this.particleGeometry,this.particleMaterial),this.particleSystem.renderOrder=10,this.trailGroup.add(this.particleSystem)}initializeActiveTrails(){}calculateOrbitalVisibility(){if(!this.params.orbitalData||!this.params.orbitalData.enabled)return 1;const e=this.params.cosmicOriginTime||51408e4,i=(Date.now()/1e3-e)/(365.25*24*3600)%this.params.orbitalData.cycle_duration_years/this.params.orbitalData.cycle_duration_years,s=this.params.orbitalData.visible_duration_years/this.params.orbitalData.cycle_duration_years,l=i<=s;let r=0;if(l){const n=i/s;n<.15?r=n/.15:n>.85?r=(1-n)/.15:r=1}return r}updateParticleGeometry(e){const t=this.particleGeometry.attributes.position,a=this.particleGeometry.attributes.size,i=this.particleGeometry.attributes.opacity,s=this.particleGeometry.attributes.atmosphereFade;let l=0;const r=this.planetRadius*this.params.atmosphereHeight;for(let n=0;n<this.trails.length;n++){const c=this.trails[n];for(let m=0;m<this.params.particlesPerTrail&&l<this.maxParticles;m++){const C=m/this.params.particlesPerTrail*.8,v=n*.5%2,x=e+v-C,u=Math.abs(x%c.particleLifetimes[m]);if(u>=0&&u<c.particleLifetimes[m]){const S=c.particleDirections[m].clone();let g=c.particleSpeeds[m];g*=Math.pow(this.params.particleDrag,u);const M=g*u;let h=c.position.clone().add(S.multiplyScalar(M));const L=.1*u;h.y+=L;const G=u*.08,F=new f(S.x,0,S.z).normalize();h.add(F.multiplyScalar(G));const E=this.params.turbulenceStrength*.08,b=e*2+m*.3;if(h.x+=Math.sin(b)*E,h.y+=Math.cos(b*.7)*E*.8,h.z+=Math.sin(b*1.4)*E,h.length()>r)continue;const A=u/c.particleLifetimes[m],O=this.smoothstep(0,.1,A),D=this.smoothstep(1,.7,A),I=O*D;let w=0;const z=c.particleSizes[m]*(1-A*.2);I>.01&&(t.setXYZ(l,h.x,h.y,h.z),a.setX(l,z),i.setX(l,I),s.setX(l,w),l++)}}}for(let n=l;n<this.maxParticles;n++)t.setXYZ(n,0,0,0),a.setX(n,0),i.setX(n,0),s.setX(n,0);t.needsUpdate=!0,a.needsUpdate=!0,i.needsUpdate=!0,s.needsUpdate=!0,this.particleGeometry.setDrawRange(0,l)}smoothstep(e,t,a){const i=Math.max(0,Math.min(1,(a-e)/(t-e)));return i*i*(3-2*i)}update(e){const t=this.params.cosmicOriginTime||_,a=P(t,this.params.timeSpeed,this.startTime);if(this.orbitalVisibilityFactor=this.calculateOrbitalVisibility(),this.orbitalVisibilityFactor>0){if(this.updateParticleGeometry(a),this.particleMaterial&&this.particleMaterial.uniforms){const i=this.params.opacity||1;this.particleMaterial.uniforms.globalOpacity.value=i*this.orbitalVisibilityFactor}}else this.hideAllParticles()}hideAllParticles(){const e=this.particleGeometry.attributes.position,t=this.particleGeometry.attributes.size,a=this.particleGeometry.attributes.opacity,i=this.particleGeometry.attributes.atmosphereFade;for(let s=0;s<this.maxParticles;s++)e.setXYZ(s,0,0,0),t.setX(s,0),a.setX(s,0),i.setX(s,0);e.needsUpdate=!0,t.needsUpdate=!0,a.needsUpdate=!0,i.needsUpdate=!0,this.particleGeometry.setDrawRange(0,0)}addToScene(e,t){t&&this.trailGroup.position.copy(t),e.add(this.trailGroup)}getObject3D(){return this.trailGroup}dispose(){this.particleGeometry.dispose(),this.particleMaterial.dispose(),this.trailGroup.clear(),this.trails=[]}}function W(p,e,t){const a=p?.surface_elements?.carbon_trails_data;if(!a?.enabled)return null;const i=p?.seeds?.planet_seed||Math.floor(Math.random()*1e6),s=p?.original_planet_data?.surface_temperature||0,l=p?.timing?.elapsed_time?p.timing.elapsed_time/(365.25*24*3600):0,r={enabled:!0,cycle_duration_years:a.cycle_duration_years,visible_duration_years:a.visible_duration_years},n={seed:i+11e3,planetTemperature:s,orbitalData:r,currentTime:l,cosmicOriginTime:p?.timing?.cosmic_origin_time};return new y(e,n)}export{y as C,W as c};
