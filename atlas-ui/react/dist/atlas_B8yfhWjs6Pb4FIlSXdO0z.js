import{c as Q,R as X}from"./atlas_bp4QKZBDxvNtcCXK80v43.js";import{c as M,A as Z,a as g,b as k,d as R,e as D}from"./atlas_D0_HKSwe01y3MIlgnY89z.js";import{c as A,L as $,a as ee}from"./atlas_zAjcSntIfeos_61tDP8gI.js";import{c as v}from"./atlas_AY7rlEqGy4LS6Ya1dlGVA.js";import{c as O,T as te}from"./atlas_B8AqTg3tSNem1fB4apC0B.js";import{c as G,R as se}from"./atlas_BJs4_fvWWco6KVzkM7LBm.js";import{c as re,A as ae}from"./atlas_CMUvaCD4mo7XQYkYXSJfw.js";import{P as ce,c as oe}from"./atlas_VOH_aZaK8QZhfyJlIm9Ly.js";import{g as w,c as ne,P as fe}from"./atlas_xd5LNBgcOa5CzFEgor2Hm.js";import{P as ie}from"./atlas_CrrnNFt-F18X-S2bln2ih.js";import{c as q}from"./atlas_G5tdEP2OrMSd6N6qvkFcr.js";import{c as W}from"./atlas_DHZeGIjNF73GHEmrQp6nE.js";import{c as de}from"./atlas_CVfcEBkKTTMs_3IaCRzRE.js";import{c as le}from"./atlas_BvazszwIVtr42ZYiFginB.js";import{c as me}from"./atlas_BL2ZOBI-zhTUiijzsY4Dk.js";import{c as pe}from"./atlas_DUYf4MwmvA5BreW6-W9PK.js";import{c as N,D as ue}from"./atlas_CEFUnxLH33lPX0GW1HS64.js";import{c as z,A as he}from"./atlas_B9yZ95D5a3z7xtI3RCRwn.js";import{c as _e,S as ye}from"./atlas_9iD_ehnhYK2LwZq_RAjB_.js";import{P as C}from"./atlas_CmYGdDkCK2sCRU_Obg1H6.js";import{F as B}from"./atlas_B4KeL5UEbd9M40Y_sMAYc.js";import{c as ge,O as Ee}from"./atlas_BzK4Az4Fofiamef8c-xL9.js";import{c as U,F as Se}from"./atlas__Fz15fTifKAuXwoa0MSvM.js";import{c as Y,A as be}from"./atlas_DgekZc0a5GT7ev-77mP9J.js";import{c as Ie}from"./atlas_BsdvMvzVSoYT-ce7kwn7V.js";import{c as Pe,V as Te}from"./atlas_DXCbdwWBtFNPjiqZ_8vQw.js";import{g as V,C as Ae}from"./atlas_Ce3hh0hgxYWauQ_qSK6cl.js";const we=!1;class I{static instance;creators=new Map;effects=new Map;nextId=1;layerSystem;constructor(){this.registerDefaultEffects()}static getInstance(){return I.instance||(I.instance=new I),I.instance}registerDefaultEffects(){this.registerEffect("atmosphere_glow",{create:(e,t)=>new Z(t,e),fromPythonData:(e,t)=>M(t,e.atmosphere||{})}),this.registerEffect("atmosphere_clouds",{create:(e,t)=>new k(t,e),fromPythonData:(e,t)=>g(t,e.surface_elements||{})}),this.registerEffect("atmospheric_streaks",{create:(e,t)=>new he(t,e),fromPythonData:(e,t)=>z(t,e.atmosphere||{})}),this.registerEffect("atmosphere",{create:(e,t)=>new D(t,e),fromPythonData:(e,t)=>R(t,e)}),this.registerEffect("ring_system",{create:(e,t)=>new X(t,e),fromPythonData:(e,t)=>Q(e.rings||{},t)}),this.registerEffect("fragmentation",{create:(e,t)=>new B(t,e),fromPythonData:(e,t)=>new B(t,{color:e.surface?.fragment_color||[.3,.3,.3],fragmentCount:e.surface?.fragment_count||20})}),this.registerEffect("land_masses",{create:(e,t)=>new $(t,e),fromPythonData:(e,t)=>A(t,e.surface_elements||{},e.seeds?.planet_seed)}),this.registerEffect("ocean_waves",{create:(e,t)=>new Ee(e),fromPythonData:(e,t)=>ge(e)}),this.registerEffect("aquifer_water",{create:(e,t,a)=>new be(a,e),fromPythonData:(e,t,a)=>Y(a,e)}),this.registerEffect("fluid_layers",{create:(e,t)=>new Se(t,e),fromPythonData:(e,t)=>U(t,e)}),this.registerEffect("lava_flows",{create:(e,t)=>(console.warn("Lava flows effect not implemented yet"),null)}),this.registerEffect("crystal_formations",{create:(e,t)=>(console.warn("Crystal formations effect not implemented yet"),null)}),this.registerEffect("star_field",{create:(e,t)=>new ye(t,e),fromPythonData:(e,t)=>_e(t,e.seeds?.planet_seed||e.planet_seed)}),this.registerEffect("tundra_snowflakes",{create:(e,t)=>new te(t,e),fromPythonData:(e,t)=>O(t,e.surface_elements||{},e.seeds?.planet_seed)}),this.registerEffect("river_lines",{create:(e,t)=>new se(t,e),fromPythonData:(e,t)=>G(t,e.surface_elements||{},e.seeds?.planet_seed)}),this.registerEffect("anomaly_phase_matter",{create:(e,t)=>new ae(t,e),fromPythonData:(e,t)=>re(t,e.surface_elements||{},e.seeds?.planet_seed)}),this.registerEffect("pulsating_cube",{create:(e,t)=>new ce(t,e),fromPythonData:(e,t)=>{const a=w(e);return oe(t,e.surface_elements||{},e.seeds?.planet_seed,a,e)}}),this.registerEffect("planet_rays",{create:(e,t)=>new fe(t,e),fromPythonData:(e,t)=>ne(t,e.surface_elements||{},e.seeds?.planet_seed)}),this.registerEffect("visual_debug_3d",{create:(e,t)=>new Te(t,e),fromPythonData:(e,t)=>Pe(e,t)}),this.registerEffect("diamond_cracks",{create:(e,t)=>new ue({...e,radius:t}),fromPythonData:(e,t)=>N(e,t,e.seeds?.shape_seed||e.seeds?.planet_seed)})}registerEffect(e,t){this.creators.set(e,t)}createEffect(e,t,a,n,u=0){const o=this.creators.get(e);if(!o)return console.warn(`Effect type '${e}' not registered`),null;try{const d=o.create(t,a,this.layerSystem);if(!d)return null;const h={id:`effect_${this.nextId++}`,type:e,effect:d,priority:u,enabled:!0};return this.effects.set(h.id,h),h}catch(d){return console.error(`Error creating effect '${e}':`,d),null}}createEffectFromPythonData(e,t,a,n,u=0){const o=this.creators.get(e);if(!o||!o.fromPythonData)return this.createEffect(e,t,a,n,u);try{const d=o.fromPythonData(t,a,this.layerSystem);if(!d)return null;const h={id:`effect_${this.nextId++}`,type:e,effect:d,priority:u,enabled:!0};return this.effects.set(h.id,h),h}catch(d){return console.error(`Error creating effect '${e}' from Python data:`,d),null}}createEffectsFromList(e,t,a){const n=[],u=e.sort((o,d)=>(o.priority||0)-(d.priority||0));for(const o of u){const d=this.createEffect(o.type,o.params,t,a,o.priority);d&&(d.enabled=o.enabled!==!1,n.push(d))}return n}createEffectsFromPythonPlanetData(e,t,a,n,u){const o=[];try{const d=w(e);if(u?this.layerSystem=u:this.layerSystem=new ie(a,d),e.surface_elements){const s=e.surface_elements;if(s.effects_3d&&Array.isArray(s.effects_3d))for(const m of s.effects_3d){if(m.type==="atmospheric_streaks"){const E=z(t,m.params,e.seeds?.shape_seed+3e3),S={id:`effect_${this.nextId++}`,type:"atmospheric_streaks",effect:E,priority:m.priority||0,enabled:!0,name:"Atmospheric Streaks"};this.effects.set(S.id,S),o.push(S),E.addToScene(n,a.position);continue}const _=this.createEffect(m.type,m.params,t,a,m.priority||0);_?(_.name=m.type.replace(/_/g," ").replace(/\b\w/g,E=>E.toUpperCase()),o.push(_),_.effect.apply&&_.effect.apply(a),_.effect.addToScene&&_.effect.addToScene(n,a.position)):console.error("❌ FALLO AL CREAR EFECTO:",m.type)}switch(s.type.toLowerCase()){case"gas_giant":if(this.layerSystem){const r=q(this.layerSystem,{...s,base_color:d,turbulence:e.turbulence||s.turbulence},e.seeds?.shape_seed||e.seeds?.planet_seed||e.seeds?.planet_seed),c=W(this.layerSystem,{...s,base_color:d,storm_intensity:e.storm_intensity||s.storm_intensity},(e.seeds?.shape_seed||e.seeds?.planet_seed)+1e3),l={id:`effect_${this.nextId++}`,type:"cloud_bands_layer",effect:r,priority:0,enabled:!0};this.effects.set(l.id,l),o.push(l);const i={id:`effect_${this.nextId++}`,type:"cloud_gyros_layer",effect:c,priority:1,enabled:!0};if(this.effects.set(i.id,i),o.push(i),s.polar_hexagon&&s.polar_hexagon.enabled){const f=e.timing?.elapsed_time?e.timing.elapsed_time/31557600:0,p=new C({planetColor:d,hexagonData:s.polar_hexagon,planetRadius:t,currentTime:f}),y={id:`effect_${this.nextId++}`,type:"polar_hexagon",effect:p,priority:10,enabled:!0};this.effects.set(y.id,y),o.push(y),n&&p.addToScene(n)}}else console.error("❌ PlanetLayerSystem not initialized!");break;case"frozen_gas_giant":if(this.layerSystem){const r=q(this.layerSystem,{...s,base_color:d,turbulence:e.turbulence||s.turbulence,icy_tint:!0},e.seeds?.shape_seed||e.seeds?.planet_seed),c={id:`effect_${this.nextId++}`,type:"cloud_bands_layer",effect:r,priority:0,enabled:!0};if(this.effects.set(c.id,c),o.push(c),s.polar_hexagon&&s.polar_hexagon.enabled){const l=e.timing?.elapsed_time?e.timing.elapsed_time/31557600:0,i=new C({planetColor:d,hexagonData:s.polar_hexagon,planetRadius:t,currentTime:l}),f={id:`effect_${this.nextId++}`,type:"polar_hexagon",effect:i,priority:10,enabled:!0};this.effects.set(f.id,f),o.push(f),n&&i.addToScene(n)}}break;case"aquifer":console.log("🌊 Processing Aquifer planet with surface data:",s),console.log("🌊 Surface.clouds:",s.clouds);const m=Y(this.layerSystem,e);if(m){const r={id:`effect_${this.nextId++}`,type:"aquifer_water",effect:m,priority:2,enabled:!0,name:"Aquifer Water Surface"};this.effects.set(r.id,r),o.push(r),console.log("🌊 AquiferWater effect added for aquifer planet")}const _=Ie(this.layerSystem,e);if(_){const r={id:`effect_${this.nextId++}`,type:"ocean_currents",effect:_,priority:1,enabled:!0,name:"Ocean Currents"};this.effects.set(r.id,r),o.push(r),console.log("🌊 Ocean Currents effect added for aquifer planet")}if(s.clouds&&s.clouds.length>0){const r=g(t,s,(e.seeds?.shape_seed||e.seeds?.planet_seed)+4e3),c={id:`effect_${this.nextId++}`,type:"atmosphere_clouds",effect:r,priority:15,enabled:!0,name:"Atmospheric Clouds"};this.effects.set(c.id,c),o.push(c),r.addToScene(n,a.position),console.log("☁️ Atmospheric Clouds added to Aquifer planet")}if(s.land_masses&&s.land_masses.length>0){const r=A(t,s,(e.seeds?.shape_seed||e.seeds?.planet_seed)+7e3);if(r){const c={id:`effect_${this.nextId++}`,type:"land_masses",effect:r,priority:3,enabled:!0,name:"Emergent Land Masses"};this.effects.set(c.id,c),o.push(c),r.addToScene(n,a.position)}}if(s.atmosphere_clouds&&s.atmosphere_clouds.length>0){const r=g(t,s,(e.seeds?.shape_seed||e.seeds?.planet_seed)+8e3);if(r){const c={id:`effect_${this.nextId++}`,type:"atmosphere_clouds",effect:r,priority:4,enabled:!0,name:"Atmospheric Clouds"};this.effects.set(c.id,c),o.push(c),r.addToScene(n,a.position)}}break;case"nebulous":if(this.layerSystem){const r=W(this.layerSystem,{...s,base_color:d,storm_intensity:s.nebula_density||.6,color_variance:s.color_variance||.2},(e.seeds?.shape_seed||e.seeds?.planet_seed)+2e3),c={id:`effect_${this.nextId++}`,type:"cloud_gyros_layer",effect:r,priority:0,enabled:!0};if(this.effects.set(c.id,c),o.push(c),s.polar_hexagon&&s.polar_hexagon.enabled){const l=e.timing?.elapsed_time?e.timing.elapsed_time/31557600:0,i=new C({planetColor:d,hexagonData:s.polar_hexagon,planetRadius:t,currentTime:l}),f={id:`effect_${this.nextId++}`,type:"polar_hexagon",effect:i,priority:10,enabled:!0};this.effects.set(f.id,f),o.push(f),n&&i.addToScene(n)}}break;case"metallic":case"metallic_3d":if(this.layerSystem){const r=me(this.layerSystem,e,e.seeds?.shape_seed||e.seeds?.planet_seed),c={id:`effect_${this.nextId++}`,type:"metallic_surface_layer",effect:r,priority:0,enabled:!0};this.effects.set(c.id,c),o.push(c)}break;case"diamond":if(this.layerSystem){const r=pe(this.layerSystem,e,e.seeds?.shape_seed||e.seeds?.planet_seed),c={id:`effect_${this.nextId++}`,type:"diamond_surface_layer",effect:r,priority:0,enabled:!0};this.effects.set(c.id,c),o.push(c);const l=N(e,t,e.seeds?.shape_seed||e.seeds?.planet_seed),i={id:`effect_${this.nextId++}`,type:"diamond_cracks",effect:l,priority:1,enabled:!0};if(this.effects.set(i.id,i),o.push(i),l.addToScene(n,a.position),s.clouds&&s.clouds.length>0){const f=g(t,s,(e.seeds?.shape_seed||e.seeds?.planet_seed)+4e3),p={id:`effect_${this.nextId++}`,type:"atmosphere_clouds",effect:f,priority:15,enabled:!0,name:"Atmospheric Clouds"};this.effects.set(p.id,p),o.push(p),f.addToScene(n,a.position)}}break;case"rocky":if(this.layerSystem){const r=de(this.layerSystem,e,e.seeds?.shape_seed||e.seeds?.planet_seed),c={id:`effect_${this.nextId++}`,type:"rocky_terrain_layer",effect:r,priority:0,enabled:!0};if(this.effects.set(c.id,c),o.push(c),s.clouds&&s.clouds.length>0){const l=g(t,s,(e.seeds?.shape_seed||e.seeds?.planet_seed)+4e3),i={id:`effect_${this.nextId++}`,type:"atmosphere_clouds",effect:l,priority:15,enabled:!0,name:"Atmospheric Clouds"};this.effects.set(i.id,i),o.push(i),l.addToScene(n,a.position)}}break;case"icy":if(this.layerSystem){const r=le(this.layerSystem,e,e.seeds?.shape_seed||e.seeds?.planet_seed),c={id:`effect_${this.nextId++}`,type:"icy_terrain_layer",effect:r,priority:0,enabled:!0};this.effects.set(c.id,c),o.push(c);const l=ee(t,s,(e.seeds?.shape_seed||e.seeds?.planet_seed)+8e3);if(l){const f={id:`effect_${this.nextId++}`,type:"transparent_land_masses",effect:l,priority:1,enabled:!0,name:"Ice Formations"};this.effects.set(f.id,f),o.push(f),l.addToScene(n,a.position),console.log("🧊 Ice Formations (transparent LandMasses) added to Icy planet")}else console.warn("❄️ Failed to create transparent LandMasses for Icy planet");if(s.clouds&&s.clouds.length>0){const f=g(t,s,(e.seeds?.shape_seed||e.seeds?.planet_seed)+4e3),p={id:`effect_${this.nextId++}`,type:"atmosphere_clouds",effect:f,priority:15,enabled:!0,name:"Atmospheric Clouds"};this.effects.set(p.id,p),o.push(p),f.addToScene(n,a.position),console.log("☁️ Atmospheric Clouds added to Icy planet")}const i=v(t,s,(e.seeds?.shape_seed||e.seeds?.planet_seed)+9e3);if(i){const f={id:`effect_${this.nextId++}`,type:"icy_features",effect:i,priority:2,enabled:!0,name:"Ice Crystals & Features"};this.effects.set(f.id,f),o.push(f),i.addToScene(n,a.position),console.log("❄️ Icy Features (crystals, cracks, ice caps) added to Icy planet")}}break;case"oceanic":const E=U(t,e);if(E){const r={id:`effect_${this.nextId++}`,type:"fluid_layers",effect:E,priority:3,enabled:!0,name:"Fluid Ocean Layers"};this.effects.set(r.id,r),o.push(r),E.addToScene(n,a.position),console.log("🌊 FluidLayers effect added for oceanic planet")}if(s.green_patches&&s.green_patches.length>0){const r=A(t,s,(e.seeds?.shape_seed||e.seeds?.planet_seed)+6e3);if(r){const c={id:`effect_${this.nextId++}`,type:"land_masses",effect:r,priority:5,enabled:!0,name:"Land Masses (Islands)"};this.effects.set(c.id,c),o.push(c),r.addToScene(n,a.position)}}if(s.clouds&&s.clouds.length>0){const r=g(t,s,(e.seeds?.shape_seed||e.seeds?.planet_seed)+4e3),c={id:`effect_${this.nextId++}`,type:"atmosphere_clouds",effect:r,priority:15,enabled:!0,name:"Atmospheric Clouds"};this.effects.set(c.id,c),o.push(c),r.addToScene(n,a.position)}break;case"tundra":if(s.green_patches&&s.green_patches.length>0){const r=A(t,s,(e.seeds?.shape_seed||e.seeds?.planet_seed)+6e3);if(r){const c={id:`effect_${this.nextId++}`,type:"land_masses",effect:r,priority:5,enabled:!0,name:"Tundra Terrain"};this.effects.set(c.id,c),o.push(c),r.addToScene(n,a.position),console.log("🏔️ Tundra terrain (LandMasses) added")}}const S=v(t,s,(e.seeds?.shape_seed||e.seeds?.planet_seed)+9e3);if(S){const r={id:`effect_${this.nextId++}`,type:"icy_features",effect:S,priority:6,enabled:!0,name:"Snow Patches & Ice"};this.effects.set(r.id,r),o.push(r),S.addToScene(n,a.position),console.log("❄️ Sparse ice features added to Tundra planet")}if(s.clouds&&s.clouds.length>0){const r=g(t,s,(e.seeds?.shape_seed||e.seeds?.planet_seed)+4e3),c={id:`effect_${this.nextId++}`,type:"atmosphere_clouds",effect:r,priority:15,enabled:!0,name:"Atmospheric Clouds"};this.effects.set(c.id,c),o.push(c),r.addToScene(n,a.position),console.log("☁️ Atmospheric clouds added to Tundra planet")}const F=O(t,s,(e.seeds?.shape_seed||e.seeds?.planet_seed)+15e3);if(F){const r={id:`effect_${this.nextId++}`,type:"tundra_snowflakes",effect:F,priority:20,enabled:!0,name:"Snowflakes"};this.effects.set(r.id,r),o.push(r),F.addToScene(n,a.position),console.log("❄️ Tundra snowflakes added to Tundra planet")}break;case"arid":console.log("🏜️ Processing Arid planet - adding atmospheric clouds and land masses");let P;if(s.clouds&&s.clouds.length>0?P=g(t,s,(e.seeds?.shape_seed||e.seeds?.planet_seed)+4e3):P=new k(t,{color:new Ae(.9,.8,.7),cloudCount:20,size:4.2,opacity:.7,density:1.2,seed:(e.seeds?.shape_seed||e.seeds?.planet_seed)+4e3,rotationSpeed:.004,movementAmplitude:.012,puffiness:1.3,timeSpeed:1}),P){const r={id:`effect_${this.nextId++}`,type:"atmosphere_clouds",effect:P,priority:15,enabled:!0,name:"Atmospheric Clouds"};this.effects.set(r.id,r),o.push(r),P.addToScene(n,a.position),console.log("☁️ Atmospheric Clouds added to Arid planet")}let T;if(s.green_patches&&s.green_patches.length>0){const r={...s,green_patches:s.green_patches.map(c=>({...c,color:[.5,0,0,c.color?.[3]||1]}))};T=A(t,r,(e.seeds?.shape_seed||e.seeds?.planet_seed)+6e3)}else T=new $(t,{seed:(e.seeds?.shape_seed||e.seeds?.planet_seed)+6e3,greenPatches:Array.from({length:25},(r,c)=>{const l=(e.seeds?.shape_seed||e.seeds?.planet_seed)+6e3+c*100,i=Math.sin(l)*.5+.5,f=Math.acos(1-2*(c+i)/25),p=2*Math.PI*(c*2.399%1);let y;return c<8?y=.25+i*.25:c<16?y=.15+i*.15:y=.08+i*.12,{position_3d:[Math.sin(f)*Math.cos(p),Math.sin(f)*Math.sin(p),Math.cos(f)],size:y,sides:12+Math.floor(i*16),color:[.5,0,0,.7+i*.2]}})});if(T){const r={id:`effect_${this.nextId++}`,type:"land_masses",effect:T,priority:5,enabled:!0,name:"Arid Terrain"};this.effects.set(r.id,r),o.push(r),T.addToScene(n,a.position),console.log("🏜️ Arid terrain (LandMasses with dark reddish color) added to Arid planet")}const x=G(t,s,e.seeds?.shape_seed||e.seeds?.planet_seed);if(x){const r={id:`effect_${this.nextId++}`,type:"river_lines",effect:x,priority:6,enabled:!0,name:"Dried River Channels"};this.effects.set(r.id,r),o.push(r),x.addToScene(n,a.position),console.log("🏜️ Dried river channels added to Arid planet")}break;case"anomaly":console.log("🌌 DETECTED ANOMALY PLANET - Creating effects"),console.log("🌌 Planet data:",{surfaceType:s.type,planetType:e.planet_info?.type}),console.log("🎭 SHOWCASE MODE: Activating ALL anomaly effects for evaluation");const L=["anomaly_phase_matter","pulsating_cube","planet_rays"],H=e.seeds?.planet_seed||Math.floor(Math.random()*1e6),J=L.length;for(let r=0;r<J;r++){const c=L[r],l=H+r*1e4,i=this.createEffectFromPythonData(c,{...e,seeds:{...e.seeds,planet_seed:l}},t,a,10+r);i&&(i.name=c.replace(/_/g," ").replace(/\b\w/g,f=>f.toUpperCase()),o.push(i),i.effect.addToScene&&i.effect.addToScene(n,a.position),console.log(`🎭 Added anomaly effect: ${i.name}`))}if(e.atmosphere&&e.atmosphere.type!=="None"){const r=this.createEffectFromPythonData("atmosphere",e.atmosphere,t,a,5);r&&(o.push(r),r.effect.addToScene(n,a.position),console.log("🌫️ Anomalous atmosphere added"))}break;default:if(e.planet_info?.type?.toLowerCase()==="anomaly"){console.log("🌌 DETECTED ANOMALY PLANET via planet_info.type - Creating effects"),console.log("🎭 SHOWCASE MODE (alt detection): Activating ALL anomaly effects for evaluation");const c=["anomaly_phase_matter","pulsating_cube","planet_rays"],l=e.seeds?.planet_seed||Math.floor(Math.random()*1e6),i=c.length;for(let f=0;f<i;f++){const p=c[f],y=l+f*1e4,b=this.createEffectFromPythonData(p,{...e,seeds:{...e.seeds,planet_seed:y}},t,a,10+f);b&&(b.name=p.replace(/_/g," ").replace(/\b\w/g,K=>K.toUpperCase()),o.push(b),b.effect.addToScene&&b.effect.addToScene(n,a.position),console.log(`🎭 Added anomaly effect: ${b.name}`))}if(e.atmosphere&&e.atmosphere.type!=="None"){const f=this.createEffectFromPythonData("atmosphere",e.atmosphere,t,a,5);f&&(o.push(f),f.effect.addToScene(n,a.position),console.log("🌫️ Anomalous atmosphere added"))}}else if(a.material instanceof V){const r=w(e);a.material.color.copy(r)}break}}else if(a.material instanceof V){const s=w(e);a.material.color.copy(s)}const h=e.planet_info?.type?.toLowerCase()||e.surface_elements?.type?.toLowerCase(),j=h==="anomaly"||e.surface_elements?.type==="anomaly";if(e.atmosphere&&!j){if(e.atmosphere.streaks||["Gas Giant","Frozen Gas Giant"].includes(e.planet_info?.type)){const s=M(t,e.atmosphere||{},e.seeds?.shape_seed+2e3);if(s){const m={id:`effect_${this.nextId++}`,type:"atmosphere_glow",effect:s,priority:20,enabled:!0};this.effects.set(m.id,m),o.push(m),s.addToScene(n,a.position)}}if(e.atmosphere.type&&e.atmosphere.type!=="None"){const s={...e.atmosphere};h==="oceanic"&&(s.opacity=Math.min(s.opacity||.3,.15),s.width=Math.min(s.width||15,8));const m=this.createEffectFromPythonData("atmosphere",s,t,a,5);m&&(o.push(m),m.effect.addToScene(n,a.position))}}if(e.rings&&e.rings.has_rings||["Gas Giant","Frozen Gas Giant","Super Earth"].includes(e.planet_info?.type)){const s=this.createEffectFromPythonData("ring_system",e,t,a,1);s?(o.push(s),s.effect.addToScene(n,a.position)):console.warn("⚠️ Failed to create ring effect")}if(e.surface_elements?.has_fragmentation_zones){const s=this.createEffectFromPythonData("fragmentation",e,t,a,5);s&&(o.push(s),s.effect.addToScene(n,a.position))}this.layerSystem&&this.layerSystem.addToScene(n);try{const s=this.createEffectFromPythonData("star_field",e,t,a,-100);s&&s.effect&&(s.effect.addToScene(n,a.position),o.push(s))}catch(s){console.warn("Could not create StarField:",s)}return o.forEach((s,m)=>{}),o.length===0&&console.warn("⚠️ NO EFFECTS WERE CREATED! Check the data structure and conditions."),o}catch(d){throw console.error("Error in EffectRegistry.createEffectsFromPythonPlanetData:",d),d}}getEffect(e){return this.effects.get(e)||null}getEffectsByType(e){return Array.from(this.effects.values()).filter(t=>t.type===e)}getAllEffects(){return Array.from(this.effects.values())}toggleEffect(e,t){const a=this.effects.get(e);if(a){a.enabled=t!==void 0?t:!a.enabled;const n=a.effect;if(n&&n.getObject3D){const u=n.getObject3D();u&&(u.visible=a.enabled,console.log(`🎮 Toggle effect ${a.type}: visible = ${a.enabled}`))}if(this.layerSystem){const u=this.layerSystem.getLayerMeshes(),d={cloud_bands_layer:"cloudBands",cloud_gyros_layer:"cloudGyros",metallic_surface_layer:"metallicSurface",diamond_surface_layer:"diamondSurface",rocky_terrain_layer:"rockyTerrain",icy_terrain_layer:"icyTerrain",aquifer_water:"aquiferWater",ocean_currents:"oceanCurrents"}[a.type];d&&u[d]&&(u[d].visible=a.enabled)}}else console.warn(`⚠️ Effect not found: ${e}`)}updateAllEffects(e,t){this.layerSystem&&this.layerSystem.update(e,t);for(const a of this.effects.values())if(a.enabled&&a.effect.update)try{a.effect.update(e,t)}catch(n){console.error(`Error updating effect ${a.type}:`,n)}}updateLightForAllEffects(e){this.layerSystem&&this.layerSystem.updateFromThreeLight(e);for(const t of this.effects.values())if(t.enabled&&t.effect.updateFromThreeLight)try{t.effect.updateFromThreeLight(e)}catch(a){console.error(`Error updating light for effect ${t.type}:`,a)}}removeEffect(e){const t=this.effects.get(e);t&&(t.effect.dispose&&t.effect.dispose(),this.effects.delete(e))}clearAllEffects(){this.layerSystem&&(this.layerSystem.dispose(),this.layerSystem=void 0);for(const e of this.effects.values())e.effect.dispose&&e.effect.dispose();this.effects.clear(),this.nextId=1}getStats(){const e=Array.from(this.effects.values());return{registeredTypes:this.creators.size,activeEffects:e.length,enabledEffects:e.filter(t=>t.enabled).length}}getAvailableEffectTypes(){return Array.from(this.creators.keys())}}const tt=I.getInstance();export{tt as e};
