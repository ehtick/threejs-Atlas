import{S as L}from"./atlas_DCnp7L347Zej0R-2R5015.js";import{V as S,G as E,E as b,B as O,L as w,C as P,h as f,M as v,i as R}from"./atlas_YyHXU7w5UzCW5Af7UsLdJ.js";const l={DOODLE_COUNT:{min:14,max:18},DOODLE_SIZE:{min:.08,max:.2},COMPLEXITY:{min:5,max:20},MOVEMENT_SPEED:{min:.1,max:.5},OPACITY:{min:.7,max:1}};class T{group;doodles=[];doodleData=[];planetRadius;time=0;rng;projectPointOnSphere(t,e,o,a){const n=a.clone().normalize(),s=new S(0,1,0).cross(n).normalize();s.lengthSq()<.001&&s.set(1,0,0).cross(n).normalize();const r=n.clone().cross(s).normalize();return n.clone().multiplyScalar(o).add(s.clone().multiplyScalar(t)).add(r.clone().multiplyScalar(e))}constructor(t,e={},o){this.group=new E,this.planetRadius=t,this.rng=new L(o||12345),this.doodleData=this.generateProceduralDoodles(),this.doodleData.length>0&&this.createDoodles()}generateProceduralDoodles(){const t=[],e=this.rng.randint(l.DOODLE_COUNT.min,l.DOODLE_COUNT.max),o=["arc","fractals","squiggle"],a=["wave","pulse","spiral"];for(let n=0;n<e;n++){const s=this.rng.random()*2*Math.PI,r=Math.acos(this.rng.random()*2-1),u=[Math.sin(r)*Math.cos(s),Math.sin(r)*Math.sin(s),Math.cos(r)],i=this.rng.randint(200,255),c=this.rng.randint(0,100),h=this.rng.randint(150,255),g=this.rng.uniform(l.OPACITY.min,l.OPACITY.max),m=`#${i.toString(16).padStart(2,"0")}${c.toString(16).padStart(2,"0")}${h.toString(16).padStart(2,"0")}`;console.log(`ExoticDoodle ${n}: ${m} (RGB: ${i}, ${c}, ${h})`),t.push({position_3d:u,type:o[this.rng.randint(0,o.length-1)],size:this.rng.uniform(l.DOODLE_SIZE.min,l.DOODLE_SIZE.max),color:[m,g],complexity:this.rng.randint(l.COMPLEXITY.min,l.COMPLEXITY.max),movement_speed:this.rng.uniform(l.MOVEMENT_SPEED.min,l.MOVEMENT_SPEED.max),movement_pattern:a[this.rng.randint(0,a.length-1)]})}return t}createDoodles(){this.doodleData.forEach(t=>{let e;switch(t.type){case"arc":e=this.createArcDoodle(t);break;case"fractals":e=this.createFractalDoodle(t);break;case"squiggle":e=this.createSquiggleDoodle(t);break;default:e=this.createSquiggleDoodle(t)}this.doodles.push(e),this.group.add(e)})}createArcDoodle(t){const e=new E,a=new b(0,0,t.size*this.planetRadius,t.size*this.planetRadius*.7,0,Math.PI*1.5,!1,0).getPoints(50),n=new O().setFromPoints(a),s=new w({color:new P(t.color[0]),transparent:!0,opacity:t.color[1]}),r=new f(n,s);return e.add(r),e}createFractalDoodle(t){const e=new E,o=Math.floor(t.complexity*.6)+2,a=new S(...t.position_3d),n=this.planetRadius*1.015;for(let s=0;s<o;s++){const r=(this.rng.random()-.5)*t.size*this.planetRadius,u=(this.rng.random()-.5)*t.size*this.planetRadius,i=[],c=Math.floor(this.rng.random()*20)+8,h=this.rng.random()*t.size*this.planetRadius*.3+.1;for(let d=0;d<=c;d++){const p=d/c*Math.PI*2,x=h*(.7+this.rng.random()*.6),y=p+(this.rng.random()-.5)*.5,z=r+Math.cos(y)*x,_=u+Math.sin(y)*x,C=this.projectPointOnSphere(z,_,n,a);i.push(C)}i.push(i[0]);const g=new O().setFromPoints(i),m=new w({color:new P(t.color[0]),transparent:!0,opacity:t.color[1]}),D=new f(g,m);e.add(D)}return e}createSquiggleDoodle(t){const e=new E,o=Math.floor(t.complexity*.8)+3,a=new S(...t.position_3d),n=this.planetRadius*1.015;for(let s=0;s<o;s++){const r=[],u=this.rng.random()*15+5;let i=(this.rng.random()-.5)*t.size*this.planetRadius,c=(this.rng.random()-.5)*t.size*this.planetRadius;for(let D=0;D<=u;D++){const d=this.projectPointOnSphere(i,c,n,a);r.push(d),i+=(this.rng.random()-.5)*t.size*this.planetRadius*.2,c+=(this.rng.random()-.5)*t.size*this.planetRadius*.2;const p=t.size*this.planetRadius*.8;i=Math.max(-p,Math.min(p,i)),c=Math.max(-p,Math.min(p,c))}const h=new O().setFromPoints(r),g=new w({color:new P(t.color[0]),transparent:!0,opacity:t.color[1]}),m=new f(h,g);e.add(m)}return e}update(t){this.time+=t,this.doodles.forEach((e,o)=>{const a=this.doodleData[o];if(!a)return;const n=a.movement_speed;switch(a.movement_pattern){case"wave":e.rotation.z=Math.sin(this.time*n)*.2,e.rotation.x=Math.cos(this.time*n*.7)*.1;break;case"pulse":const s=1+Math.sin(this.time*n*2)*.1;e.scale.setScalar(s);break;case"spiral":e.rotation.z+=n*t;break}})}addToScene(t,e){this.group.position.copy(e),t.add(this.group)}removeFromScene(t){t.remove(this.group)}getObject3D(){return this.group}dispose(){this.doodles.forEach(t=>{t.traverse(e=>{e instanceof v?(e.geometry.dispose(),e.material instanceof R&&e.material.dispose()):e instanceof f&&(e.geometry.dispose(),e.material instanceof R&&e.material.dispose())})}),this.doodles=[]}}function Y(M,t,e){return new T(M,{planetRadius:M},e)}export{T as E,Y as c};
