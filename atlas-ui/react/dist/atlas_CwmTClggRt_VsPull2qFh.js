import{S as y}from"./atlas_DhOreEVM1uBHzRPTt7uMw.js";import{C as h,V as a,G as E,z as u,A as x,D as m,b as B,M as c,u as T}from"./atlas_CLp6T-BwF8hBVTNM0OiQd.js";const M={DEFAULT:{BUBBLE_COUNT:{min:8,max:15},BUBBLE_SIZE:{min:.004,max:.008},RISE_SPEED:{min:.008,max:.015},EXPANSION_RATE:{min:.006,max:.012},POP_DISTANCE:{min:.15,max:.25},OPACITY:{min:.15,max:.35},EMISSION_RATE:{min:.8,max:1.5}},SWAMP:{BUBBLE_COUNT:{min:20,max:40},BUBBLE_SIZE:{min:.02,max:.04},RISE_SPEED:{min:.5,max:1},EXPANSION_RATE:{min:.3,max:.6},POP_DISTANCE:{min:.5,max:1},OPACITY:{min:.8,max:1},EMISSION_RATE:{min:5,max:10}}};class P{bubbles=[];bubbleMeshes=[];bubbleGroup;material;geometry;rng;params;planetRadius;lastBubbleTime=performance.now();planetCenter=new a(0,0,0);constructor(t,i={}){this.planetRadius=t,this.rng=new y(i.seed||Math.random()*1e6);const e=i.planetType||"SWAMP",s=M[e];this.params={bubbleCount:i.bubbleCount||this.rng.randint(s.BUBBLE_COUNT.min,s.BUBBLE_COUNT.max),bubbleSize:i.bubbleSize||t*this.rng.uniform(s.BUBBLE_SIZE.min,s.BUBBLE_SIZE.max),riseSpeed:i.riseSpeed||this.rng.uniform(s.RISE_SPEED.min,s.RISE_SPEED.max),expansionRate:i.expansionRate||this.rng.uniform(s.EXPANSION_RATE.min,s.EXPANSION_RATE.max),popDistance:i.popDistance||t*this.rng.uniform(s.POP_DISTANCE.min,s.POP_DISTANCE.max),bubbleColor:i.bubbleColor||new h(8969608),opacity:i.opacity||this.rng.uniform(s.OPACITY.min,s.OPACITY.max),emissionRate:i.emissionRate||this.rng.uniform(s.EMISSION_RATE.min,s.EMISSION_RATE.max),seed:i.seed||Math.random()*1e6,planetType:e},this.bubbleGroup=new E,this.setupMaterials(),this.setupGeometry(),console.log("ToxicSwampBubbles initialized:",{planetRadius:this.planetRadius,params:this.params,materialColor:this.material.color.getHex(),materialOpacity:this.material.opacity})}setupMaterials(){this.material=new u({color:this.params.bubbleColor,transparent:!0,opacity:this.params.opacity,side:m,alphaTest:.01,depthWrite:!1,blending:x})}setupGeometry(){this.geometry=new B(1,8,6)}createTestBubbles(){console.log("Creating 3 test bubbles...");for(let t=0;t<3;t++){const i=t/3*Math.PI*2,e=this.planetRadius*1.2,s=new u({color:65280,transparent:!0,opacity:.8,side:m}),o=new c(this.geometry,s);o.position.set(Math.cos(i)*e,Math.sin(i)*e,0),o.scale.setScalar(this.planetRadius*.05),this.bubbleGroup.add(o),console.log(`Test bubble ${t+1} created at:`,o.position.toArray())}console.log("Test bubbles added to bubbleGroup. Total children:",this.bubbleGroup.children.length)}getRandomSurfacePoint(){const t=this.rng.uniform(0,2*Math.PI),i=this.rng.uniform(0,Math.PI),e=this.planetRadius*.7,s=e*Math.sin(i)*Math.cos(t),o=e*Math.sin(i)*Math.sin(t),b=e*Math.cos(i);return new a(s,o,b).add(this.planetCenter)}createBubble(){if(this.bubbles.length>=this.params.bubbleCount)return;const t=this.getRandomSurfacePoint(),i=t.clone().sub(this.planetCenter).normalize(),e={position:t.clone(),velocity:i.multiplyScalar(this.params.riseSpeed),size:this.params.bubbleSize*this.rng.uniform(.8,1.2),maxSize:this.params.bubbleSize*this.rng.uniform(3,5),life:0,maxLife:this.rng.uniform(2,4),originalSurfacePoint:t.clone(),wobbleOffset:new a(this.rng.uniform(-1,1),this.rng.uniform(-1,1),this.rng.uniform(-1,1)).normalize(),wobbleSpeed:this.rng.uniform(10,20),wobbleAmplitude:this.rng.uniform(.01,.05),startOpacity:this.params.opacity,hasPopped:!1,emergencePhase:1,emergenceSpeed:10,isFullyEmerged:!0,fadeInPhase:1,fadeInSpeed:10};e.velocity.add(new a(this.rng.uniform(-.005,.005),this.rng.uniform(-.005,.005),this.rng.uniform(-.005,.005))),this.bubbles.push(e);const s=this.material.clone();s.opacity=this.params.opacity;const o=new c(this.geometry,s);o.position.copy(e.position),o.scale.setScalar(e.size),this.bubbleMeshes.push(o),this.bubbleGroup.add(o)}updateBubbles(t){for(let i=this.bubbles.length-1;i>=0;i--){const e=this.bubbles[i],s=this.bubbleMeshes[i];e.life+=t;const o=e.life*e.wobbleSpeed,b=Math.sin(o)*e.wobbleAmplitude,p=Math.cos(o*1.3)*e.wobbleAmplitude,d=Math.sin(o*.7)*e.wobbleAmplitude,r=new a(b,p,d);r.multiply(e.wobbleOffset);const S=e.velocity.clone().add(r);e.position.add(S.multiplyScalar(t*200));const f=Math.min(e.life/e.maxLife,1);e.size=T.lerp(this.params.bubbleSize*.8,e.maxSize,f),(e.position.distanceTo(e.originalSurfacePoint)>=this.params.popDistance||e.size>=e.maxSize*.8)&&!e.hasPopped&&(e.hasPopped=!0,e.maxSize*=2,e.maxLife=e.life+.2);let l=this.params.opacity;if(e.hasPopped){const g=(e.life-(e.maxLife-.2))/.2;l=this.params.opacity*(1-g)}s.position.copy(e.position),s.scale.setScalar(e.size),s.material.opacity=Math.max(0,l),(e.life>=e.maxLife||l<=.05)&&(this.bubbles.splice(i,1),this.bubbleGroup.remove(s),this.bubbleMeshes.splice(i,1),s.material!==this.material&&s.material.dispose(),s.geometry!==this.geometry&&s.geometry.dispose())}}update(t){const i=performance.now(),e=i-this.lastBubbleTime,s=1e3/this.params.emissionRate;e>=s*.1&&(this.createBubble(),this.lastBubbleTime=i),this.updateBubbles(t/1e3)}addToScene(t,i){i&&(this.planetCenter.copy(i),this.bubbleGroup.position.copy(i)),t.add(this.bubbleGroup),console.log("ToxicSwampBubbles: Added to scene:",{planetPosition:i?.toArray(),planetCenter:this.planetCenter.toArray(),bubbleGroupPosition:this.bubbleGroup.position.toArray(),sceneChildren:t.children.length,bubbleGroupVisible:this.bubbleGroup.visible})}removeFromScene(t){t.remove(this.bubbleGroup)}dispose(){this.geometry.dispose(),this.material.dispose(),this.bubbleMeshes.forEach(t=>{this.bubbleGroup.remove(t),t.material!==this.material&&t.material.dispose(),t.geometry!==this.geometry&&t.geometry.dispose()}),this.bubbles.length=0,this.bubbleMeshes.length=0}setEnabled(t){this.bubbleGroup.visible=t}isEnabled(){return this.bubbleGroup.visible}getBubbleCount(){return this.bubbles.length}}function R(n,t,i){if(console.log("createToxicSwampBubblesFromPythonData called:",{planetRadius:n,surface:t,hasToxicBubbles:!!t.toxic_bubbles,seed:i}),!t.toxic_bubbles)return console.log("No toxic_bubbles data found in surface:",t),null;const e=t.toxic_bubbles;return console.log("Creating ToxicSwampBubblesEffect with data:",e),new P(n,{bubbleCount:e.bubble_count,bubbleSize:e.bubble_size,riseSpeed:e.rise_speed,expansionRate:e.expansion_rate,popDistance:e.pop_distance,bubbleColor:e.color?new h(e.color[0],e.color[1],e.color[2]):void 0,opacity:e.opacity,emissionRate:e.emission_rate,seed:i,planetType:"SWAMP"})}export{P as T,R as c};
