import{S as E}from"./atlas_DhOreEVM1uBHzRPTt7uMw.js";import{C as O,V as B,G as R,z as _,N as D,D as F,b as N,u as p,M as z}from"./atlas_CLp6T-BwF8hBVTNM0OiQd.js";const G={DEFAULT:{BUBBLE_COUNT:{min:8,max:15},BUBBLE_SIZE:{min:.004,max:.008},RISE_SPEED:{min:.008,max:.015},EXPANSION_RATE:{min:.006,max:.012},POP_DISTANCE:{min:.15,max:.25},OPACITY:{min:.15,max:.35},EMISSION_RATE:{min:.8,max:1.5}},SWAMP:{BUBBLE_COUNT:{min:450,max:900},BUBBLE_SIZE:{min:.01,max:.05},RISE_SPEED:{min:.005,max:.012},EXPANSION_RATE:{min:.002,max:.004},POP_DISTANCE:{min:.2,max:.35},OPACITY:{min:.2,max:.9},EMISSION_RATE:{min:13,max:15}}};class v{bubbles=[];bubbleMeshes=[];bubbleGroup;material;geometry;rng;params;planetRadius;lastBubbleTime=0;planetCenter=new B(0,0,0);cosmicOriginTime;cosmicOffset;globalTime=0;nextBubbleIndex=0;lastUpdateTime=0;isInitialized=!1;constructor(t,i={}){this.planetRadius=t,this.rng=new E(i.seed||Math.random()*1e6),this.cosmicOriginTime=i.cosmicOriginTime||51408e4,this.cosmicOffset=(i.seed||0)%3600*10;const e=i.planetType||"SWAMP",s=G[e],a=i.bubbleCount||this.rng.randint(s.BUBBLE_COUNT.min,s.BUBBLE_COUNT.max),n=i.bubbleSize||t*this.rng.uniform(s.BUBBLE_SIZE.min,s.BUBBLE_SIZE.max);console.log("DEBUG: ToxicSwampBubbles params calculation:",{planetType:e,ranges:s,providedBubbleCount:i.bubbleCount,calculatedBubbleCount:a,providedBubbleSize:i.bubbleSize,calculatedBubbleSize:n}),this.params={bubbleCount:a,bubbleSize:n,riseSpeed:i.riseSpeed||this.rng.uniform(s.RISE_SPEED.min,s.RISE_SPEED.max),expansionRate:i.expansionRate||this.rng.uniform(s.EXPANSION_RATE.min,s.EXPANSION_RATE.max),popDistance:i.popDistance||t*this.rng.uniform(s.POP_DISTANCE.min,s.POP_DISTANCE.max),bubbleColor:i.bubbleColor||new O(5078031),opacity:i.opacity||this.rng.uniform(s.OPACITY.min,s.OPACITY.max),emissionRate:i.emissionRate||this.rng.uniform(s.EMISSION_RATE.min,s.EMISSION_RATE.max),seed:i.seed||Math.random()*1e6,planetType:e,cosmicOriginTime:this.cosmicOriginTime,timeSpeed:i.timeSpeed||this.rng.uniform(.5,2)},this.bubbleGroup=new R,this.setupMaterials(),this.setupGeometry(),console.log("ToxicSwampBubbles initialized:",{planetRadius:this.planetRadius,params:this.params,materialColor:this.material.color.getHex(),materialOpacity:this.material.opacity}),this.createInitialBubbles()}setupMaterials(){this.material=new _({color:this.params.bubbleColor,transparent:!0,opacity:this.params.opacity,side:F,depthWrite:!1,depthTest:!0,blending:D})}setupGeometry(){this.geometry=new N(.3,12,8)}createInitialBubbles(){console.log("Sistema de burbujas procedural inicializado - estado se calculará dinámicamente")}getProceduralSurfacePoint(t){const i=t,e=0,s=Math.sin(i*.618+1.26*e*(1.03+.5*Math.cos(.21*i)))*Math.PI*2,a=Math.abs(Math.cos(i*.382+1.12*e*Math.cos(1.22+.1424*i)))*Math.PI,n=Math.sin(i*1.32+e*.1*Math.sin(.92+.53*i))*.3,l=Math.cos(i*2.43+e*.15*Math.cos(1.37+.29*i))*.2,o=s+n,m=a+l,b=.95+.05*Math.sin(i*.73+e*.2),c=this.planetRadius*b,h=c*Math.sin(m)*Math.cos(o),r=c*Math.sin(m)*Math.sin(o),u=c*Math.cos(m);return new B(h,r,u).add(this.planetCenter)}createBubbleAtTime(t,i){const e=new E(this.params.seed+i),s=this.getProceduralSurfacePoint(i),a=s.clone().sub(this.planetCenter).normalize(),n=a.clone().multiplyScalar(this.planetRadius).add(this.planetCenter),l=t-e.uniform(0,5),o={position:s.clone(),velocity:a.multiplyScalar(this.params.riseSpeed*.3),size:this.params.bubbleSize*.2,maxSize:this.params.bubbleSize*e.uniform(1.2,1.8),life:t-l,animationTime:0,maxLife:e.uniform(15,25),originalSurfacePoint:n.clone(),wobbleOffset:new B(e.uniform(-1,1),e.uniform(-1,1),e.uniform(-1,1)).normalize(),wobbleSpeed:e.uniform(.8,1.5),wobbleAmplitude:e.uniform(.002,.008),startOpacity:0,hasPopped:!1,emergencePhase:Math.min(1,(t-l)*e.uniform(.4,.8)),emergenceSpeed:e.uniform(.4,.8),isFullyEmerged:t-l>2,fadeInPhase:Math.min(1,(t-l)*e.uniform(1,1.8)),fadeInSpeed:e.uniform(1,1.8),bubbleIndex:i,birthTime:l,popPhase:0,popStartTime:0},m=Math.sin(i*.47)*.3+1;o.velocity.multiplyScalar(m);const b=t-l,c=p.smoothstep(o.emergencePhase,0,1),h=o.velocity.clone().multiplyScalar(b*c);o.position.add(h);const r=Math.min(o.life/o.maxLife,1),u=p.smoothstep(o.emergencePhase,0,1),f=o.maxSize*.1;o.size=p.lerp(f,o.maxSize,u*Math.min(r*2,1)),this.bubbles.push(o);const g=this.material.clone();g.opacity=o.fadeInPhase*this.params.opacity;const d=new z(this.geometry,g);d.position.copy(o.position),d.scale.setScalar(o.size),this.bubbleMeshes.push(d),this.bubbleGroup.add(d)}updateBubbles(t){for(let i=this.bubbles.length-1;i>=0;i--){const e=this.bubbles[i],s=this.bubbleMeshes[i];e.animationTime+=t,e.life+=t;const n=e.position.distanceTo(this.planetCenter)-this.planetRadius;e.isFullyEmerged||(e.emergencePhase=Math.min(1,e.emergencePhase+t*e.emergenceSpeed),e.emergencePhase>=1&&(e.isFullyEmerged=!0)),e.fadeInPhase<1&&(e.fadeInPhase=Math.min(1,e.fadeInPhase+t*e.fadeInSpeed));const l=e.animationTime*e.wobbleSpeed,o=Math.sin(l+e.bubbleIndex*.31)*e.wobbleAmplitude,m=Math.cos(l*1.3+e.bubbleIndex*.47)*e.wobbleAmplitude,b=Math.sin(l*.7+e.bubbleIndex*.13)*e.wobbleAmplitude,c=new B(o,m,b);c.multiply(e.wobbleOffset);const h=p.smoothstep(e.emergencePhase,0,1),r=e.velocity.clone().add(c);e.position.add(r.multiplyScalar(t*h));const u=Math.min(e.life/e.maxLife,1),f=p.smoothstep(e.emergencePhase,0,1),g=e.maxSize*.1,d=e.maxSize;if(!e.hasPopped)e.size=p.lerp(g,d,f*Math.min(u*2,1));else{const P=1+e.popPhase*1.5;e.size=e.maxSize*P}if(e.isFullyEmerged&&(n>=this.params.popDistance||e.life>=e.maxLife*.8||e.size>=e.maxSize*.9)&&!e.hasPopped&&(e.hasPopped=!0,e.popStartTime=e.animationTime),e.hasPopped){const S=e.animationTime-e.popStartTime;e.popPhase=Math.min(1,S*3)}let y=0;if(e.hasPopped){const S=1-e.popPhase;y=this.params.opacity*S*.5}else{const S=p.smoothstep(e.emergencePhase,.3,1),P=e.fadeInPhase,C=Math.max(0,1-n/(this.params.popDistance*2));y=this.params.opacity*S*P*C}s.position.copy(e.position),s.scale.setScalar(e.size),s.material.opacity=Math.max(0,y),(e.life>=e.maxLife||e.hasPopped&&e.popPhase>=1||y<=.01&&e.isFullyEmerged)&&(this.bubbles.splice(i,1),this.bubbleGroup.remove(s),this.bubbleMeshes.splice(i,1),s.material!==this.material&&s.material.dispose(),s.geometry!==this.geometry&&s.geometry.dispose())}}update(t){const s=(Date.now()/1e3-this.cosmicOriginTime+this.cosmicOffset)*(this.params.timeSpeed||1);if(!this.isInitialized){this.rebuildBubblesFromAbsoluteTime(s),this.lastUpdateTime=s,this.isInitialized=!0,this.globalTime=s;return}let a=s-this.lastUpdateTime;this.lastUpdateTime=s,this.globalTime=s,a=Math.min(a,1/30),this.createNewBubblesIfNeeded(s),this.updateBubbles(a)}rebuildBubblesFromAbsoluteTime(t){this.clearAllBubbles();const i=1/this.params.emissionRate,e=20,s=Math.min(this.params.bubbleCount,Math.ceil(e/i));console.log("DEBUG: rebuildBubblesFromAbsoluteTime",{currentTime:t,baseInterval:i,avgLifetime:e,maxConcurrentBubbles:s,emissionRate:this.params.emissionRate});let a=0;const n=e,l=t%n;for(let o=0;o<this.params.bubbleCount;o++){const m=new E(this.params.seed+o),b=o*i%n,c=m.uniform(15,25),h=(b+c)%n;let r=!1;if(h>b?r=l>=b&&l<=h:r=l>=b||l<=h,r){let u;l>=b?u=t-(l-b):u=t-(l+n-b),this.createBubbleAtExactState(t,o,u,c),a++,a<=3&&console.log(`DEBUG: Created bubble ${o}`,{cycleBirthTime:b,absoluteBirthTime:u,age:t-u,maxLife:c,cycleTime:l})}}console.log(`DEBUG: Created ${a} bubbles for time ${t}`)}createNewBubblesIfNeeded(t){const i=1/this.params.emissionRate,s=20,a=t%s;for(let n=0;n<this.params.bubbleCount;n++){const l=new E(this.params.seed+n),o=n*i%s,m=l.uniform(15,25),b=(o+m)%s;let c=!1;if(b>o?c=a>=o&&a<=b:c=a>=o||a<=b,c&&!this.bubbles.find(r=>r.bubbleIndex===n)){let r;a>=o?r=t-(a-o):r=t-(a+s-o),this.createBubbleAtExactState(t,n,r,m)}}}clearAllBubbles(){this.bubbleMeshes.forEach(t=>{this.bubbleGroup.remove(t),t.material!==this.material&&Array.isArray(t.material)?t.material.forEach(i=>i.dispose()):t.material!==this.material&&t.material.dispose()}),this.bubbles.length=0,this.bubbleMeshes.length=0}createBubbleAtExactState(t,i,e,s){const a=new E(this.params.seed+i),n=t-e,l=n/s,o=this.getProceduralSurfacePoint(i),m=o.clone().sub(this.planetCenter).normalize(),b=m.clone().multiplyScalar(this.planetRadius).add(this.planetCenter),c=this.params.riseSpeed*.3*a.uniform(.7,1.3),h=this.params.bubbleSize*a.uniform(1.2,1.8),r=a.uniform(.4,.8),u=a.uniform(1,1.8),f=Math.min(1,n*r),g=f>=1,d=Math.min(1,n*u),T=o.clone(),y=p.smoothstep(f,0,1),A=m.clone().multiplyScalar(n*c*y);T.add(A);const S=p.smoothstep(f,0,1),P=h*.1,C=p.lerp(P,h,S*Math.min(l*2,1)),I={position:T,velocity:m.multiplyScalar(c),size:C,maxSize:h,life:n,animationTime:0,maxLife:s,originalSurfacePoint:b,wobbleOffset:new B(a.uniform(-1,1),a.uniform(-1,1),a.uniform(-1,1)).normalize(),wobbleSpeed:a.uniform(.8,1.5),wobbleAmplitude:a.uniform(.002,.008),startOpacity:0,hasPopped:!1,emergencePhase:f,emergenceSpeed:r,isFullyEmerged:g,fadeInPhase:d,fadeInSpeed:u,bubbleIndex:i,birthTime:e,popPhase:0,popStartTime:0};this.bubbles.push(I);const w=this.material.clone();w.opacity=d*this.params.opacity;const M=new z(this.geometry,w);M.position.copy(I.position),M.scale.setScalar(I.size),this.bubbleMeshes.push(M),this.bubbleGroup.add(M)}addToScene(t,i){i&&(this.planetCenter.copy(i),this.bubbleGroup.position.copy(i)),t.add(this.bubbleGroup),console.log("ToxicSwampBubbles: Added to scene:",{planetPosition:i?.toArray(),planetCenter:this.planetCenter.toArray(),bubbleGroupPosition:this.bubbleGroup.position.toArray(),sceneChildren:t.children.length,bubbleGroupVisible:this.bubbleGroup.visible})}removeFromScene(t){t.remove(this.bubbleGroup)}dispose(){this.geometry.dispose(),this.material.dispose(),this.bubbleMeshes.forEach(t=>{this.bubbleGroup.remove(t),t.material!==this.material&&t.material.dispose(),t.geometry!==this.geometry&&t.geometry.dispose()}),this.bubbles.length=0,this.bubbleMeshes.length=0}setEnabled(t){this.bubbleGroup.visible=t}isEnabled(){return this.bubbleGroup.visible}getBubbleCount(){return this.bubbles.length}}function V(x,t,i,e){if(console.log("createToxicSwampBubblesFromPythonData called:",{planetRadius:x,surface:t,hasToxicBubbles:!!t.toxic_bubbles,seed:i}),!t.toxic_bubbles)return console.log("No toxic_bubbles data found in surface:",t),null;const s=t.toxic_bubbles;return console.log("Creating ToxicSwampBubblesEffect with data:",s),new v(x,{bubbleColor:s.color?new O(s.color[0],s.color[1],s.color[2]):void 0,seed:i,planetType:"SWAMP",cosmicOriginTime:e,timeSpeed:1})}export{v as T,V as c};
