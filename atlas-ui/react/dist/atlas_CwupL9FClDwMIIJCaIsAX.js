import{S as g}from"./atlas_DcFWk_8uQW5YiyxJyXm9Z.js";import{C,V as y,G as O,z as A,N as M,D as w,b as _,M as R,u as D}from"./atlas_BOOzg5XYrrU1N4SZySfRd.js";const N={DEFAULT:{BUBBLE_COUNT:{min:8,max:15},BUBBLE_SIZE:{min:.004,max:.008},RISE_SPEED:{min:.008,max:.015},EXPANSION_RATE:{min:.006,max:.012},POP_DISTANCE:{min:.15,max:.25},OPACITY:{min:.15,max:.35},EMISSION_RATE:{min:.8,max:1.5}},SWAMP:{BUBBLE_COUNT:{min:450,max:900},BUBBLE_SIZE:{min:.02,max:.06},RISE_SPEED:{min:.003,max:.008},EXPANSION_RATE:{min:.002,max:.004},POP_DISTANCE:{min:.2,max:.35},OPACITY:{min:.2,max:.9},EMISSION_RATE:{min:8,max:12}}};class G{bubbles=[];bubbleGroup;material;geometry;rng;params;planetRadius;planetCenter=new y(0,0,0);bubbleCycleData=[];constructor(i,t={}){this.planetRadius=i,this.rng=new g(t.seed||Math.random()*1e6);const e=t.planetType||"SWAMP",s=N[e],n=t.bubbleCount||this.rng.randint(s.BUBBLE_COUNT.min,s.BUBBLE_COUNT.max),c=t.bubbleSize||i*this.rng.uniform(s.BUBBLE_SIZE.min,s.BUBBLE_SIZE.max);this.params={bubbleCount:n,bubbleSize:c,riseSpeed:t.riseSpeed||this.rng.uniform(s.RISE_SPEED.min,s.RISE_SPEED.max),expansionRate:t.expansionRate||this.rng.uniform(s.EXPANSION_RATE.min,s.EXPANSION_RATE.max),popDistance:t.popDistance||i*this.rng.uniform(s.POP_DISTANCE.min,s.POP_DISTANCE.max),bubbleColor:t.bubbleColor||new C(5078031),opacity:t.opacity||this.rng.uniform(s.OPACITY.min,s.OPACITY.max),emissionRate:t.emissionRate||this.rng.uniform(s.EMISSION_RATE.min,s.EMISSION_RATE.max),seed:t.seed||Math.random()*1e6,planetType:e,cosmicOriginTime:t.cosmicOriginTime||51408e4,timeSpeed:t.timeSpeed||this.rng.uniform(.5,2)},this.bubbleGroup=new O,this.setupMaterials(),this.setupGeometry(),this.generateBubbleCycleData(),this.createBubbleMeshes()}setupMaterials(){this.material=new A({color:this.params.bubbleColor,transparent:!0,opacity:0,side:w,depthWrite:!1,depthTest:!0,blending:M})}setupGeometry(){this.geometry=new _(.3,12,8)}generateBubbleCycleData(){for(let i=0;i<this.params.bubbleCount;i++){const t=new g(this.params.seed+i),e=i*2.3%60,s=t.uniform(2,4),n=t.uniform(3,5),c=t.uniform(15,25),l=.5,m=s+n+c+l+1+t.uniform(5,15),h=this.getProceduralSurfacePoint(i),p=h.clone().sub(this.planetCenter).normalize(),o={bubbleIndex:i,birthOffset:e,cycleDuration:m,fadeInDuration:s,emergeDuration:n,riseDuration:c,popDuration:l,maxSize:this.params.bubbleSize*t.uniform(.8,1.5),riseSpeed:this.params.riseSpeed*t.uniform(.7,1.3),wobbleSpeed:t.uniform(.5,1.5),wobbleAmplitude:t.uniform(.002,.008),emergenceSpeed:t.uniform(.3,.6),startPosition:h.clone(),riseDirection:p};this.bubbleCycleData.push(o)}}getProceduralSurfacePoint(i){const t=new g(this.params.seed);for(let a=0;a<i;a++)t.uniform(0,1),t.uniform(0,1),t.uniform(0,1);const e=t.uniform(0,1),s=t.uniform(0,1),n=2*Math.PI*e,c=2*s-1,l=Math.sqrt(1-c*c),u=l*Math.cos(n),m=c,h=l*Math.sin(n),p=new y(u,m,h),o=.95+.05*t.uniform(0,1),b=this.planetRadius*o;return p.multiplyScalar(b).add(this.planetCenter)}createBubbleMeshes(){for(let i=0;i<this.bubbleCycleData.length;i++){const t=this.bubbleCycleData[i],e=this.material.clone();e.opacity=0;const s=new R(this.geometry,e);s.position.copy(t.startPosition),s.scale.setScalar(0),s.visible=!1;const n={cycleData:t,mesh:s,currentPhase:"hidden"};this.bubbles.push(n),this.bubbleGroup.add(s)}}getCurrentCosmicTime(){return(Date.now()/1e3-this.params.cosmicOriginTime)*this.params.timeSpeed}calculateBubbleState(i,t){const e=i.cycleData,n=(t+e.birthOffset)%e.cycleDuration,l=0+e.fadeInDuration,u=l+e.emergeDuration,m=u+e.riseDuration,h=m+e.popDuration,p=h+1;let o="hidden",b=0,a=0,S=e.startPosition.clone();if(n<l){o="fadeIn";const r=n/e.fadeInDuration;b=this.params.opacity*r,a=e.maxSize*.1*r}else if(n<u){o="emerging";const r=(n-l)/e.emergeDuration;b=this.params.opacity,a=D.lerp(e.maxSize*.1,e.maxSize*.7,D.smoothstep(r,0,1));const d=D.smoothstep(r,0,1),f=e.riseDirection.clone().multiplyScalar(this.planetRadius).add(this.planetCenter);S=e.startPosition.clone().lerp(f,d)}else if(n<m){o="rising";const r=(n-u)/e.riseDuration;b=this.params.opacity,a=D.lerp(e.maxSize*.7,e.maxSize,r);const d=e.riseSpeed*(n-u),f=e.riseDirection.clone().multiplyScalar(this.planetRadius).add(this.planetCenter),E=(n-u)*e.wobbleSpeed,x=Math.sin(E+e.bubbleIndex*.31)*e.wobbleAmplitude,P=Math.cos(E*1.3+e.bubbleIndex*.47)*e.wobbleAmplitude,B=Math.sin(E*.7+e.bubbleIndex*.13)*e.wobbleAmplitude,I=new y(x,P,B);S=f.clone().add(e.riseDirection.clone().multiplyScalar(d)).add(I)}else if(n<h){o="popping";const r=(n-m)/e.popDuration;b=this.params.opacity*(1-r)*.5,a=e.maxSize*(1+r*1.5);const d=e.riseSpeed*e.riseDuration;S=e.riseDirection.clone().multiplyScalar(this.planetRadius).add(this.planetCenter).clone().add(e.riseDirection.clone().multiplyScalar(d))}else n<p?(o="fadeOut",b=0,a=0):(o="hidden",b=0,a=0);i.currentPhase=o,i.mesh.visible=o!=="hidden",i.mesh.position.copy(S),i.mesh.scale.setScalar(a),i.mesh.material.opacity=Math.max(0,b)}update(i){const t=this.getCurrentCosmicTime();for(const e of this.bubbles)this.calculateBubbleState(e,t)}addToScene(i,t){if(t){this.planetCenter.copy(t),this.bubbleGroup.position.copy(t),this.generateBubbleCycleData();for(let e=0;e<this.bubbles.length;e++)this.bubbles[e].cycleData=this.bubbleCycleData[e]}i.add(this.bubbleGroup)}removeFromScene(i){i.remove(this.bubbleGroup)}dispose(){this.geometry.dispose(),this.material.dispose(),this.bubbles.forEach(i=>{this.bubbleGroup.remove(i.mesh),i.mesh.material!==this.material&&i.mesh.material.dispose()}),this.bubbles.length=0}setEnabled(i){this.bubbleGroup.visible=i}isEnabled(){return this.bubbleGroup.visible}getObject3D(){return this.bubbleGroup}getBubbleCount(){return this.bubbles.filter(i=>i.currentPhase!=="hidden").length}}function L(T,i,t,e){if(!i.toxic_bubbles)return null;const s=i.toxic_bubbles;return new G(T,{bubbleColor:s.color?new C(s.color[0],s.color[1],s.color[2]):void 0,seed:t,planetType:"SWAMP",cosmicOriginTime:e,timeSpeed:1})}export{G as T,L as c};
