import{S as L,g as A,D as F}from"./atlas_CtOhIAiNHzSpXytHIyKwk.js";import{V as d,S as C,D as V,C as U,G as _,E as Y,n as N,T as w,M as S,o as z,i as k}from"./atlas_pGQiCQeTD5l6dMUXRRcYJ.js";const l={DOODLE_COUNT:{min:30,max:48},DOODLE_SIZE:{min:.08,max:.2},COMPLEXITY:{min:15,max:35},MOVEMENT_SPEED:{min:.03,max:.09},OPACITY:{min:.3,max:1},TIME_SPEED:{min:.1,max:3},RING_CYCLE_DURATION:{min:25,max:45},RING_EVENT_DURATION:{min:3,max:8},SEPARATION_DURATION:{min:.8,max:2.5},RETURNING_DURATION:{min:.8,max:2.5}};class G{group;doodles=[];doodleData=[];planetRadius;startTime;timeSpeed;rng;lightDirection=new d(1,1,1).normalize();lastDebugTime=0;debugInterval=30;debugMode=!1;cosmicRingState="normal";ringCycleDuration;ringEventDuration;separationDuration;returningDuration;doodleBasePositions=[];orbitalVisibilityFactor;orbitalData;currentTimeYears;createLitMaterial(t,e){const i=`
      varying vec3 vWorldPosition;
      varying vec3 vWorldNormal;
      
      void main() {
        vec4 worldPosition = modelMatrix * vec4(position, 1.0);
        vWorldPosition = worldPosition.xyz;
        vWorldNormal = normalize(mat3(modelMatrix) * normal);
        
        gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);
      }
    `,a=`
      uniform vec3 color;
      uniform float opacity;
      uniform vec3 lightDirection;
      uniform float ambientStrength;
      uniform float lightIntensity;
      
      varying vec3 vWorldPosition;
      varying vec3 vWorldNormal;
      
      void main() {
        vec3 normal = normalize(vWorldNormal);
        vec3 lightDir = normalize(-lightDirection);

        float dotNL = dot(normal, lightDir);
        float lightingFactor = max(0.0, dotNL);

        float rimLight = 1.0 - abs(dotNL);
        rimLight = pow(rimLight, 3.0) * 0.1;

        float totalLight = ambientStrength + (lightIntensity * lightingFactor) + rimLight;
        totalLight = clamp(totalLight, 0.6, 1.2);

        vec3 finalColor = mix(color * 0.8, color * totalLight, 0.7);
        
        gl_FragColor = vec4(finalColor, opacity);
      }
    `;return new C({vertexShader:i,fragmentShader:a,uniforms:{color:{value:new U(t)},opacity:{value:e},lightDirection:{value:this.lightDirection.clone()},ambientStrength:{value:.5},lightIntensity:{value:.8}},transparent:!0,side:V})}projectPointOnSphere(t,e,i,a){const s=a.clone().normalize(),n=new d(0,1,0).cross(s).normalize();n.lengthSq()<.001&&n.set(1,0,0).cross(s).normalize();const o=s.clone().cross(n).normalize(),c=n.clone().multiplyScalar(t).add(o.clone().multiplyScalar(e));return s.clone().add(c).normalize().multiplyScalar(i)}constructor(t,e={},i){this.group=new _,this.planetRadius=t;const a=i||12345;this.rng=new L(a),this.startTime=a%1e4/1e3,this.timeSpeed=this.rng.uniform(l.TIME_SPEED.min,l.TIME_SPEED.max),this.ringEventDuration=this.rng.uniform(l.RING_EVENT_DURATION.min,l.RING_EVENT_DURATION.max),this.separationDuration=this.rng.uniform(l.SEPARATION_DURATION.min,l.SEPARATION_DURATION.max),this.returningDuration=this.rng.uniform(l.RETURNING_DURATION.min,l.RETURNING_DURATION.max);const s=this.rng.uniform(l.RING_CYCLE_DURATION.min,l.RING_CYCLE_DURATION.max);this.ringCycleDuration=s+this.ringEventDuration,this.orbitalData=e.orbitalData,this.currentTimeYears=e.currentTime||0,this.orbitalVisibilityFactor=this.calculateOrbitalVisibility(),this.debugMode=!1,this.doodleData=this.generateProceduralDoodles(),this.doodleData.length>0&&this.createDoodles()}generateProceduralDoodles(){const t=[],e=this.rng.randint(l.DOODLE_COUNT.min,l.DOODLE_COUNT.max),i=["arc","fractals","squiggle"],a=["wave","pulse","spiral"];for(let s=0;s<e;s++){const n=this.rng.random()*2*Math.PI,o=Math.acos(this.rng.random()*2-1),c=[Math.sin(o)*Math.cos(n),Math.sin(o)*Math.sin(n),Math.cos(o)],r=this.rng.randint(200,255),h=this.rng.randint(0,100),m=this.rng.randint(150,255),g=this.rng.uniform(l.OPACITY.min,l.OPACITY.max),u=`#${r.toString(16).padStart(2,"0")}${h.toString(16).padStart(2,"0")}${m.toString(16).padStart(2,"0")}`;t.push({position_3d:c,type:i[this.rng.randint(0,i.length-1)],size:this.rng.uniform(l.DOODLE_SIZE.min,l.DOODLE_SIZE.max),color:[u,g],complexity:this.rng.randint(l.COMPLEXITY.min,l.COMPLEXITY.max),movement_speed:this.rng.uniform(l.MOVEMENT_SPEED.min,l.MOVEMENT_SPEED.max),movement_pattern:a[this.rng.randint(0,a.length-1)]})}return t}createDoodles(){this.doodleData.forEach((t,e)=>{let i;switch(t.type){case"arc":i=this.createArcDoodle(t);break;case"fractals":i=this.createFractalDoodle(t);break;case"squiggle":i=this.createSquiggleDoodle(t);break;default:i=this.createSquiggleDoodle(t)}const a=new d(...t.position_3d).normalize();this.doodleBasePositions[e]=a.multiplyScalar(this.planetRadius),this.doodles.push(i),this.group.add(i)})}createArcDoodle(t){const e=new _,a=new Y(0,0,t.size*this.planetRadius,t.size*this.planetRadius*.7,0,Math.PI*1.5,!1,0).getPoints(50),s=new N(a.map(h=>new d(h.x,h.y,0))),n=this.planetRadius*.004,o=new w(s,50,n,8,!1),c=this.createLitMaterial(t.color[0],t.color[1]),r=new S(o,c);return e.add(r),e}createFractalDoodle(t){const e=new _,i=Math.floor(t.complexity*.6)+2,a=new d(...t.position_3d),s=this.planetRadius;for(let n=0;n<i;n++){const o=(this.rng.random()-.5)*t.size*this.planetRadius,c=(this.rng.random()-.5)*t.size*this.planetRadius,r=[],h=Math.floor(this.rng.random()*20)+8,m=this.rng.random()*t.size*this.planetRadius*.3+.1;for(let b=0;b<=h;b++){const M=b/h*Math.PI*2,E=m*(.7+this.rng.random()*.6),y=M+(this.rng.random()-.5)*.5,D=o+Math.cos(y)*E,O=c+Math.sin(y)*E,T=this.projectPointOnSphere(D,O,s,a);r.push(T)}r.push(r[0]);const g=new N(r),u=this.planetRadius*.004,f=new w(g,r.length,u,8,!0),p=this.createLitMaterial(t.color[0],t.color[1]),x=new S(f,p);e.add(x)}return e}createSquiggleDoodle(t){const e=new _,i=Math.floor(t.complexity*.8)+3,a=new d(...t.position_3d),s=this.planetRadius;for(let n=0;n<i;n++){const o=[],c=this.rng.random()*15+5;let r=(this.rng.random()-.5)*t.size*this.planetRadius,h=(this.rng.random()-.5)*t.size*this.planetRadius;for(let m=0;m<=c;m++){const g=this.projectPointOnSphere(r,h,s,a);o.push(g),r+=(this.rng.random()-.5)*t.size*this.planetRadius*.2,h+=(this.rng.random()-.5)*t.size*this.planetRadius*.2;const u=t.size*this.planetRadius*.8;r=Math.max(-u,Math.min(u,r)),h=Math.max(-u,Math.min(u,h))}if(o.length>1){const m=new N(o),g=this.planetRadius*.004,u=new w(m,o.length*2,g,8,!1),f=this.createLitMaterial(t.color[0],t.color[1]),p=new S(u,f);e.add(p)}}return e}update(t){const i=A(F,this.timeSpeed,this.startTime),a=this.orbitalVisibilityFactor;if(this.orbitalVisibilityFactor=this.calculateOrbitalVisibility(),this.debugMode){const n=Date.now()/1e3;n-this.lastDebugTime>this.debugInterval&&(this.lastDebugTime=n,this.logOrbitalStatus()),a<=.001&&this.orbitalVisibilityFactor>.001||a>.001&&this.orbitalVisibilityFactor<=.001}if(!this.orbitalData||!this.orbitalData.enabled){this.cosmicRingState="normal",this.doodles.forEach(n=>{n.position.set(0,0,0)}),this.applyNormalAnimations(i);return}if(this.orbitalVisibilityFactor<=.001){this.cosmicRingState="normal",this.doodles.forEach(n=>{n.position.set(0,0,0)}),this.applyNormalAnimations(i);return}const s=i%this.ringCycleDuration;this.updateCosmicRingState(s),this.doodles.forEach((n,o)=>{const c=this.doodleData[o];if(!c)return;const r=this.calculateCosmicRingEffect(s,o),h=new d(0,0,0),m=this.doodleBasePositions[o],g=o%3,u=this.planetRadius*2.5,f=g*.3*this.planetRadius,p=m.clone().normalize().multiplyScalar(u+f),b=i*12,M=1+g*.4,E=b*M+o*(Math.PI*2/this.doodles.length),y=u*.08,D=new d().crossVectors(p,new d(0,1,0)).normalize();D.lengthSq()<.001&&D.set(1,0,0).cross(p.clone().normalize()).normalize();const O=new d().crossVectors(p.clone().normalize(),D).normalize(),T=p.clone().add(D.multiplyScalar(Math.cos(E)*y)).add(O.multiplyScalar(Math.sin(E)*y));let I;if(r.separationFactor<=.001)I=h.clone();else{let R=r.separationFactor;this.cosmicRingState==="separating"?R=this.easeOutQuart(R):this.cosmicRingState==="returning"&&(R=this.easeInOutCubic(R)),I=h.clone().lerp(T,R)}n.position.copy(I);const P=c.movement_speed*r.speedMultiplier;switch(c.movement_pattern){case"wave":n.rotation.z=Math.sin(i*P)*.2;break;case"pulse":n.rotation.z=Math.sin(i*P*2)*.15;break;case"spiral":n.rotation.z=i*P;break}})}calculateOrbitalVisibility(){if(!this.orbitalData||!this.orbitalData.enabled)return 1;const e=this.currentTimeYears%this.orbitalData.cycle_duration_years/this.orbitalData.cycle_duration_years,i=this.orbitalData.visible_duration_years/this.orbitalData.cycle_duration_years;if(e<i){const a=e/i;return a<.1?a/.1:a>.9?(1-a)/.1:1}else return 0}applyNormalAnimations(t){this.doodles.forEach((e,i)=>{const a=this.doodleData[i];if(!a)return;const s=a.movement_speed;switch(a.movement_pattern){case"wave":e.rotation.z=Math.sin(t*s)*.2;break;case"pulse":e.rotation.z=Math.sin(t*s*2)*.15;break;case"spiral":e.rotation.z=t*s;break}})}updateCosmicRingState(t){const e=this.ringCycleDuration-this.ringEventDuration;t<e?this.cosmicRingState="normal":t<e+this.separationDuration?this.cosmicRingState="separating":t<e+this.separationDuration+(this.ringEventDuration-this.separationDuration-this.returningDuration)?this.cosmicRingState="ring_mode":this.cosmicRingState="returning"}calculateCosmicRingEffect(t,e){const i=this.ringCycleDuration-this.ringEventDuration;let a=0,s=0,n=1;switch(this.cosmicRingState){case"normal":a=0,s=0,n=1;break;case"separating":const c=(t-i)/this.separationDuration;a=this.easeOutQuart(c),s=12,n=1+a*7;break;case"ring_mode":a=1,s=12,n=8;break;case"returning":const r=i+this.separationDuration+(this.ringEventDuration-this.separationDuration-this.returningDuration),h=(t-r)/this.returningDuration;a=1-this.easeInQuart(h),s=12,n=1+a*7;break}const o=e/this.doodles.length*.3;if(this.cosmicRingState==="separating"){const c=Math.max(0,(t-i-o*this.separationDuration)/this.separationDuration);a=this.easeOutQuart(c)}else if(this.cosmicRingState==="returning"){const c=i+this.separationDuration+(this.ringEventDuration-this.separationDuration-this.returningDuration),r=Math.max(0,(t-c-o*this.returningDuration)/this.returningDuration);a=1-this.easeInQuart(r)}return{separationFactor:a,orbitalSpeed:s,speedMultiplier:n}}smoothstep(t,e,i){const a=Math.max(0,Math.min(1,(i-t)/(e-t)));return a*a*(3-2*a)}logOrbitalStatus(){if(!this.orbitalData||!this.orbitalData.enabled)return;const t=this.currentTimeYears,e=t%this.orbitalData.cycle_duration_years/this.orbitalData.cycle_duration_years,i=this.orbitalData.visible_duration_years/this.orbitalData.cycle_duration_years,a=e<i,s=t%this.orbitalData.cycle_duration_years;let n;a?n=this.orbitalData.visible_duration_years-s:n=this.orbitalData.cycle_duration_years-s;const o=n*365.25,c=o*24,r=c*60;o>1?`${o.toFixed(1)}`:c>1?`${c.toFixed(1)}`:`${r.toFixed(1)}`}easeInOutCubic(t){return t<.5?4*t*t*t:1-Math.pow(-2*t+2,3)/2}easeOutQuart(t){return 1-Math.pow(1-t,4)}easeInQuart(t){return t*t*t*t}updateLightDirection(t){this.lightDirection.copy(t).normalize(),this.doodles.forEach(e=>{e.traverse(i=>{(i instanceof z||i instanceof S)&&i.material instanceof C&&i.material.uniforms.lightDirection&&i.material.uniforms.lightDirection.value.copy(this.lightDirection)})})}updateFromThreeLight(t){const e=t.position.clone().normalize();this.updateLightDirection(e)}addToScene(t,e){this.group.position.copy(e),t.add(this.group)}removeFromScene(t){t.remove(this.group)}getObject3D(){return this.group}dispose(){this.doodles.forEach(t=>{t.traverse(e=>{(e instanceof S||e instanceof z)&&(e.geometry.dispose(),e.material instanceof k&&e.material.dispose())})}),this.doodles=[]}}function Q(v,t,e,i){const a=i?.timing?.elapsed_time?i.timing.elapsed_time/31557600:0,s=i?.surface_elements?.exotic_doodles;return new G(v,{planetRadius:v,orbitalData:s,currentTime:a},e)}export{G as E,Q as c};
