import{S as T}from"./atlas_DhOreEVM1uBHzRPTt7uMw.js";import{C,V as g,G as B,z as O,N as A,D as _,b as w,M as R,u as D}from"./atlas_CLp6T-BwF8hBVTNM0OiQd.js";const N={DEFAULT:{BUBBLE_COUNT:{min:8,max:15},BUBBLE_SIZE:{min:.004,max:.008},RISE_SPEED:{min:.008,max:.015},EXPANSION_RATE:{min:.006,max:.012},POP_DISTANCE:{min:.15,max:.25},OPACITY:{min:.15,max:.35},EMISSION_RATE:{min:.8,max:1.5}},SWAMP:{BUBBLE_COUNT:{min:450,max:900},BUBBLE_SIZE:{min:.01,max:.05},RISE_SPEED:{min:.003,max:.008},EXPANSION_RATE:{min:.002,max:.004},POP_DISTANCE:{min:.2,max:.35},OPACITY:{min:.2,max:.9},EMISSION_RATE:{min:8,max:12}}};class z{bubbles=[];bubbleGroup;material;geometry;rng;params;planetRadius;planetCenter=new g(0,0,0);bubbleCycleData=[];constructor(i,t={}){this.planetRadius=i,this.rng=new T(t.seed||Math.random()*1e6);const e=t.planetType||"SWAMP",s=N[e],n=t.bubbleCount||this.rng.randint(s.BUBBLE_COUNT.min,s.BUBBLE_COUNT.max),u=t.bubbleSize||i*this.rng.uniform(s.BUBBLE_SIZE.min,s.BUBBLE_SIZE.max);this.params={bubbleCount:n,bubbleSize:u,riseSpeed:t.riseSpeed||this.rng.uniform(s.RISE_SPEED.min,s.RISE_SPEED.max),expansionRate:t.expansionRate||this.rng.uniform(s.EXPANSION_RATE.min,s.EXPANSION_RATE.max),popDistance:t.popDistance||i*this.rng.uniform(s.POP_DISTANCE.min,s.POP_DISTANCE.max),bubbleColor:t.bubbleColor||new C(5078031),opacity:t.opacity||this.rng.uniform(s.OPACITY.min,s.OPACITY.max),emissionRate:t.emissionRate||this.rng.uniform(s.EMISSION_RATE.min,s.EMISSION_RATE.max),seed:t.seed||Math.random()*1e6,planetType:e,cosmicOriginTime:t.cosmicOriginTime||51408e4,timeSpeed:t.timeSpeed||this.rng.uniform(.5,2)},this.bubbleGroup=new B,this.setupMaterials(),this.setupGeometry(),this.generateBubbleCycleData(),this.createBubbleMeshes()}setupMaterials(){this.material=new O({color:this.params.bubbleColor,transparent:!0,opacity:0,side:_,depthWrite:!1,depthTest:!0,blending:A})}setupGeometry(){this.geometry=new w(.3,12,8)}generateBubbleCycleData(){for(let i=0;i<this.params.bubbleCount;i++){const t=new T(this.params.seed+i),e=i*2.3%60,s=t.uniform(2,4),n=t.uniform(3,5),u=t.uniform(15,25),m=.5,c=s+n+u+m+1+t.uniform(5,15),h=this.getProceduralSurfacePoint(i),p=h.clone().sub(this.planetCenter).normalize(),o={bubbleIndex:i,birthOffset:e,cycleDuration:c,fadeInDuration:s,emergeDuration:n,riseDuration:u,popDuration:m,maxSize:this.params.bubbleSize*t.uniform(.8,1.5),riseSpeed:this.params.riseSpeed*t.uniform(.7,1.3),wobbleSpeed:t.uniform(.5,1.5),wobbleAmplitude:t.uniform(.002,.008),emergenceSpeed:t.uniform(.3,.6),startPosition:h.clone(),riseDirection:p};this.bubbleCycleData.push(o)}}getProceduralSurfacePoint(i){const t=i,e=0,s=Math.sin(t*.618+1.26*e*(1.03+.5*Math.cos(.21*t)))*Math.PI*2,n=Math.abs(Math.cos(t*.382+1.12*e*Math.cos(1.22+.1424*t)))*Math.PI,u=Math.sin(t*1.32+e*.1*Math.sin(.92+.53*t))*.3,m=Math.cos(t*2.43+e*.15*Math.cos(1.37+.29*t))*.2,r=s+u,c=n+m,h=.95+.05*Math.sin(t*.73+e*.2),p=this.planetRadius*h,o=p*Math.sin(c)*Math.cos(r),l=p*Math.sin(c)*Math.sin(r),b=p*Math.cos(c);return new g(o,l,b).add(this.planetCenter)}createBubbleMeshes(){for(let i=0;i<this.bubbleCycleData.length;i++){const t=this.bubbleCycleData[i],e=this.material.clone();e.opacity=0;const s=new R(this.geometry,e);s.position.copy(t.startPosition),s.scale.setScalar(0),s.visible=!1;const n={cycleData:t,mesh:s,currentPhase:"hidden"};this.bubbles.push(n),this.bubbleGroup.add(s)}}getCurrentCosmicTime(){return(Date.now()/1e3-this.params.cosmicOriginTime)*this.params.timeSpeed}calculateBubbleState(i,t){const e=i.cycleData,n=(t+e.birthOffset)%e.cycleDuration,m=0+e.fadeInDuration,r=m+e.emergeDuration,c=r+e.riseDuration,h=c+e.popDuration,p=h+1;let o="hidden",l=0,b=0,S=e.startPosition.clone();if(n<m){o="fadeIn";const a=n/e.fadeInDuration;l=this.params.opacity*a,b=e.maxSize*.1*a}else if(n<r){o="emerging";const a=(n-m)/e.emergeDuration;l=this.params.opacity,b=D.lerp(e.maxSize*.1,e.maxSize*.7,D.smoothstep(a,0,1));const d=D.smoothstep(a,0,1),f=e.riseDirection.clone().multiplyScalar(this.planetRadius).add(this.planetCenter);S=e.startPosition.clone().lerp(f,d)}else if(n<c){o="rising";const a=(n-r)/e.riseDuration;l=this.params.opacity,b=D.lerp(e.maxSize*.7,e.maxSize,a);const d=e.riseSpeed*(n-r),f=e.riseDirection.clone().multiplyScalar(this.planetRadius).add(this.planetCenter),E=(n-r)*e.wobbleSpeed,P=Math.sin(E+e.bubbleIndex*.31)*e.wobbleAmplitude,x=Math.cos(E*1.3+e.bubbleIndex*.47)*e.wobbleAmplitude,M=Math.sin(E*.7+e.bubbleIndex*.13)*e.wobbleAmplitude,I=new g(P,x,M);S=f.clone().add(e.riseDirection.clone().multiplyScalar(d)).add(I)}else if(n<h){o="popping";const a=(n-c)/e.popDuration;l=this.params.opacity*(1-a)*.5,b=e.maxSize*(1+a*1.5);const d=e.riseSpeed*e.riseDuration;S=e.riseDirection.clone().multiplyScalar(this.planetRadius).add(this.planetCenter).clone().add(e.riseDirection.clone().multiplyScalar(d))}else n<p?(o="fadeOut",l=0,b=0):(o="hidden",l=0,b=0);i.currentPhase=o,i.mesh.visible=o!=="hidden",i.mesh.position.copy(S),i.mesh.scale.setScalar(b),i.mesh.material.opacity=Math.max(0,l)}update(i){const t=this.getCurrentCosmicTime();for(const e of this.bubbles)this.calculateBubbleState(e,t)}addToScene(i,t){if(t){this.planetCenter.copy(t),this.bubbleGroup.position.copy(t),this.generateBubbleCycleData();for(let e=0;e<this.bubbles.length;e++)this.bubbles[e].cycleData=this.bubbleCycleData[e]}i.add(this.bubbleGroup)}removeFromScene(i){i.remove(this.bubbleGroup)}dispose(){this.geometry.dispose(),this.material.dispose(),this.bubbles.forEach(i=>{this.bubbleGroup.remove(i.mesh),i.mesh.material!==this.material&&i.mesh.material.dispose()}),this.bubbles.length=0}setEnabled(i){this.bubbleGroup.visible=i}isEnabled(){return this.bubbleGroup.visible}getBubbleCount(){return this.bubbles.filter(i=>i.currentPhase!=="hidden").length}}function L(y,i,t,e){if(!i.toxic_bubbles)return null;const s=i.toxic_bubbles;return new z(y,{bubbleColor:s.color?new C(s.color[0],s.color[1],s.color[2]):void 0,seed:t,planetType:"SWAMP",cosmicOriginTime:e,timeSpeed:1})}export{z as T,L as c};
