import{D as p,S as O}from"./atlas_CGrAwTYnSDNTtni2msvpu.js";import{G as T,z as g,C as d,M as y,O as I,K as M,U as f,W as _,t as D,B as E,S as A,A as b,o as R,V as x}from"./atlas_BptVXGp7hwWSDe7IbaYgj.js";const l={CRYSTAL_COUNT:{min:10,max:40},CRYSTAL_DISTANCE:{min:1.2,max:2.5},ORBITAL_SPEED:{min:1.1,max:4.6},DEBRIS_COUNT:{min:15,max:35},CONNECTION_PROBABILITY:.4};class L{group;crystals=[];debris=[];connections=[];params;rng;planetRadius;cosmicOffset;constructor(t,o={}){this.planetRadius=t;const n=o.seed||Math.floor(Math.random()*1e6);this.rng=new O(n),this.params={color:o.color||[.3,.8,1],crystalCount:o.crystalCount||Math.floor(this.rng.random()*(l.CRYSTAL_COUNT.max-l.CRYSTAL_COUNT.min)+l.CRYSTAL_COUNT.min),crystalDistance:o.crystalDistance||this.rng.random()*(l.CRYSTAL_DISTANCE.max-l.CRYSTAL_DISTANCE.min)+l.CRYSTAL_DISTANCE.min,orbitalSpeed:o.orbitalSpeed||this.rng.random()*(l.ORBITAL_SPEED.max-l.ORBITAL_SPEED.min)+l.ORBITAL_SPEED.min,debrisCount:o.debrisCount||Math.floor(this.rng.random()*(l.DEBRIS_COUNT.max-l.DEBRIS_COUNT.min)+l.DEBRIS_COUNT.min),cosmicOriginTime:o.cosmicOriginTime||p,seed:n},this.cosmicOffset=n%100*.1,this.group=new T,this.createCrystalFormations(),this.createDebrisField(),this.createConnections()}createCrystalFormations(){const t=this.params.crystalCount,o=this.planetRadius+this.params.crystalDistance;for(let n=0;n<t;n++){const a=o+this.rng.random()*1-.5,i=this.rng.random()*Math.PI,s=this.rng.random()*Math.PI*2,r=this.rng.random()*Math.PI*2,e=this.calculateOrbitalPosition(a,i,s,r),m=this.createCrystalGeometry(),h=new g({color:new d(this.params.color[0],this.params.color[1],this.params.color[2]),transparent:!0,opacity:.8,wireframe:!1}),c=new y(m,h);c.position.set(e.x,e.y,e.z),c.rotation.set(this.rng.random()*Math.PI*2,this.rng.random()*Math.PI*2,this.rng.random()*Math.PI*2),c.userData={distance:a,inclination:i,longitudeOfAscendingNode:s,initialAngle:r,orbitalSpeed:this.rng.random()*.3+.2,rotationSpeed:(this.rng.random()-.5)*.02,originalScale:1},this.crystals.push(c),this.group.add(c)}}createCrystalGeometry(){const t=Math.floor(this.rng.random()*4),o=this.planetRadius*(.04+this.rng.random()*.03);switch(t){case 0:return new D(o*.6,o*2,6);case 1:return new _(o,0);case 2:return new f(o*1.2,0);case 3:return new M(o,1);default:return new I(o,1)}}createDebrisField(){const t=this.params.debrisCount,o=this.planetRadius+this.params.crystalDistance+.5;for(let n=0;n<t;n++){const a=o+this.rng.random()*2-1,i=this.rng.random()*Math.PI,s=this.rng.random()*Math.PI*2,r=this.rng.random()*Math.PI*2,e=this.calculateOrbitalPosition(a,i,s,r),m=new f(this.planetRadius*.006,0),h=new g({color:new d(this.params.color[0]*.7,this.params.color[1]*.7,this.params.color[2]*.9),transparent:!0,opacity:.6}),c=new y(m,h);c.position.set(e.x,e.y,e.z),c.userData={distance:a,inclination:i,longitudeOfAscendingNode:s,initialAngle:r,orbitalSpeed:this.rng.random()*.8+.4,rotationSpeed:(this.rng.random()-.5)*.05},this.debris.push(c),this.group.add(c)}}createConnections(){for(let t=0;t<this.crystals.length;t++)for(let o=t+1;o<this.crystals.length;o++)if(this.rng.random()<l.CONNECTION_PROBABILITY){const n=this.crystals[t],a=this.crystals[o],i=[n.position.clone(),a.position.clone()],s=new E().setFromPoints(i),r=new A({uniforms:{time:{value:0},color:{value:new d(this.params.color[0],this.params.color[1],this.params.color[2])},opacity:{value:.4}},vertexShader:`
              uniform float time;
              varying float vIntensity;
              
              void main() {
                vIntensity = sin(time * 3.0 + position.x * 10.0) * 0.5 + 0.5;
                gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);
              }
            `,fragmentShader:`
              uniform vec3 color;
              uniform float opacity;
              varying float vIntensity;
              
              void main() {
                float finalOpacity = opacity * vIntensity;
                gl_FragColor = vec4(color, finalOpacity);
              }
            `,transparent:!0,blending:b,depthWrite:!1}),e=new R(s,r);e.renderOrder=997,e.userData={crystal1Index:t,crystal2Index:o},this.connections.push(e),this.group.add(e)}}calculateOrbitalPosition(t,o,n,a){const i=t*Math.cos(a),s=t*Math.sin(a),r=0,e=i,m=s*Math.cos(o)-r*Math.sin(o),h=s*Math.sin(o)+r*Math.cos(o),c=e*Math.cos(n)-m*Math.sin(n),S=e*Math.sin(n)+m*Math.cos(n),C=h;return new x(c,S,C)}update(t){const a=(Date.now()/1e3-(this.params.cosmicOriginTime||p)+this.cosmicOffset)*(this.params.orbitalSpeed||1);this.crystals.forEach(i=>{const s=i.userData,r=s.initialAngle+a*s.orbitalSpeed*.1,e=this.calculateOrbitalPosition(s.distance,s.inclination,s.longitudeOfAscendingNode,r);i.position.set(e.x,e.y,e.z),i.rotation.x+=s.rotationSpeed,i.rotation.y+=s.rotationSpeed*.7,i.rotation.z+=s.rotationSpeed*1.3;const m=Math.sin(a*2+s.initialAngle)*.1+1;i.scale.setScalar(s.originalScale*m)}),this.debris.forEach(i=>{const s=i.userData,r=s.initialAngle+a*s.orbitalSpeed*.15,e=this.calculateOrbitalPosition(s.distance,s.inclination,s.longitudeOfAscendingNode,r);i.position.set(e.x,e.y,e.z),i.rotation.x+=s.rotationSpeed,i.rotation.y+=s.rotationSpeed*.8}),this.connections.forEach(i=>{const s=i.userData,r=this.crystals[s.crystal1Index],e=this.crystals[s.crystal2Index],m=[r.position,e.position],h=i.geometry;h.setFromPoints(m),h.attributes.position.needsUpdate=!0;const c=i.material;c.uniforms.time.value=a})}getObject3D(){return this.group}addToScene(t,o){o&&this.group.position.copy(o),t.add(this.group)}removeFromScene(t){t.remove(this.group)}dispose(){this.crystals.forEach(t=>{t.geometry.dispose(),t.material.dispose()}),this.debris.forEach(t=>{t.geometry.dispose(),t.material.dispose()}),this.connections.forEach(t=>{t.geometry.dispose(),t.material.dispose()}),this.group.clear()}setEnabled(t){this.group.visible=t}updateParams(t){if(Object.assign(this.params,t),t.color){const o=new d(t.color[0],t.color[1],t.color[2]);this.crystals.forEach(n=>{n.material.color=o}),this.connections.forEach(n=>{const a=n.material;a.uniforms.color.value=o})}}}function N(u,t,o){const a={seed:(o||Math.floor(Math.random()*1e6))+80002,color:t.color||[.3,.8,1],cosmicOriginTime:t?.timing?.cosmic_origin_time||t?.cosmicOriginTime||p};return new L(u,a)}export{L,N as c};
