import{S as P}from"./atlas_C7ZhNUnMOt3kEE8jtIwhb.js";import{C as d,G as z,V as f,B as O,a as T,S as H,N as U,P as N,Q as V}from"./atlas_BjkcO1_mNssSqp05cLhjd.js";const s={TRAIL_COUNT:{min:8,max:15},EMISSION_FREQUENCY:{min:.3,max:1.2},TRAIL_HEIGHT:{min:.3,max:.8},TRAIL_SPREAD:{min:.4,max:1.4},PARTICLES_PER_TRAIL:{min:20,max:40},PARTICLE_SIZE:{min:.08,max:.22},PARTICLE_LIFETIME:{min:1.5,max:5},PARTICLE_SPEED:{min:.08,max:.35},PARTICLE_DRAG:{min:.85,max:.98},ATMOSPHERE_HEIGHT:{min:4,max:10},OPACITY:{min:.15,max:.45},TURBULENCE:{min:.3,max:1.8},WIND_STRENGTH:{min:.05,max:.25}};class X{position;direction;lastEmissionTime=0;isActive=!1;rng;particleDirections=[];particleSpeeds=[];particleSizes=[];particleLifetimes=[];particleBirthTimes=[];particleActive=[];constructor(i,t,a,e,r,o,n,l){this.position=i,this.direction=i.clone().normalize(),this.rng=new P(t);for(let c=0;c<a;c++)this.particleDirections.push(this.getRandomDirection(e)),this.particleSpeeds.push(r*(.6+this.rng.random()*.8)),this.particleSizes.push(o*l*(.7+this.rng.random()*.6)),this.particleLifetimes.push(n*(.8+this.rng.random()*.4)),this.particleBirthTimes.push(-1),this.particleActive.push(!1)}initializeStateFromAbsoluteTime(i,t,a){const e=1/t,r=a*.618%1;this.lastEmissionTime=i-r*e;const o=Math.min(10,this.particleLifetimes.length);for(let n=0;n<o;n++){const l=this.lastEmissionTime-n*e,c=i-l;c>=0&&c<this.particleLifetimes[n]&&(this.particleActive[n]=!0,this.particleBirthTimes[n]=l)}this.isActive=!0}shouldEmit(i,t){return i-this.lastEmissionTime>=1/t}startEmission(i){this.lastEmissionTime=i,this.isActive=!0}getRandomDirection(i){const t=this.rng.uniform(0,Math.PI*2),a=this.rng.uniform(0,i*.7),e=.3,r=a*(1-e),o=new f(Math.sin(r)*Math.cos(t),Math.sin(r)*Math.sin(t),Math.cos(r)+e).normalize(),n=new V;return n.setFromUnitVectors(new f(0,0,1),this.direction),o.applyQuaternion(n),o}}class y{trailGroup;trails=[];particleSystem;particleGeometry;particleMaterial;params;startTime;planetRadius;maxParticles=1200;orbitalVisibilityFactor;temperatureActivationFactor;static vertexShader=`
    attribute float size;
    attribute float opacity;
    attribute float atmosphereFade;
    
    varying float vOpacity;
    varying float vAtmosphereFade;
    
    void main() {
      vOpacity = opacity;
      vAtmosphereFade = atmosphereFade;
      
      vec4 mvPosition = modelViewMatrix * vec4(position, 1.0);
      gl_PointSize = size * (300.0 / -mvPosition.z);
      gl_Position = projectionMatrix * mvPosition;
    }
  `;static fragmentShader=`
    uniform vec3 baseColor;
    uniform vec3 atmosphereColor;
    uniform float globalOpacity;
    
    varying float vOpacity;
    varying float vAtmosphereFade;
    
    void main() {
      // Forma circular de la partícula con bordes suaves
      vec2 center = gl_PointCoord - vec2(0.5);
      float dist = length(center);
      
      // Forma circular suave
      float alpha = 1.0 - smoothstep(0.1, 0.5, dist);
      alpha *= vOpacity * globalOpacity;
      
      // Descartar píxeles transparentes
      if (alpha < 0.02) discard;
      
      // Mezcla de colores base y atmosférico según fade
      vec3 color = mix(baseColor, atmosphereColor, vAtmosphereFade);
      
      gl_FragColor = vec4(color, alpha);
    }
  `;constructor(i,t={}){this.planetRadius=i;const a=t.seed||Math.floor(Math.random()*1e6),e=new P(a);this.startTime=t.startTime||a%1e4/1e3;const r=t.baseColor instanceof d?t.baseColor:new d(.25,.25,.28),o=t.atmosphereColor instanceof d?t.atmosphereColor:new d(.35,.35,.38);this.params={trailCount:t.trailCount||Math.floor(e.uniform(s.TRAIL_COUNT.min,s.TRAIL_COUNT.max)),emissionFrequency:t.emissionFrequency||e.uniform(s.EMISSION_FREQUENCY.min,s.EMISSION_FREQUENCY.max),trailHeight:t.trailHeight||e.uniform(s.TRAIL_HEIGHT.min,s.TRAIL_HEIGHT.max),trailSpread:t.trailSpread||e.uniform(s.TRAIL_SPREAD.min,s.TRAIL_SPREAD.max),particlesPerTrail:t.particlesPerTrail||Math.floor(e.uniform(s.PARTICLES_PER_TRAIL.min,s.PARTICLES_PER_TRAIL.max)),particleSize:t.particleSize||e.uniform(s.PARTICLE_SIZE.min,s.PARTICLE_SIZE.max),particleLifetime:t.particleLifetime||e.uniform(s.PARTICLE_LIFETIME.min,s.PARTICLE_LIFETIME.max),particleSpeed:t.particleSpeed||e.uniform(s.PARTICLE_SPEED.min,s.PARTICLE_SPEED.max),particleDrag:t.particleDrag||e.uniform(s.PARTICLE_DRAG.min,s.PARTICLE_DRAG.max),baseColor:r,atmosphereColor:o,opacity:t.opacity||e.uniform(s.OPACITY.min,s.OPACITY.max),atmosphereHeight:t.atmosphereHeight||e.uniform(s.ATMOSPHERE_HEIGHT.min,s.ATMOSPHERE_HEIGHT.max),fadeDistance:t.fadeDistance||e.uniform(.3,.8),turbulenceStrength:t.turbulenceStrength||e.uniform(s.TURBULENCE.min,s.TURBULENCE.max),windStrength:t.windStrength||e.uniform(s.WIND_STRENGTH.min,s.WIND_STRENGTH.max),seed:a,startTime:this.startTime,timeSpeed:t.timeSpeed||e.uniform(.3,1.5),orbitalData:t.orbitalData,currentTime:t.currentTime||0,planetTemperature:t.planetTemperature||0},this.temperatureActivationFactor=this.calculateTemperatureActivation(),this.orbitalVisibilityFactor=this.calculateOrbitalVisibility(),this.trailGroup=new z,this.createTrailPoints(e),this.initializeStateFromAbsoluteTime(),this.createParticleSystem(),this.initializeActiveTrails();const l=(this.startTime+Date.now()/1e3*this.params.timeSpeed)%1e3;this.updateParticleGeometry(l)}initializeStateFromAbsoluteTime(){const t=(this.startTime+Date.now()/1e3*this.params.timeSpeed)%1e3;for(let a=0;a<this.trails.length;a++)this.trails[a].initializeStateFromAbsoluteTime(t,this.params.emissionFrequency,a)}createTrailPoints(i){const t=this.params.trailCount;for(let a=0;a<t;a++){const e=i.uniform(0,Math.PI*2),r=Math.acos(i.uniform(-1,1)),o=new f(Math.sin(r)*Math.cos(e)*this.planetRadius,Math.sin(r)*Math.sin(e)*this.planetRadius,Math.cos(r)*this.planetRadius),n=new X(o,Math.floor(i.random()*1e6),this.params.particlesPerTrail,this.params.trailSpread,this.params.particleSpeed,this.params.particleSize,this.params.particleLifetime,this.planetRadius);n.isActive=!0,n.lastEmissionTime=-10,this.trails.push(n)}}createParticleSystem(){this.particleGeometry=new O;const i=new Float32Array(this.maxParticles*3),t=new Float32Array(this.maxParticles),a=new Float32Array(this.maxParticles),e=new Float32Array(this.maxParticles);this.particleGeometry.setAttribute("position",new T(i,3)),this.particleGeometry.setAttribute("size",new T(t,1)),this.particleGeometry.setAttribute("opacity",new T(a,1)),this.particleGeometry.setAttribute("atmosphereFade",new T(e,1)),this.particleMaterial=new H({vertexShader:y.vertexShader,fragmentShader:y.fragmentShader,uniforms:{baseColor:{value:this.params.baseColor},atmosphereColor:{value:this.params.atmosphereColor},globalOpacity:{value:this.params.opacity}},transparent:!0,blending:U,depthWrite:!1,vertexColors:!1}),this.particleSystem=new N(this.particleGeometry,this.particleMaterial),this.particleSystem.renderOrder=10,this.trailGroup.add(this.particleSystem)}initializeActiveTrails(){}calculateTemperatureActivation(){const i=this.params.planetTemperature||0;return i>1200?0:i<-200?.2:i>=-100&&i<=600?1:i<-100?.2+(i+200)/100*.8:1-(i-600)/600*1}calculateOrbitalVisibility(){if(!this.params.orbitalData||!this.params.orbitalData.enabled)return 1;const t=((this.params.currentTime||0)+(Date.now()/1e3-this.startTime)/(365.25*24*3600))%this.params.orbitalData.cycle_duration_years/this.params.orbitalData.cycle_duration_years,a=this.params.orbitalData.visible_duration_years/this.params.orbitalData.cycle_duration_years;if(t<=a){const e=t/a;return e<.15?e/.15:e>.85?(1-e)/.15:1}return 0}updateParticleGeometry(i){const t=this.particleGeometry.attributes.position,a=this.particleGeometry.attributes.size,e=this.particleGeometry.attributes.opacity,r=this.particleGeometry.attributes.atmosphereFade;let o=0;const n=this.planetRadius*this.params.atmosphereHeight;for(let l=0;l<this.trails.length;l++){const c=this.trails[l];for(let m=0;m<this.params.particlesPerTrail&&o<this.maxParticles;m++){const b=m/this.params.particlesPerTrail*.8,I=l*.5%2,v=i+I-b,u=Math.abs(v%c.particleLifetimes[m]);if(u>=0&&u<c.particleLifetimes[m]){const A=c.particleDirections[m].clone();let R=c.particleSpeeds[m];R*=Math.pow(this.params.particleDrag,u);const C=R*u;let p=c.position.clone().add(A.multiplyScalar(C));const x=.1*u;p.y+=x;const M=u*.08,F=new f(A.x,0,A.z).normalize();p.add(F.multiplyScalar(M));const S=this.params.turbulenceStrength*.08,E=i*2+m*.3;if(p.x+=Math.sin(E)*S,p.y+=Math.cos(E*.7)*S*.8,p.z+=Math.sin(E*1.4)*S,p.length()>n)continue;const _=u/c.particleLifetimes[m],L=this.smoothstep(0,.1,_),G=this.smoothstep(1,.7,_),g=L*G;let w=0;const D=c.particleSizes[m]*(1-_*.2);g>.01&&(t.setXYZ(o,p.x,p.y,p.z),a.setX(o,D),e.setX(o,g),r.setX(o,w),o++)}}}for(let l=o;l<this.maxParticles;l++)t.setXYZ(l,0,0,0),a.setX(l,0),e.setX(l,0),r.setX(l,0);t.needsUpdate=!0,a.needsUpdate=!0,e.needsUpdate=!0,r.needsUpdate=!0,o>0?console.log(`CarbonTrails: ${o} partículas activas`):console.log("CarbonTrails: NO HAY PARTÍCULAS ACTIVAS - Revisar tiempo absoluto"),this.particleGeometry.setDrawRange(0,o)}smoothstep(i,t,a){const e=Math.max(0,Math.min(1,(a-i)/(t-i)));return e*e*(3-2*e)}update(i){const a=(this.startTime+Date.now()/1e3*this.params.timeSpeed)%1e3;this.orbitalVisibilityFactor=this.calculateOrbitalVisibility();const e=this.temperatureActivationFactor*this.orbitalVisibilityFactor;if(e>0){if(this.updateParticleGeometry(a),this.particleMaterial&&this.particleMaterial.uniforms){const r=this.params.opacity||1;this.particleMaterial.uniforms.globalOpacity.value=r*e}}else this.hideAllParticles()}hideAllParticles(){const i=this.particleGeometry.attributes.position,t=this.particleGeometry.attributes.size,a=this.particleGeometry.attributes.opacity,e=this.particleGeometry.attributes.atmosphereFade;for(let r=0;r<this.maxParticles;r++)i.setXYZ(r,0,0,0),t.setX(r,0),a.setX(r,0),e.setX(r,0);i.needsUpdate=!0,t.needsUpdate=!0,a.needsUpdate=!0,e.needsUpdate=!0,this.particleGeometry.setDrawRange(0,0)}addToScene(i,t){t&&this.trailGroup.position.copy(t),i.add(this.trailGroup)}getObject3D(){return this.trailGroup}dispose(){this.particleGeometry.dispose(),this.particleMaterial.dispose(),this.trailGroup.clear(),this.trails=[]}}function Z(h,i,t){const a=h?.seeds?.planet_seed||Math.floor(Math.random()*1e6),e=h?.original_planet_data?.surface_temperature||0,r=h?.timing?.elapsed_time?h.timing.elapsed_time/(365.25*24*3600):0,o=h?.original_planet_data?.orbital_period_seconds?h.original_planet_data.orbital_period_seconds/(365.25*24*3600):1,n=h?.carbon_trails_data||{},l=new P(a+11001),c=n.cycle_duration_years||l.uniform(o*.2,o*.9),m={enabled:n.enabled!==void 0?n.enabled:!0,cycle_duration_years:c,visible_duration_years:n.visible_duration_years||l.uniform(c*.5,c*.75)},b={seed:a+11e3,planetTemperature:e,orbitalData:m,currentTime:r};return new y(i,b)}export{y as C,Z as c};
