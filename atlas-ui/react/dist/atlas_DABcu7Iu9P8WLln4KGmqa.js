import{S as z,g as G,D as k}from"./atlas_xfnyr93axqOl2-j5dyf-s.js";import{G as x,C as f,B as A,a as Z,s as L,N as v,L as R,V as F}from"./atlas_DykKF8lCJH3_A5qpAP-Im.js";class O{snowflakeGroup;planetRadius;materials=[];particleSystems=[];trailPositions=[];trailColors=[];globalWindDirection;rng;startTime;timeSpeed;trailLength=15;particleCount;rotationSpeed;particleOpacity;windSpeedMultiplier;verticalOscillation;gustCycles;gustPhases;gustZones;burstZone;burstCycleDuration;burstDuration;burstStartOffset;constructor(s,e={}){this.snowflakeGroup=new x,this.planetRadius=s;const a=e.seed||Math.floor(Math.random()*1e6);this.rng=new z(a),this.particleCount=e.particleCount||10,e.windSpeed;const m=(e.size||1)*(s*.2),o=e.opacity||1;this.globalWindDirection=this.rng.uniform(0,Math.PI*2),this.startTime=this.rng.uniform(0,1e3),this.timeSpeed=this.rng.uniform(2,4),this.rotationSpeed=this.rng.uniform(.2,.8),this.particleOpacity=this.rng.uniform(.05,.25),this.windSpeedMultiplier=this.rng.uniform(1.1,2.5),this.verticalOscillation=this.rng.uniform(.1,.4),this.gustCycles=[],this.gustPhases=[],this.gustZones=[];for(let n=0;n<this.particleCount;n++){this.gustCycles.push(this.rng.uniform(15,30)),this.gustPhases.push(this.rng.uniform(0,1));const i=this.rng.uniform(0,Math.PI*2),t=this.rng.uniform(Math.PI*.3,Math.PI*.6);this.gustZones.push({start:i,end:(i+t)%(Math.PI*2)})}this.burstZone={lat:this.rng.uniform(-Math.PI/3,Math.PI/3),lon:this.rng.uniform(0,Math.PI*2),radius:this.rng.uniform(1.2,2)},this.burstCycleDuration=this.rng.uniform(45,75),this.burstDuration=this.rng.uniform(8,15),this.burstStartOffset=this.rng.uniform(0,this.burstCycleDuration);const r=e.colors||[new f(1,1,1),new f(.9,.9,.9),new f(.7,.7,.7),new f(.5,.5,.5),new f(.3,.3,.3)];this.createSnowflakeSystem(this.particleCount,m,o,r)}createSnowflakeSystem(s,e,a,m){const o=[];for(let i=0;i<s;i++){let t,l,u,d=0;do{const c=(this.rng.uniform(-1,1)+this.rng.uniform(-1,1))*.2,w=this.rng.uniform(-1,1)*this.burstZone.radius;t=Math.max(0,Math.min(Math.PI,this.burstZone.lat+Math.PI/2+c)),l=(this.burstZone.lon+w)%(Math.PI*2);const S=Math.abs(t-(this.burstZone.lat+Math.PI/2)),b=Math.min(Math.abs(l-this.burstZone.lon),Math.PI*2-Math.abs(l-this.burstZone.lon));u=Math.max(S/.3,b/this.burstZone.radius),d++}while(u>1&&d<10);u>1&&(t=this.burstZone.lat+Math.PI/2+this.rng.uniform(-.1,.1),l=this.burstZone.lon+this.rng.uniform(-this.burstZone.radius,this.burstZone.radius));const h=this.planetRadius*this.rng.uniform(1.001,1.005),g=h*Math.sin(t)*Math.cos(l),M=h*Math.cos(t),p=h*Math.sin(t)*Math.sin(l);o.push(g,M,p)}const r=[],n=new f;for(let i=0;i<this.trailLength;i++){const t=Math.pow(1-i/(this.trailLength-1),1.5);n.setRGB(t,t,t),r.push(n.r,n.g,n.b)}for(let i=0;i<s;i++){const t=i*3,l=o[t],u=o[t+1],d=o[t+2],h=new Float32Array(this.trailLength*3);for(let c=0;c<this.trailLength;c++){const w=c*.1;h[c*3]=l+this.rng.uniform(-1,1)*w*this.planetRadius*.01,h[c*3+1]=u+this.rng.uniform(-1,1)*w*this.planetRadius*.01,h[c*3+2]=d+this.rng.uniform(-1,1)*w*this.planetRadius*.01}const g=new A;g.setAttribute("position",new Z(h,3)),g.setAttribute("color",new Z(new Float32Array(r),3));const M=new L({vertexColors:!0,transparent:!0,opacity:this.particleOpacity,blending:v,depthTest:!0,linewidth:3}),p=new R(g,M);this.materials.push(M),this.particleSystems.push(p),this.trailPositions.push(h),this.trailColors.push(new Float32Array(r)),p.rnd=this.rng.uniform(0,1),p.particleIndex=i,this.snowflakeGroup.add(p)}}update(s=.016){const a=G(k,this.timeSpeed,this.startTime),o=(Date.now()/1e3+this.burstStartOffset)%this.burstCycleDuration;o<this.burstDuration&&o/this.burstDuration,this.snowflakeGroup.visible=!0,this.particleSystems.forEach((r,n)=>{const i=r.geometry.getAttribute("position"),t=i.array,l=r.rnd,u=r.particleIndex,d=this.calculateTrailPath(a,u,l);for(let I=this.trailLength-1;I>0;I--){const T=I*3,D=(I-1)*3;t[T]=t[D],t[T+1]=t[D+1],t[T+2]=t[D+2]}t[0]=d.x,t[1]=d.y,t[2]=d.z,i.needsUpdate=!0;const h=Date.now()/1e3,g=this.gustCycles[n],M=this.gustPhases[n],p=(h/g+M)%1;let c=0;p<.3?c=p/.3:p<.7?c=1:c=(1-p)/.3;const w=new F(t[0],t[1],t[2]),S=Math.atan2(w.z,w.x),b=S<0?S+Math.PI*2:S,y=this.gustZones[n];let C=!1;y.start<y.end?C=b>=y.start&&b<=y.end:C=b>=y.start||b<=y.end,this.materials[n].opacity=C?this.particleOpacity*c:0})}calculateTrailPath(s,e,a){s+=10*a+e*.1;const m=this.burstZone.lon+(a-.5)*this.burstZone.radius,o=this.burstZone.lat+Math.PI/2+(a-.5)*.2,r=this.windSpeedMultiplier,n=s*r,i=m+Math.cos(this.globalWindDirection)*n,t=o+this.verticalOscillation*Math.sin(s*.5+a),l=.015*Math.sin(s*2+a*10),u=this.planetRadius*(1.005+l),d=u*Math.sin(t)*Math.cos(i),h=u*Math.cos(t),g=u*Math.sin(t)*Math.sin(i);return{x:d,y:h,z:g}}addToScene(s,e){e&&this.snowflakeGroup.position.copy(e),s.add(this.snowflakeGroup)}getObject3D(){return this.snowflakeGroup}dispose(){this.materials.forEach(s=>s.dispose()),this.particleSystems.forEach(s=>s.geometry.dispose()),this.materials=[],this.particleSystems=[],this.trailPositions=[],this.trailColors=[],this.snowflakeGroup.clear()}}function _(P,s,e){if(s.type!=="tundra")return null;const a=e||Math.floor(Math.random()*1e6),m=s.snow_intensity||.7,o=s.wind_strength||1,r=Math.floor(m*200+50),n=o*5;return new O(P,{particleCount:r,windSpeed:n,size:1.2,opacity:.9,seed:a+15e3})}function W(P,s,e){const a=e||Math.floor(Math.random()*1e6),m=[new f(.8,.7,.6),new f(.9,.8,.7),new f(.6,.5,.4),new f(1,.9,.8),new f(.7,.6,.5)],o=15,r=2.5;return new O(P,{particleCount:o,windSpeed:r,size:1.5,opacity:1,colors:m,seed:a+15e3})}export{O as T,W as a,_ as c};
