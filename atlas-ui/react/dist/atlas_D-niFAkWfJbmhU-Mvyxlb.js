import{S as I}from"./atlas_C7ZhNUnMOt3kEE8jtIwhb.js";import{C as d,G as O,V as f,B as z,a as T,S as H,N,P as U,Q as V}from"./atlas_BjkcO1_mNssSqp05cLhjd.js";const r={TRAIL_COUNT:{min:8,max:15},EMISSION_FREQUENCY:{min:.3,max:1.2},TRAIL_HEIGHT:{min:.3,max:.8},TRAIL_SPREAD:{min:.4,max:1.4},PARTICLES_PER_TRAIL:{min:20,max:40},PARTICLE_SIZE:{min:.08,max:.22},PARTICLE_LIFETIME:{min:1.5,max:5},PARTICLE_SPEED:{min:.08,max:.35},PARTICLE_DRAG:{min:.85,max:.98},ATMOSPHERE_HEIGHT:{min:4,max:10},OPACITY:{min:.15,max:.45},TURBULENCE:{min:.3,max:1.8},WIND_STRENGTH:{min:.05,max:.25}};class X{position;direction;lastEmissionTime=0;isActive=!1;rng;particleDirections=[];particleSpeeds=[];particleSizes=[];particleLifetimes=[];particleBirthTimes=[];particleActive=[];constructor(a,t,i,e,s,l,o,n){this.position=a,this.direction=a.clone().normalize(),this.rng=new I(t);for(let c=0;c<i;c++)this.particleDirections.push(this.getRandomDirection(e)),this.particleSpeeds.push(s*(.6+this.rng.random()*.8)),this.particleSizes.push(l*n*(.7+this.rng.random()*.6)),this.particleLifetimes.push(o*(.8+this.rng.random()*.4)),this.particleBirthTimes.push(-1),this.particleActive.push(!1)}initializeStateFromAbsoluteTime(a,t,i){const e=1/t,s=i*.618%1;this.lastEmissionTime=a-s*e;const l=Math.min(10,this.particleLifetimes.length);for(let o=0;o<l;o++){const n=this.lastEmissionTime-o*e,c=a-n;c>=0&&c<this.particleLifetimes[o]&&(this.particleActive[o]=!0,this.particleBirthTimes[o]=n)}this.isActive=!0}shouldEmit(a,t){return a-this.lastEmissionTime>=1/t}startEmission(a){this.lastEmissionTime=a,this.isActive=!0}getRandomDirection(a){const t=this.rng.uniform(0,Math.PI*2),i=this.rng.uniform(0,a*.7),e=.3,s=i*(1-e),l=new f(Math.sin(s)*Math.cos(t),Math.sin(s)*Math.sin(t),Math.cos(s)+e).normalize(),o=new V;return o.setFromUnitVectors(new f(0,0,1),this.direction),l.applyQuaternion(o),l}}class y{trailGroup;trails=[];particleSystem;particleGeometry;particleMaterial;params;startTime;planetRadius;maxParticles=1200;orbitalVisibilityFactor;static vertexShader=`
    attribute float size;
    attribute float opacity;
    attribute float atmosphereFade;
    
    varying float vOpacity;
    varying float vAtmosphereFade;
    
    void main() {
      vOpacity = opacity;
      vAtmosphereFade = atmosphereFade;
      
      vec4 mvPosition = modelViewMatrix * vec4(position, 1.0);
      gl_PointSize = size * (300.0 / -mvPosition.z);
      gl_Position = projectionMatrix * mvPosition;
    }
  `;static fragmentShader=`
    uniform vec3 baseColor;
    uniform vec3 atmosphereColor;
    uniform float globalOpacity;
    
    varying float vOpacity;
    varying float vAtmosphereFade;
    
    void main() {
      // Forma circular de la partícula con bordes suaves
      vec2 center = gl_PointCoord - vec2(0.5);
      float dist = length(center);
      
      // Forma circular suave
      float alpha = 1.0 - smoothstep(0.1, 0.5, dist);
      alpha *= vOpacity * globalOpacity;
      
      // Descartar píxeles transparentes
      if (alpha < 0.02) discard;
      
      // Mezcla de colores base y atmosférico según fade
      vec3 color = mix(baseColor, atmosphereColor, vAtmosphereFade);
      
      gl_FragColor = vec4(color, alpha);
    }
  `;constructor(a,t={}){this.planetRadius=a;const i=t.seed||Math.floor(Math.random()*1e6),e=new I(i);this.startTime=t.startTime||i%1e4/1e3;const s=t.baseColor instanceof d?t.baseColor:new d(.25,.25,.28),l=t.atmosphereColor instanceof d?t.atmosphereColor:new d(.35,.35,.38);this.params={trailCount:t.trailCount||Math.floor(e.uniform(r.TRAIL_COUNT.min,r.TRAIL_COUNT.max)),emissionFrequency:t.emissionFrequency||e.uniform(r.EMISSION_FREQUENCY.min,r.EMISSION_FREQUENCY.max),trailHeight:t.trailHeight||e.uniform(r.TRAIL_HEIGHT.min,r.TRAIL_HEIGHT.max),trailSpread:t.trailSpread||e.uniform(r.TRAIL_SPREAD.min,r.TRAIL_SPREAD.max),particlesPerTrail:t.particlesPerTrail||Math.floor(e.uniform(r.PARTICLES_PER_TRAIL.min,r.PARTICLES_PER_TRAIL.max)),particleSize:t.particleSize||e.uniform(r.PARTICLE_SIZE.min,r.PARTICLE_SIZE.max),particleLifetime:t.particleLifetime||e.uniform(r.PARTICLE_LIFETIME.min,r.PARTICLE_LIFETIME.max),particleSpeed:t.particleSpeed||e.uniform(r.PARTICLE_SPEED.min,r.PARTICLE_SPEED.max),particleDrag:t.particleDrag||e.uniform(r.PARTICLE_DRAG.min,r.PARTICLE_DRAG.max),baseColor:s,atmosphereColor:l,opacity:t.opacity||e.uniform(r.OPACITY.min,r.OPACITY.max),atmosphereHeight:t.atmosphereHeight||e.uniform(r.ATMOSPHERE_HEIGHT.min,r.ATMOSPHERE_HEIGHT.max),fadeDistance:t.fadeDistance||e.uniform(.3,.8),turbulenceStrength:t.turbulenceStrength||e.uniform(r.TURBULENCE.min,r.TURBULENCE.max),windStrength:t.windStrength||e.uniform(r.WIND_STRENGTH.min,r.WIND_STRENGTH.max),seed:i,startTime:this.startTime,timeSpeed:t.timeSpeed||e.uniform(.3,1.5),orbitalData:t.orbitalData,currentTime:t.currentTime||0,planetTemperature:t.planetTemperature||0},this.orbitalVisibilityFactor=this.calculateOrbitalVisibility(),this.trailGroup=new O,this.createTrailPoints(e),this.initializeStateFromAbsoluteTime(),this.createParticleSystem(),this.initializeActiveTrails();const n=(this.startTime+Date.now()/1e3*this.params.timeSpeed)%1e3;this.updateParticleGeometry(n)}initializeStateFromAbsoluteTime(){const t=(this.startTime+Date.now()/1e3*this.params.timeSpeed)%1e3;for(let i=0;i<this.trails.length;i++)this.trails[i].initializeStateFromAbsoluteTime(t,this.params.emissionFrequency,i)}createTrailPoints(a){const t=this.params.trailCount;for(let i=0;i<t;i++){const e=a.uniform(0,Math.PI*2),s=Math.acos(a.uniform(-1,1)),l=new f(Math.sin(s)*Math.cos(e)*this.planetRadius,Math.sin(s)*Math.sin(e)*this.planetRadius,Math.cos(s)*this.planetRadius),o=new X(l,Math.floor(a.random()*1e6),this.params.particlesPerTrail,this.params.trailSpread,this.params.particleSpeed,this.params.particleSize,this.params.particleLifetime,this.planetRadius);o.isActive=!0,o.lastEmissionTime=-10,this.trails.push(o)}}createParticleSystem(){this.particleGeometry=new z;const a=new Float32Array(this.maxParticles*3),t=new Float32Array(this.maxParticles),i=new Float32Array(this.maxParticles),e=new Float32Array(this.maxParticles);this.particleGeometry.setAttribute("position",new T(a,3)),this.particleGeometry.setAttribute("size",new T(t,1)),this.particleGeometry.setAttribute("opacity",new T(i,1)),this.particleGeometry.setAttribute("atmosphereFade",new T(e,1)),this.particleMaterial=new H({vertexShader:y.vertexShader,fragmentShader:y.fragmentShader,uniforms:{baseColor:{value:this.params.baseColor},atmosphereColor:{value:this.params.atmosphereColor},globalOpacity:{value:this.params.opacity}},transparent:!0,blending:N,depthWrite:!1,vertexColors:!1}),this.particleSystem=new U(this.particleGeometry,this.particleMaterial),this.particleSystem.renderOrder=10,this.trailGroup.add(this.particleSystem)}initializeActiveTrails(){}calculateOrbitalVisibility(){if(!this.params.orbitalData||!this.params.orbitalData.enabled)return 1;const e=(Date.now()/1e3-51408e4)/(365.25*24*3600)%this.params.orbitalData.cycle_duration_years/this.params.orbitalData.cycle_duration_years,s=this.params.orbitalData.visible_duration_years/this.params.orbitalData.cycle_duration_years,l=e<=s;let o=0;if(l){const n=e/s;n<.15?o=n/.15:n>.85?o=(1-n)/.15:o=1}return o}updateParticleGeometry(a){const t=this.particleGeometry.attributes.position,i=this.particleGeometry.attributes.size,e=this.particleGeometry.attributes.opacity,s=this.particleGeometry.attributes.atmosphereFade;let l=0;const o=this.planetRadius*this.params.atmosphereHeight;for(let n=0;n<this.trails.length;n++){const c=this.trails[n];for(let m=0;m<this.params.particlesPerTrail&&l<this.maxParticles;m++){const R=m/this.params.particlesPerTrail*.8,C=n*.5%2,g=a+C-R,p=Math.abs(g%c.particleLifetimes[m]);if(p>=0&&p<c.particleLifetimes[m]){const S=c.particleDirections[m].clone();let P=c.particleSpeeds[m];P*=Math.pow(this.params.particleDrag,p);const v=P*p;let h=c.position.clone().add(S.multiplyScalar(v));const M=.1*p;h.y+=M;const x=p*.08,G=new f(S.x,0,S.z).normalize();h.add(G.multiplyScalar(x));const b=this.params.turbulenceStrength*.08,E=a*2+m*.3;if(h.x+=Math.sin(E)*b,h.y+=Math.cos(E*.7)*b*.8,h.z+=Math.sin(E*1.4)*b,h.length()>o)continue;const A=p/c.particleLifetimes[m],L=this.smoothstep(0,.1,A),F=this.smoothstep(1,.7,A),_=L*F;let D=0;const w=c.particleSizes[m]*(1-A*.2);_>.01&&(t.setXYZ(l,h.x,h.y,h.z),i.setX(l,w),e.setX(l,_),s.setX(l,D),l++)}}}for(let n=l;n<this.maxParticles;n++)t.setXYZ(n,0,0,0),i.setX(n,0),e.setX(n,0),s.setX(n,0);t.needsUpdate=!0,i.needsUpdate=!0,e.needsUpdate=!0,s.needsUpdate=!0,this.particleGeometry.setDrawRange(0,l)}smoothstep(a,t,i){const e=Math.max(0,Math.min(1,(i-a)/(t-a)));return e*e*(3-2*e)}update(a){const i=(this.startTime+Date.now()/1e3*this.params.timeSpeed)%1e3;if(this.orbitalVisibilityFactor=this.calculateOrbitalVisibility(),this.orbitalVisibilityFactor>0){if(this.updateParticleGeometry(i),this.particleMaterial&&this.particleMaterial.uniforms){const e=this.params.opacity||1;this.particleMaterial.uniforms.globalOpacity.value=e*this.orbitalVisibilityFactor}}else this.hideAllParticles()}hideAllParticles(){const a=this.particleGeometry.attributes.position,t=this.particleGeometry.attributes.size,i=this.particleGeometry.attributes.opacity,e=this.particleGeometry.attributes.atmosphereFade;for(let s=0;s<this.maxParticles;s++)a.setXYZ(s,0,0,0),t.setX(s,0),i.setX(s,0),e.setX(s,0);a.needsUpdate=!0,t.needsUpdate=!0,i.needsUpdate=!0,e.needsUpdate=!0,this.particleGeometry.setDrawRange(0,0)}addToScene(a,t){t&&this.trailGroup.position.copy(t),a.add(this.trailGroup)}getObject3D(){return this.trailGroup}dispose(){this.particleGeometry.dispose(),this.particleMaterial.dispose(),this.trailGroup.clear(),this.trails=[]}}function Z(u,a,t){const i=u?.surface_elements?.carbon_trails_data;if(!i?.enabled)return null;const e=u?.seeds?.planet_seed||Math.floor(Math.random()*1e6),s=u?.original_planet_data?.surface_temperature||0,l=u?.timing?.elapsed_time?u.timing.elapsed_time/(365.25*24*3600):0,o={enabled:!0,cycle_duration_years:i.cycle_duration_years,visible_duration_years:i.visible_duration_years},n={seed:e+11e3,planetTemperature:s,orbitalData:o,currentTime:l};return new y(a,n)}export{y as C,Z as c};
