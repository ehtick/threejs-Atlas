import{S as O}from"./atlas_CZPwVUCzTXPjRwu-ZVPrl.js";import{G as k,C as y,B as x,a as D,s as z,N as G,L,V as v}from"./atlas_DoxhO7agDNvhtnb7c3WZw.js";class A{snowflakeGroup;planetRadius;materials=[];particleSystems=[];trailPositions=[];trailColors=[];globalWindDirection;rng;startTime;timeSpeed;trailLength=15;particleCount;rotationSpeed;particleOpacity;windSpeedMultiplier;verticalOscillation;gustCycles;gustPhases;gustZones;burstZone;burstCycleDuration;burstDuration;burstStartOffset;constructor(s,n={}){this.snowflakeGroup=new k,this.planetRadius=s;const l=n.seed||Math.floor(Math.random()*1e6);this.rng=new O(l),this.particleCount=n.particleCount||10,n.windSpeed;const g=(n.size||1)*(s*.2),o=n.opacity||1;this.globalWindDirection=this.rng.uniform(0,Math.PI*2),this.startTime=this.rng.uniform(0,1e3),this.timeSpeed=this.rng.uniform(2,4),this.rotationSpeed=this.rng.uniform(.2,.8),this.particleOpacity=this.rng.uniform(.05,.25),this.windSpeedMultiplier=this.rng.uniform(1.1,2.5),this.verticalOscillation=this.rng.uniform(.1,.4),this.gustCycles=[],this.gustPhases=[],this.gustZones=[];for(let e=0;e<this.particleCount;e++){this.gustCycles.push(this.rng.uniform(15,30)),this.gustPhases.push(this.rng.uniform(0,1));const i=this.rng.uniform(0,Math.PI*2),t=this.rng.uniform(Math.PI*.3,Math.PI*.6);this.gustZones.push({start:i,end:(i+t)%(Math.PI*2)})}this.burstZone={lat:this.rng.uniform(-Math.PI/3,Math.PI/3),lon:this.rng.uniform(0,Math.PI*2),radius:this.rng.uniform(1.2,2)},this.burstCycleDuration=this.rng.uniform(45,75),this.burstDuration=this.rng.uniform(8,15),this.burstStartOffset=this.rng.uniform(0,this.burstCycleDuration);const r=n.colors||[new y(1,1,1),new y(.9,.9,.9),new y(.7,.7,.7),new y(.5,.5,.5),new y(.3,.3,.3)];this.createSnowflakeSystem(this.particleCount,g,o,r)}createSnowflakeSystem(s,n,l,g){const o=[];for(let i=0;i<s;i++){let t,c,u,f=0;do{const h=(this.rng.uniform(-1,1)+this.rng.uniform(-1,1))*.2,m=this.rng.uniform(-1,1)*this.burstZone.radius;t=Math.max(0,Math.min(Math.PI,this.burstZone.lat+Math.PI/2+h)),c=(this.burstZone.lon+m)%(Math.PI*2);const S=Math.abs(t-(this.burstZone.lat+Math.PI/2)),M=Math.min(Math.abs(c-this.burstZone.lon),Math.PI*2-Math.abs(c-this.burstZone.lon));u=Math.max(S/.3,M/this.burstZone.radius),f++}while(u>1&&f<10);u>1&&(t=this.burstZone.lat+Math.PI/2+this.rng.uniform(-.1,.1),c=this.burstZone.lon+this.rng.uniform(-this.burstZone.radius,this.burstZone.radius));const a=this.planetRadius*this.rng.uniform(1.001,1.005),d=a*Math.sin(t)*Math.cos(c),w=a*Math.cos(t),p=a*Math.sin(t)*Math.sin(c);o.push(d,w,p)}const r=[],e=new y;for(let i=0;i<this.trailLength;i++){const t=Math.pow(1-i/(this.trailLength-1),1.5);e.setRGB(t,t,t),r.push(e.r,e.g,e.b)}for(let i=0;i<s;i++){const t=i*3,c=o[t],u=o[t+1],f=o[t+2],a=new Float32Array(this.trailLength*3);for(let h=0;h<this.trailLength;h++){const m=h*.1;a[h*3]=c+this.rng.uniform(-1,1)*m*this.planetRadius*.01,a[h*3+1]=u+this.rng.uniform(-1,1)*m*this.planetRadius*.01,a[h*3+2]=f+this.rng.uniform(-1,1)*m*this.planetRadius*.01}const d=new x;d.setAttribute("position",new D(a,3)),d.setAttribute("color",new D(new Float32Array(r),3));const w=new z({vertexColors:!0,transparent:!0,opacity:this.particleOpacity,blending:G,depthTest:!0,linewidth:3}),p=new L(d,w);this.materials.push(w),this.particleSystems.push(p),this.trailPositions.push(a),this.trailColors.push(new Float32Array(r)),p.rnd=this.rng.uniform(0,1),p.particleIndex=i,this.snowflakeGroup.add(p)}}update(s=.016){const l=(this.startTime+Date.now()/1e3*this.timeSpeed)%1e3,o=(Date.now()/1e3+this.burstStartOffset)%this.burstCycleDuration;o<this.burstDuration&&o/this.burstDuration,this.snowflakeGroup.visible=!0,this.particleSystems.forEach((r,e)=>{const i=r.geometry.getAttribute("position"),t=i.array,c=r.rnd,u=r.particleIndex,f=this.calculateTrailPath(l,u,c);for(let P=this.trailLength-1;P>0;P--){const C=P*3,Z=(P-1)*3;t[C]=t[Z],t[C+1]=t[Z+1],t[C+2]=t[Z+2]}t[0]=f.x,t[1]=f.y,t[2]=f.z,i.needsUpdate=!0;const a=Date.now()/1e3,d=this.gustCycles[e],w=this.gustPhases[e],p=(a/d+w)%1;let h=0;p<.3?h=p/.3:p<.7?h=1:h=(1-p)/.3;const m=new v(t[0],t[1],t[2]),S=Math.atan2(m.z,m.x),M=S<0?S+Math.PI*2:S,b=this.gustZones[e];let I=!1;b.start<b.end?I=M>=b.start&&M<=b.end:I=M>=b.start||M<=b.end,this.materials[e].opacity=I?this.particleOpacity*h:0})}calculateTrailPath(s,n,l){s+=10*l+n*.1;const g=this.burstZone.lon+(l-.5)*this.burstZone.radius,o=this.burstZone.lat+Math.PI/2+(l-.5)*.2,r=this.windSpeedMultiplier,e=s*r,i=g+Math.cos(this.globalWindDirection)*e,t=o+this.verticalOscillation*Math.sin(s*.5+l),c=.015*Math.sin(s*2+l*10),u=this.planetRadius*(1.005+c),f=u*Math.sin(t)*Math.cos(i),a=u*Math.cos(t),d=u*Math.sin(t)*Math.sin(i);return{x:f,y:a,z:d}}addToScene(s,n){n&&this.snowflakeGroup.position.copy(n),s.add(this.snowflakeGroup)}getObject3D(){return this.snowflakeGroup}dispose(){this.materials.forEach(s=>s.dispose()),this.particleSystems.forEach(s=>s.geometry.dispose()),this.materials=[],this.particleSystems=[],this.trailPositions=[],this.trailColors=[],this.snowflakeGroup.clear()}}function F(T,s,n){if(s.type!=="tundra")return null;const l=n||Math.floor(Math.random()*1e6),g=s.snow_intensity||.7,o=s.wind_strength||1,r=Math.floor(g*200+50),e=o*5;return new A(T,{particleCount:r,windSpeed:e,size:1.2,opacity:.9,seed:l+15e3})}export{A as T,F as c};
