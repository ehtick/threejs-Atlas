import{c as Y,R as V}from"./atlas_bp4QKZBDxvNtcCXK80v43.js";import{c as x,A as j,a as g,b as H,d as J,e as K}from"./atlas_CA344NpOBMGWg9HFuABbE.js";import{c as P,L as Q,a as X}from"./atlas_R_XvYion9zqcklY_GteVM.js";import{c as C}from"./atlas_AY7rlEqGy4LS6Ya1dlGVA.js";import{c as L,T as Z}from"./atlas_B8AqTg3tSNem1fB4apC0B.js";import{c as R,A as D}from"./atlas_CMUvaCD4mo7XQYkYXSJfw.js";import{P as ee,c as te}from"./atlas_VOH_aZaK8QZhfyJlIm9Ly.js";import{g as T,c as se,P as re}from"./atlas_xd5LNBgcOa5CzFEgor2Hm.js";import{P as ae}from"./atlas_CrrnNFt-F18X-S2bln2ih.js";import{c as k}from"./atlas_G5tdEP2OrMSd6N6qvkFcr.js";import{c as $}from"./atlas_DHZeGIjNF73GHEmrQp6nE.js";import{c as ce}from"./atlas_CVfcEBkKTTMs_3IaCRzRE.js";import{c as oe}from"./atlas_BvazszwIVtr42ZYiFginB.js";import{c as fe}from"./atlas_BL2ZOBI-zhTUiijzsY4Dk.js";import{c as ne}from"./atlas_DUYf4MwmvA5BreW6-W9PK.js";import{c as M,D as ie}from"./atlas_BYTxG57zAkrMuKTSnnrrH.js";import{c as v,A as de}from"./atlas_B9yZ95D5a3z7xtI3RCRwn.js";import{c as le,S as me}from"./atlas_9iD_ehnhYK2LwZq_RAjB_.js";import{P as A}from"./atlas_CmYGdDkCK2sCRU_Obg1H6.js";import{F as O}from"./atlas_B4KeL5UEbd9M40Y_sMAYc.js";import{c as ue,O as pe}from"./atlas_BzK4Az4Fofiamef8c-xL9.js";import{c as G,F as he}from"./atlas__Fz15fTifKAuXwoa0MSvM.js";import{c as q,A as ye}from"./atlas_DgekZc0a5GT7ev-77mP9J.js";import{c as _e}from"./atlas_BsdvMvzVSoYT-ce7kwn7V.js";import{c as ge,V as Ee}from"./atlas_DXCbdwWBtFNPjiqZ_8vQw.js";import{g as W}from"./atlas_Ce3hh0hgxYWauQ_qSK6cl.js";const Se=!1;class b{static instance;creators=new Map;effects=new Map;nextId=1;layerSystem;constructor(){this.registerDefaultEffects()}static getInstance(){return b.instance||(b.instance=new b),b.instance}registerDefaultEffects(){this.registerEffect("atmosphere_glow",{create:(e,t)=>new j(t,e),fromPythonData:(e,t)=>x(t,e.atmosphere||{})}),this.registerEffect("atmosphere_clouds",{create:(e,t)=>new H(t,e),fromPythonData:(e,t)=>g(t,e.surface_elements||{})}),this.registerEffect("atmospheric_streaks",{create:(e,t)=>new de(t,e),fromPythonData:(e,t)=>v(t,e.atmosphere||{})}),this.registerEffect("atmosphere",{create:(e,t)=>new K(t,e),fromPythonData:(e,t)=>J(t,e)}),this.registerEffect("ring_system",{create:(e,t)=>new V(t,e),fromPythonData:(e,t)=>Y(e.rings||{},t)}),this.registerEffect("fragmentation",{create:(e,t)=>new O(t,e),fromPythonData:(e,t)=>new O(t,{color:e.surface?.fragment_color||[.3,.3,.3],fragmentCount:e.surface?.fragment_count||20})}),this.registerEffect("land_masses",{create:(e,t)=>new Q(t,e),fromPythonData:(e,t)=>P(t,e.surface_elements||{},e.seeds?.planet_seed)}),this.registerEffect("ocean_waves",{create:(e,t)=>new pe(e),fromPythonData:(e,t)=>ue(e)}),this.registerEffect("aquifer_water",{create:(e,t,r)=>new ye(r,e),fromPythonData:(e,t,r)=>q(r,e)}),this.registerEffect("fluid_layers",{create:(e,t)=>new he(t,e),fromPythonData:(e,t)=>G(t,e)}),this.registerEffect("lava_flows",{create:(e,t)=>(console.warn("Lava flows effect not implemented yet"),null)}),this.registerEffect("crystal_formations",{create:(e,t)=>(console.warn("Crystal formations effect not implemented yet"),null)}),this.registerEffect("star_field",{create:(e,t)=>new me(t,e),fromPythonData:(e,t)=>le(t,e.seeds?.planet_seed||e.planet_seed)}),this.registerEffect("tundra_snowflakes",{create:(e,t)=>new Z(t,e),fromPythonData:(e,t)=>L(t,e.surface_elements||{},e.seeds?.planet_seed)}),this.registerEffect("anomaly_phase_matter",{create:(e,t)=>new D(t,e),fromPythonData:(e,t)=>R(t,e.surface_elements||{},e.seeds?.planet_seed)}),this.registerEffect("pulsating_cube",{create:(e,t)=>new ee(t,e),fromPythonData:(e,t)=>{const r=T(e);return te(t,e.surface_elements||{},e.seeds?.planet_seed,r,e)}}),this.registerEffect("planet_rays",{create:(e,t)=>new re(t,e),fromPythonData:(e,t)=>se(t,e.surface_elements||{},e.seeds?.planet_seed)}),this.registerEffect("visual_debug_3d",{create:(e,t)=>new Ee(t,e),fromPythonData:(e,t)=>ge(e,t)}),this.registerEffect("diamond_cracks",{create:(e,t)=>new ie({...e,radius:t}),fromPythonData:(e,t)=>M(e,t,e.seeds?.shape_seed||e.seeds?.planet_seed)})}registerEffect(e,t){this.creators.set(e,t)}createEffect(e,t,r,f,u=0){const o=this.creators.get(e);if(!o)return console.warn(`Effect type '${e}' not registered`),null;try{const i=o.create(t,r,this.layerSystem);if(!i)return null;const h={id:`effect_${this.nextId++}`,type:e,effect:i,priority:u,enabled:!0};return this.effects.set(h.id,h),h}catch(i){return console.error(`Error creating effect '${e}':`,i),null}}createEffectFromPythonData(e,t,r,f,u=0){const o=this.creators.get(e);if(!o||!o.fromPythonData)return this.createEffect(e,t,r,f,u);try{const i=o.fromPythonData(t,r,this.layerSystem);if(!i)return null;const h={id:`effect_${this.nextId++}`,type:e,effect:i,priority:u,enabled:!0};return this.effects.set(h.id,h),h}catch(i){return console.error(`Error creating effect '${e}' from Python data:`,i),null}}createEffectsFromList(e,t,r){const f=[],u=e.sort((o,i)=>(o.priority||0)-(i.priority||0));for(const o of u){const i=this.createEffect(o.type,o.params,t,r,o.priority);i&&(i.enabled=o.enabled!==!1,f.push(i))}return f}createEffectsFromPythonPlanetData(e,t,r,f,u){const o=[];try{const i=T(e);if(u?this.layerSystem=u:this.layerSystem=new ae(r,i),e.surface_elements){const s=e.surface_elements;if(s.effects_3d&&Array.isArray(s.effects_3d))for(const m of s.effects_3d){if(m.type==="atmospheric_streaks"){const _=v(t,m.params,e.seeds?.shape_seed+3e3),E={id:`effect_${this.nextId++}`,type:"atmospheric_streaks",effect:_,priority:m.priority||0,enabled:!0,name:"Atmospheric Streaks"};this.effects.set(E.id,E),o.push(E),_.addToScene(f,r.position);continue}const y=this.createEffect(m.type,m.params,t,r,m.priority||0);y?(y.name=m.type.replace(/_/g," ").replace(/\b\w/g,_=>_.toUpperCase()),o.push(y),y.effect.apply&&y.effect.apply(r),y.effect.addToScene&&y.effect.addToScene(f,r.position)):console.error("❌ FALLO AL CREAR EFECTO:",m.type)}switch(s.type.toLowerCase()){case"gas_giant":if(this.layerSystem){const a=k(this.layerSystem,{...s,base_color:i,turbulence:e.turbulence||s.turbulence},e.seeds?.shape_seed||e.seeds?.planet_seed||e.seeds?.planet_seed),c=$(this.layerSystem,{...s,base_color:i,storm_intensity:e.storm_intensity||s.storm_intensity},(e.seeds?.shape_seed||e.seeds?.planet_seed)+1e3),l={id:`effect_${this.nextId++}`,type:"cloud_bands_layer",effect:a,priority:0,enabled:!0};this.effects.set(l.id,l),o.push(l);const d={id:`effect_${this.nextId++}`,type:"cloud_gyros_layer",effect:c,priority:1,enabled:!0};if(this.effects.set(d.id,d),o.push(d),s.polar_hexagon&&s.polar_hexagon.enabled){const n=e.timing?.elapsed_time?e.timing.elapsed_time/31557600:0,p=new A({planetColor:i,hexagonData:s.polar_hexagon,planetRadius:t,currentTime:n}),I={id:`effect_${this.nextId++}`,type:"polar_hexagon",effect:p,priority:10,enabled:!0};this.effects.set(I.id,I),o.push(I),f&&p.addToScene(f)}}else console.error("❌ PlanetLayerSystem not initialized!");break;case"frozen_gas_giant":if(this.layerSystem){const a=k(this.layerSystem,{...s,base_color:i,turbulence:e.turbulence||s.turbulence,icy_tint:!0},e.seeds?.shape_seed||e.seeds?.planet_seed),c={id:`effect_${this.nextId++}`,type:"cloud_bands_layer",effect:a,priority:0,enabled:!0};if(this.effects.set(c.id,c),o.push(c),s.polar_hexagon&&s.polar_hexagon.enabled){const l=e.timing?.elapsed_time?e.timing.elapsed_time/31557600:0,d=new A({planetColor:i,hexagonData:s.polar_hexagon,planetRadius:t,currentTime:l}),n={id:`effect_${this.nextId++}`,type:"polar_hexagon",effect:d,priority:10,enabled:!0};this.effects.set(n.id,n),o.push(n),f&&d.addToScene(f)}}break;case"aquifer":console.log("🌊 Processing Aquifer planet with surface data:",s),console.log("🌊 Surface.clouds:",s.clouds);const m=q(this.layerSystem,e);if(m){const a={id:`effect_${this.nextId++}`,type:"aquifer_water",effect:m,priority:2,enabled:!0,name:"Aquifer Water Surface"};this.effects.set(a.id,a),o.push(a),console.log("🌊 AquiferWater effect added for aquifer planet")}const y=_e(this.layerSystem,e);if(y){const a={id:`effect_${this.nextId++}`,type:"ocean_currents",effect:y,priority:1,enabled:!0,name:"Ocean Currents"};this.effects.set(a.id,a),o.push(a),console.log("🌊 Ocean Currents effect added for aquifer planet")}if(s.clouds&&s.clouds.length>0){const a=g(t,s,(e.seeds?.shape_seed||e.seeds?.planet_seed)+4e3),c={id:`effect_${this.nextId++}`,type:"atmosphere_clouds",effect:a,priority:15,enabled:!0,name:"Atmospheric Clouds"};this.effects.set(c.id,c),o.push(c),a.addToScene(f,r.position),console.log("☁️ Atmospheric Clouds added to Aquifer planet")}if(s.land_masses&&s.land_masses.length>0){const a=P(t,s,(e.seeds?.shape_seed||e.seeds?.planet_seed)+7e3);if(a){const c={id:`effect_${this.nextId++}`,type:"land_masses",effect:a,priority:3,enabled:!0,name:"Emergent Land Masses"};this.effects.set(c.id,c),o.push(c),a.addToScene(f,r.position)}}if(s.atmosphere_clouds&&s.atmosphere_clouds.length>0){const a=g(t,s,(e.seeds?.shape_seed||e.seeds?.planet_seed)+8e3);if(a){const c={id:`effect_${this.nextId++}`,type:"atmosphere_clouds",effect:a,priority:4,enabled:!0,name:"Atmospheric Clouds"};this.effects.set(c.id,c),o.push(c),a.addToScene(f,r.position)}}break;case"nebulous":if(this.layerSystem){const a=$(this.layerSystem,{...s,base_color:i,storm_intensity:s.nebula_density||.6,color_variance:s.color_variance||.2},(e.seeds?.shape_seed||e.seeds?.planet_seed)+2e3),c={id:`effect_${this.nextId++}`,type:"cloud_gyros_layer",effect:a,priority:0,enabled:!0};if(this.effects.set(c.id,c),o.push(c),s.polar_hexagon&&s.polar_hexagon.enabled){const l=e.timing?.elapsed_time?e.timing.elapsed_time/31557600:0,d=new A({planetColor:i,hexagonData:s.polar_hexagon,planetRadius:t,currentTime:l}),n={id:`effect_${this.nextId++}`,type:"polar_hexagon",effect:d,priority:10,enabled:!0};this.effects.set(n.id,n),o.push(n),f&&d.addToScene(f)}}break;case"metallic":case"metallic_3d":if(this.layerSystem){const a=fe(this.layerSystem,e,e.seeds?.shape_seed||e.seeds?.planet_seed),c={id:`effect_${this.nextId++}`,type:"metallic_surface_layer",effect:a,priority:0,enabled:!0};this.effects.set(c.id,c),o.push(c)}break;case"diamond":if(this.layerSystem){const a=ne(this.layerSystem,e,e.seeds?.shape_seed||e.seeds?.planet_seed),c={id:`effect_${this.nextId++}`,type:"diamond_surface_layer",effect:a,priority:0,enabled:!0};this.effects.set(c.id,c),o.push(c),console.log("💎 Creating DiamondCracksEffect for Diamond planet...");const l=M(e,t,e.seeds?.shape_seed||e.seeds?.planet_seed),d={id:`effect_${this.nextId++}`,type:"diamond_cracks",effect:l,priority:1,enabled:!0};if(this.effects.set(d.id,d),o.push(d),l.addToScene(f,r.position),console.log("💎 DiamondCracksEffect created and added to scene!"),s.clouds&&s.clouds.length>0){const n=g(t,s,(e.seeds?.shape_seed||e.seeds?.planet_seed)+4e3),p={id:`effect_${this.nextId++}`,type:"atmosphere_clouds",effect:n,priority:15,enabled:!0,name:"Atmospheric Clouds"};this.effects.set(p.id,p),o.push(p),n.addToScene(f,r.position)}}break;case"rocky":if(this.layerSystem){const a=ce(this.layerSystem,e,e.seeds?.shape_seed||e.seeds?.planet_seed),c={id:`effect_${this.nextId++}`,type:"rocky_terrain_layer",effect:a,priority:0,enabled:!0};if(this.effects.set(c.id,c),o.push(c),s.clouds&&s.clouds.length>0){const l=g(t,s,(e.seeds?.shape_seed||e.seeds?.planet_seed)+4e3),d={id:`effect_${this.nextId++}`,type:"atmosphere_clouds",effect:l,priority:15,enabled:!0,name:"Atmospheric Clouds"};this.effects.set(d.id,d),o.push(d),l.addToScene(f,r.position)}}break;case"icy":if(this.layerSystem){const a=oe(this.layerSystem,e,e.seeds?.shape_seed||e.seeds?.planet_seed),c={id:`effect_${this.nextId++}`,type:"icy_terrain_layer",effect:a,priority:0,enabled:!0};this.effects.set(c.id,c),o.push(c);const l=X(t,s,(e.seeds?.shape_seed||e.seeds?.planet_seed)+8e3);if(l){const n={id:`effect_${this.nextId++}`,type:"transparent_land_masses",effect:l,priority:1,enabled:!0,name:"Ice Formations"};this.effects.set(n.id,n),o.push(n),l.addToScene(f,r.position),console.log("🧊 Ice Formations (transparent LandMasses) added to Icy planet")}else console.warn("❄️ Failed to create transparent LandMasses for Icy planet");if(s.clouds&&s.clouds.length>0){const n=g(t,s,(e.seeds?.shape_seed||e.seeds?.planet_seed)+4e3),p={id:`effect_${this.nextId++}`,type:"atmosphere_clouds",effect:n,priority:15,enabled:!0,name:"Atmospheric Clouds"};this.effects.set(p.id,p),o.push(p),n.addToScene(f,r.position),console.log("☁️ Atmospheric Clouds added to Icy planet")}const d=C(t,s,(e.seeds?.shape_seed||e.seeds?.planet_seed)+9e3);if(d){const n={id:`effect_${this.nextId++}`,type:"icy_features",effect:d,priority:2,enabled:!0,name:"Ice Crystals & Features"};this.effects.set(n.id,n),o.push(n),d.addToScene(f,r.position),console.log("❄️ Icy Features (crystals, cracks, ice caps) added to Icy planet")}}break;case"oceanic":const _=G(t,e);if(_){const a={id:`effect_${this.nextId++}`,type:"fluid_layers",effect:_,priority:3,enabled:!0,name:"Fluid Ocean Layers"};this.effects.set(a.id,a),o.push(a),_.addToScene(f,r.position),console.log("🌊 FluidLayers effect added for oceanic planet")}if(s.green_patches&&s.green_patches.length>0){const a=P(t,s,(e.seeds?.shape_seed||e.seeds?.planet_seed)+6e3);if(a){const c={id:`effect_${this.nextId++}`,type:"land_masses",effect:a,priority:5,enabled:!0,name:"Land Masses (Islands)"};this.effects.set(c.id,c),o.push(c),a.addToScene(f,r.position)}}if(s.clouds&&s.clouds.length>0){const a=g(t,s,(e.seeds?.shape_seed||e.seeds?.planet_seed)+4e3),c={id:`effect_${this.nextId++}`,type:"atmosphere_clouds",effect:a,priority:15,enabled:!0,name:"Atmospheric Clouds"};this.effects.set(c.id,c),o.push(c),a.addToScene(f,r.position)}break;case"tundra":if(s.green_patches&&s.green_patches.length>0){const a=P(t,s,(e.seeds?.shape_seed||e.seeds?.planet_seed)+6e3);if(a){const c={id:`effect_${this.nextId++}`,type:"land_masses",effect:a,priority:5,enabled:!0,name:"Tundra Terrain"};this.effects.set(c.id,c),o.push(c),a.addToScene(f,r.position),console.log("🏔️ Tundra terrain (LandMasses) added")}}const E=C(t,s,(e.seeds?.shape_seed||e.seeds?.planet_seed)+9e3);if(E){const a={id:`effect_${this.nextId++}`,type:"icy_features",effect:E,priority:6,enabled:!0,name:"Snow Patches & Ice"};this.effects.set(a.id,a),o.push(a),E.addToScene(f,r.position),console.log("❄️ Sparse ice features added to Tundra planet")}if(s.clouds&&s.clouds.length>0){const a=g(t,s,(e.seeds?.shape_seed||e.seeds?.planet_seed)+4e3),c={id:`effect_${this.nextId++}`,type:"atmosphere_clouds",effect:a,priority:15,enabled:!0,name:"Atmospheric Clouds"};this.effects.set(c.id,c),o.push(c),a.addToScene(f,r.position),console.log("☁️ Atmospheric clouds added to Tundra planet")}const F=L(t,s,(e.seeds?.shape_seed||e.seeds?.planet_seed)+15e3);if(F){const a={id:`effect_${this.nextId++}`,type:"tundra_snowflakes",effect:F,priority:20,enabled:!0,name:"Snowflakes"};this.effects.set(a.id,a),o.push(a),F.addToScene(f,r.position),console.log("❄️ Tundra snowflakes added to Tundra planet")}break;case"anomaly":console.log("🌌 DETECTED ANOMALY PLANET - Creating effects"),console.log("🌌 Planet data:",{surfaceType:s.type,planetType:e.planet_info?.type}),console.log("🎭 SHOWCASE MODE: Activating ALL anomaly effects for evaluation");const w=["anomaly_phase_matter","pulsating_cube","planet_rays"],z=e.seeds?.planet_seed||Math.floor(Math.random()*1e6),B=w.length;for(let a=0;a<B;a++){const c=w[a],l=z+a*1e4,d=this.createEffectFromPythonData(c,{...e,seeds:{...e.seeds,planet_seed:l}},t,r,10+a);d&&(d.name=c.replace(/_/g," ").replace(/\b\w/g,n=>n.toUpperCase()),o.push(d),d.effect.addToScene&&d.effect.addToScene(f,r.position),console.log(`🎭 Added anomaly effect: ${d.name}`))}if(e.atmosphere&&e.atmosphere.type!=="None"){const a=this.createEffectFromPythonData("atmosphere",e.atmosphere,t,r,5);a&&(o.push(a),a.effect.addToScene(f,r.position),console.log("🌫️ Anomalous atmosphere added"))}break;default:if(e.planet_info?.type?.toLowerCase()==="anomaly"){console.log("🌌 DETECTED ANOMALY PLANET via planet_info.type - Creating effects"),console.log("🎭 SHOWCASE MODE (alt detection): Activating ALL anomaly effects for evaluation");const c=["anomaly_phase_matter","pulsating_cube","planet_rays"],l=e.seeds?.planet_seed||Math.floor(Math.random()*1e6),d=c.length;for(let n=0;n<d;n++){const p=c[n],I=l+n*1e4,S=this.createEffectFromPythonData(p,{...e,seeds:{...e.seeds,planet_seed:I}},t,r,10+n);S&&(S.name=p.replace(/_/g," ").replace(/\b\w/g,U=>U.toUpperCase()),o.push(S),S.effect.addToScene&&S.effect.addToScene(f,r.position),console.log(`🎭 Added anomaly effect: ${S.name}`))}if(e.atmosphere&&e.atmosphere.type!=="None"){const n=this.createEffectFromPythonData("atmosphere",e.atmosphere,t,r,5);n&&(o.push(n),n.effect.addToScene(f,r.position),console.log("🌫️ Anomalous atmosphere added"))}}else if(r.material instanceof W){const a=T(e);r.material.color.copy(a)}break}}else if(r.material instanceof W){const s=T(e);r.material.color.copy(s)}const h=e.planet_info?.type?.toLowerCase()||e.surface_elements?.type?.toLowerCase(),N=h==="anomaly"||e.surface_elements?.type==="anomaly";if(e.atmosphere&&!N){if(e.atmosphere.streaks||["Gas Giant","Frozen Gas Giant"].includes(e.planet_info?.type)){const s=x(t,e.atmosphere||{},e.seeds?.shape_seed+2e3);if(s){const m={id:`effect_${this.nextId++}`,type:"atmosphere_glow",effect:s,priority:20,enabled:!0};this.effects.set(m.id,m),o.push(m),s.addToScene(f,r.position)}}if(e.atmosphere.type&&e.atmosphere.type!=="None"){const s={...e.atmosphere};h==="oceanic"&&(s.opacity=Math.min(s.opacity||.3,.15),s.width=Math.min(s.width||15,8));const m=this.createEffectFromPythonData("atmosphere",s,t,r,5);m&&(o.push(m),m.effect.addToScene(f,r.position))}}if(e.rings&&e.rings.has_rings||["Gas Giant","Frozen Gas Giant","Super Earth"].includes(e.planet_info?.type)){const s=this.createEffectFromPythonData("ring_system",e,t,r,1);s?(o.push(s),s.effect.addToScene(f,r.position)):console.warn("⚠️ Failed to create ring effect")}if(e.surface_elements?.has_fragmentation_zones){const s=this.createEffectFromPythonData("fragmentation",e,t,r,5);s&&(o.push(s),s.effect.addToScene(f,r.position))}this.layerSystem&&this.layerSystem.addToScene(f);try{const s=this.createEffectFromPythonData("star_field",e,t,r,-100);s&&s.effect&&(s.effect.addToScene(f,r.position),o.push(s))}catch(s){console.warn("Could not create StarField:",s)}return o.forEach((s,m)=>{}),o.length===0&&console.warn("⚠️ NO EFFECTS WERE CREATED! Check the data structure and conditions."),o}catch(i){throw console.error("Error in EffectRegistry.createEffectsFromPythonPlanetData:",i),i}}getEffect(e){return this.effects.get(e)||null}getEffectsByType(e){return Array.from(this.effects.values()).filter(t=>t.type===e)}getAllEffects(){return Array.from(this.effects.values())}toggleEffect(e,t){const r=this.effects.get(e);if(r){r.enabled=t!==void 0?t:!r.enabled;const f=r.effect;if(f&&f.getObject3D){const u=f.getObject3D();u&&(u.visible=r.enabled,console.log(`🎮 Toggle effect ${r.type}: visible = ${r.enabled}`))}if(this.layerSystem){const u=this.layerSystem.getLayerMeshes(),i={cloud_bands_layer:"cloudBands",cloud_gyros_layer:"cloudGyros",metallic_surface_layer:"metallicSurface",diamond_surface_layer:"diamondSurface",rocky_terrain_layer:"rockyTerrain",icy_terrain_layer:"icyTerrain",aquifer_water:"aquiferWater",ocean_currents:"oceanCurrents"}[r.type];i&&u[i]&&(u[i].visible=r.enabled)}}else console.warn(`⚠️ Effect not found: ${e}`)}updateAllEffects(e,t){this.layerSystem&&this.layerSystem.update(e,t);for(const r of this.effects.values())if(r.enabled&&r.effect.update)try{r.effect.update(e,t)}catch(f){console.error(`Error updating effect ${r.type}:`,f)}}updateLightForAllEffects(e){this.layerSystem&&this.layerSystem.updateFromThreeLight(e);for(const t of this.effects.values())if(t.enabled&&t.effect.updateFromThreeLight)try{t.effect.updateFromThreeLight(e)}catch(r){console.error(`Error updating light for effect ${t.type}:`,r)}}removeEffect(e){const t=this.effects.get(e);t&&(t.effect.dispose&&t.effect.dispose(),this.effects.delete(e))}clearAllEffects(){this.layerSystem&&(this.layerSystem.dispose(),this.layerSystem=void 0);for(const e of this.effects.values())e.effect.dispose&&e.effect.dispose();this.effects.clear(),this.nextId=1}getStats(){const e=Array.from(this.effects.values());return{registeredTypes:this.creators.size,activeEffects:e.length,enabledEffects:e.filter(t=>t.enabled).length}}getAvailableEffectTypes(){return Array.from(this.creators.keys())}}const Ke=b.getInstance();export{Ke as e};
