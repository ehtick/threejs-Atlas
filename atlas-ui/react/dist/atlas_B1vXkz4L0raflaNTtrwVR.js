import{C as c,G as l,m as g,M as u,V as h,B as p,g as b,i as f}from"./atlas_BptVXGp7hwWSDe7IbaYgj.js";class F{fragments;fragmentMeshes=[];params;planetRadius;constructor(t,e={}){this.planetRadius=t,this.params={fragmentCount:e.fragmentCount||20,color:e.color||new c(4473924),size:e.size||.05,distribution:e.distribution||"edge",animationSpeed:e.animationSpeed||1,rotationSpeed:e.rotationSpeed||.1,metalness:e.metalness||.9,roughness:e.roughness||.6},this.fragments=new l,this.generateFragments()}generateFragments(){const t=new g({color:this.params.color instanceof c?this.params.color:new c(this.params.color),metalness:this.params.metalness,roughness:this.params.roughness});for(let e=0;e<this.params.fragmentCount;e++){const s=this.generateFragmentGeometry(),o=new u(s,t);this.positionFragment(o,e),o.rotation.set(Math.random()*Math.PI,Math.random()*Math.PI,Math.random()*Math.PI);const n=this.params.size*(Math.random()*.5+.75);o.scale.set(n,n,n),o.userData={rotationAxis:new h(Math.random()-.5,Math.random()-.5,Math.random()-.5).normalize(),rotationSpeed:(Math.random()-.5)*this.params.rotationSpeed},this.fragmentMeshes.push(o),this.fragments.add(o)}}generateFragmentGeometry(){const t=Math.floor(Math.random()*4)+3,e=[],s=[],o=[];o.push(new h(0,0,0));for(let a=0;a<t;a++){const r=a/t*Math.PI*2,i=Math.random()*.5+.5,d=(Math.random()-.5)*.3;o.push(new h(Math.cos(r)*i,Math.sin(r)*i,d))}for(let a=1;a<=t;a++){const i=o[a].clone();i.z+=Math.random()*.4+.2,o.push(i)}for(const a of o)e.push(a.x,a.y,a.z);for(let a=1;a<t;a++)s.push(0,a,a+1);s.push(0,t,1);const n=o.length-t-1;for(let a=0;a<t-1;a++)s.push(n,n+a+2,n+a+1);s.push(n,n+1,n+t);for(let a=0;a<t;a++){const r=a+1,i=(a+1)%t+1,d=r+t,M=i+t;s.push(r,d,i),s.push(i,d,M)}const m=new p;return m.setAttribute("position",new b(e,3)),m.setIndex(s),m.computeVertexNormals(),m}positionFragment(t,e){let s;switch(this.params.distribution){case"edge":s=this.generateEdgePosition(e);break;case"surface":s=this.generateSurfacePosition();break;case"random":default:s=this.generateRandomPosition();break}t.position.copy(s)}generateEdgePosition(t){const e=t/this.params.fragmentCount*Math.PI*2,s=this.planetRadius*(.95+Math.random()*.1),o=(Math.random()-.5)*this.planetRadius*.5;return new h(Math.cos(e)*s,o,Math.sin(e)*s)}generateSurfacePosition(){const t=Math.random()*Math.PI*2,e=Math.acos(Math.random()*2-1),s=this.planetRadius*(1+Math.random()*.05);return new h(s*Math.sin(e)*Math.cos(t),s*Math.sin(e)*Math.sin(t),s*Math.cos(e))}generateRandomPosition(){const t=this.planetRadius*(.8+Math.random()*.4),e=Math.random()*Math.PI*2,s=Math.random()*Math.PI*2;return new h(t*Math.sin(e)*Math.cos(s),t*Math.sin(e)*Math.sin(s),t*Math.cos(e))}addToScene(t,e){e&&this.fragments.position.copy(e),t.add(this.fragments)}update(t){this.fragmentMeshes.forEach((e,s)=>{const o=e.userData;e.rotateOnAxis(o.rotationAxis,o.rotationSpeed*t*this.params.animationSpeed);const n=Math.sin(Date.now()*.001+s)*.001;e.position.y+=n*t}),this.fragments.rotation.y+=t*.01*this.params.animationSpeed}updateParams(t){if(this.params={...this.params,...t},t.color){const e=t.color instanceof c?t.color:new c(t.color);this.fragmentMeshes.forEach(s=>{s.material instanceof g&&(s.material.color=e)})}(t.metalness!==void 0||t.roughness!==void 0)&&this.fragmentMeshes.forEach(e=>{e.material instanceof g&&(t.metalness!==void 0&&(e.material.metalness=t.metalness),t.roughness!==void 0&&(e.material.roughness=t.roughness))}),(t.size!==void 0||t.fragmentCount!==void 0)&&this.regenerateFragments()}regenerateFragments(){this.fragmentMeshes.forEach(t=>{t.geometry&&t.geometry.dispose(),t.material instanceof f&&t.material.dispose()}),this.fragments.clear(),this.fragmentMeshes=[],this.generateFragments()}getObject3D(){return this.fragments}getFragmentMeshes(){return[...this.fragmentMeshes]}dispose(){this.fragmentMeshes.forEach(t=>{t.geometry&&t.geometry.dispose(),t.material instanceof f&&t.material.dispose()}),this.fragmentMeshes=[],this.fragments.clear()}}export{F};
