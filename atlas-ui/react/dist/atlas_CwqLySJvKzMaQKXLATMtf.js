import{c as U,R as Y}from"./atlas_bp4QKZBDxvNtcCXK80v43.js";import{c as L,A as V,a as E,b as j,d as H,e as J}from"./atlas_CA344NpOBMGWg9HFuABbE.js";import{c as P,L as K,a as Q}from"./atlas_R_XvYion9zqcklY_GteVM.js";import{c as x}from"./atlas_AY7rlEqGy4LS6Ya1dlGVA.js";import{c as C,T as X}from"./atlas_B8AqTg3tSNem1fB4apC0B.js";import{c as Z,A as R}from"./atlas_CMUvaCD4mo7XQYkYXSJfw.js";import{P as D,c as ee}from"./atlas_VOH_aZaK8QZhfyJlIm9Ly.js";import{g as T,c as te,P as se}from"./atlas_xd5LNBgcOa5CzFEgor2Hm.js";import{P as re}from"./atlas_Bm4EuWm0BFwIUEh_XY1IK.js";import{c as $}from"./atlas_G5tdEP2OrMSd6N6qvkFcr.js";import{c as k}from"./atlas_DHZeGIjNF73GHEmrQp6nE.js";import{c as ae}from"./atlas_CVfcEBkKTTMs_3IaCRzRE.js";import{c as oe}from"./atlas_BvazszwIVtr42ZYiFginB.js";import{c as ce}from"./atlas_BL2ZOBI-zhTUiijzsY4Dk.js";import{c as fe}from"./atlas_BaldOS_iSEeUIyZBxfB94.js";import{c as M,A as ne}from"./atlas_B9yZ95D5a3z7xtI3RCRwn.js";import{c as ie,S as le}from"./atlas_BsGYEWSilgaWxTBvj5raj.js";import{P as A}from"./atlas_CmYGdDkCK2sCRU_Obg1H6.js";import{F as v}from"./atlas_B4KeL5UEbd9M40Y_sMAYc.js";import{c as de,O as me}from"./atlas_BzK4Az4Fofiamef8c-xL9.js";import{c as O,F as pe}from"./atlas__Fz15fTifKAuXwoa0MSvM.js";import{c as G,A as ue}from"./atlas_DgekZc0a5GT7ev-77mP9J.js";import{c as he}from"./atlas_BsdvMvzVSoYT-ce7kwn7V.js";import{c as ye,V as _e}from"./atlas_DXCbdwWBtFNPjiqZ_8vQw.js";import{g as q}from"./atlas_Ce3hh0hgxYWauQ_qSK6cl.js";const ge=!1;class S{static instance;creators=new Map;effects=new Map;nextId=1;layerSystem;constructor(){this.registerDefaultEffects()}static getInstance(){return S.instance||(S.instance=new S),S.instance}registerDefaultEffects(){this.registerEffect("atmosphere_glow",{create:(e,t)=>new V(t,e),fromPythonData:(e,t)=>L(t,e.atmosphere||{})}),this.registerEffect("atmosphere_clouds",{create:(e,t)=>new j(t,e),fromPythonData:(e,t)=>E(t,e.surface_elements||{})}),this.registerEffect("atmospheric_streaks",{create:(e,t)=>new ne(t,e),fromPythonData:(e,t)=>M(t,e.atmosphere||{})}),this.registerEffect("atmosphere",{create:(e,t)=>new J(t,e),fromPythonData:(e,t)=>H(t,e)}),this.registerEffect("ring_system",{create:(e,t)=>new Y(t,e),fromPythonData:(e,t)=>U(e.rings||{},t)}),this.registerEffect("fragmentation",{create:(e,t)=>new v(t,e),fromPythonData:(e,t)=>new v(t,{color:e.surface?.fragment_color||[.3,.3,.3],fragmentCount:e.surface?.fragment_count||20})}),this.registerEffect("land_masses",{create:(e,t)=>new K(t,e),fromPythonData:(e,t)=>P(t,e.surface_elements||{},e.seeds?.planet_seed)}),this.registerEffect("ocean_waves",{create:(e,t)=>new me(e),fromPythonData:(e,t)=>de(e)}),this.registerEffect("aquifer_water",{create:(e,t,a)=>new ue(a,e),fromPythonData:(e,t,a)=>G(a,e)}),this.registerEffect("fluid_layers",{create:(e,t)=>new pe(t,e),fromPythonData:(e,t)=>O(t,e)}),this.registerEffect("lava_flows",{create:(e,t)=>(console.warn("Lava flows effect not implemented yet"),null)}),this.registerEffect("crystal_formations",{create:(e,t)=>(console.warn("Crystal formations effect not implemented yet"),null)}),this.registerEffect("star_field",{create:(e,t)=>new le(t,e),fromPythonData:(e,t)=>ie(t,e.seeds?.planet_seed||e.planet_seed)}),this.registerEffect("tundra_snowflakes",{create:(e,t)=>new X(t,e),fromPythonData:(e,t)=>C(t,e.surface_elements||{},e.seeds?.planet_seed)}),this.registerEffect("anomaly_phase_matter",{create:(e,t)=>new R(t,e),fromPythonData:(e,t)=>Z(t,e.surface_elements||{},e.seeds?.planet_seed)}),this.registerEffect("pulsating_cube",{create:(e,t)=>new D(t,e),fromPythonData:(e,t)=>{const a=T(e);return ee(t,e.surface_elements||{},e.seeds?.planet_seed,a,e)}}),this.registerEffect("planet_rays",{create:(e,t)=>new se(t,e),fromPythonData:(e,t)=>te(t,e.surface_elements||{},e.seeds?.planet_seed)}),this.registerEffect("visual_debug_3d",{create:(e,t)=>new _e(t,e),fromPythonData:(e,t)=>ye(e,t)})}registerEffect(e,t){this.creators.set(e,t)}createEffect(e,t,a,f,p=0){const c=this.creators.get(e);if(!c)return console.warn(`Effect type '${e}' not registered`),null;try{const i=c.create(t,a,f);if(!i)return null;const u={id:`effect_${this.nextId++}`,type:e,effect:i,priority:p,enabled:!0};return this.effects.set(u.id,u),u}catch(i){return console.error(`Error creating effect '${e}':`,i),null}}createEffectFromPythonData(e,t,a,f,p=0){const c=this.creators.get(e);if(!c||!c.fromPythonData)return this.createEffect(e,t,a,f,p);try{const i=c.fromPythonData(t,a,f);if(!i)return null;const u={id:`effect_${this.nextId++}`,type:e,effect:i,priority:p,enabled:!0};return this.effects.set(u.id,u),u}catch(i){return console.error(`Error creating effect '${e}' from Python data:`,i),null}}createEffectsFromList(e,t,a){const f=[],p=e.sort((c,i)=>(c.priority||0)-(i.priority||0));for(const c of p){const i=this.createEffect(c.type,c.params,t,a,c.priority);i&&(i.enabled=c.enabled!==!1,f.push(i))}return f}createEffectsFromPythonPlanetData(e,t,a,f,p){const c=[];try{const i=T(e);if(p?this.layerSystem=p:this.layerSystem=new re(a,i),e.surface_elements){const s=e.surface_elements;if(s.effects_3d&&Array.isArray(s.effects_3d))for(const d of s.effects_3d){if(d.type==="atmospheric_streaks"){const _=M(t,d.params,e.seeds?.shape_seed+3e3),g={id:`effect_${this.nextId++}`,type:"atmospheric_streaks",effect:_,priority:d.priority||0,enabled:!0,name:"Atmospheric Streaks"};this.effects.set(g.id,g),c.push(g),_.addToScene(f,a.position);continue}const h=this.createEffect(d.type,d.params,t,a,d.priority||0);h?(h.name=d.type.replace(/_/g," ").replace(/\b\w/g,_=>_.toUpperCase()),c.push(h),h.effect.apply&&h.effect.apply(a),h.effect.addToScene&&h.effect.addToScene(f,a.position)):console.error("❌ FALLO AL CREAR EFECTO:",d.type)}switch(console.log(`🔍 Planet surface type: "${s.type}"`),console.log(`🔍 Planet info type: "${e.planet_info?.type}"`),s.type.toLowerCase()){case"gas_giant":if(this.layerSystem){const r=$(this.layerSystem,{...s,base_color:i,turbulence:e.turbulence||s.turbulence},e.seeds?.shape_seed||e.seeds?.planet_seed||e.seeds?.planet_seed),o=k(this.layerSystem,{...s,base_color:i,storm_intensity:e.storm_intensity||s.storm_intensity},(e.seeds?.shape_seed||e.seeds?.planet_seed)+1e3),m={id:`effect_${this.nextId++}`,type:"cloud_bands_layer",effect:r,priority:0,enabled:!0};this.effects.set(m.id,m),c.push(m);const l={id:`effect_${this.nextId++}`,type:"cloud_gyros_layer",effect:o,priority:1,enabled:!0};if(this.effects.set(l.id,l),c.push(l),s.polar_hexagon&&s.polar_hexagon.enabled){const n=e.timing?.elapsed_time?e.timing.elapsed_time/31557600:0,y=new A({planetColor:i,hexagonData:s.polar_hexagon,planetRadius:t,currentTime:n}),I={id:`effect_${this.nextId++}`,type:"polar_hexagon",effect:y,priority:10,enabled:!0};this.effects.set(I.id,I),c.push(I),f&&y.addToScene(f)}}else console.error("❌ PlanetLayerSystem not initialized!");break;case"frozen_gas_giant":if(this.layerSystem){const r=$(this.layerSystem,{...s,base_color:i,turbulence:e.turbulence||s.turbulence,icy_tint:!0},e.seeds?.shape_seed||e.seeds?.planet_seed),o={id:`effect_${this.nextId++}`,type:"cloud_bands_layer",effect:r,priority:0,enabled:!0};if(this.effects.set(o.id,o),c.push(o),s.polar_hexagon&&s.polar_hexagon.enabled){const m=e.timing?.elapsed_time?e.timing.elapsed_time/31557600:0,l=new A({planetColor:i,hexagonData:s.polar_hexagon,planetRadius:t,currentTime:m}),n={id:`effect_${this.nextId++}`,type:"polar_hexagon",effect:l,priority:10,enabled:!0};this.effects.set(n.id,n),c.push(n),f&&l.addToScene(f)}}break;case"aquifer":console.log("🌊 Processing Aquifer planet with surface data:",s),console.log("🌊 Surface.clouds:",s.clouds);const d=G(this.layerSystem,e);if(d){const r={id:`effect_${this.nextId++}`,type:"aquifer_water",effect:d,priority:2,enabled:!0,name:"Aquifer Water Surface"};this.effects.set(r.id,r),c.push(r),console.log("🌊 AquiferWater effect added for aquifer planet")}const h=he(this.layerSystem,e);if(h){const r={id:`effect_${this.nextId++}`,type:"ocean_currents",effect:h,priority:1,enabled:!0,name:"Ocean Currents"};this.effects.set(r.id,r),c.push(r),console.log("🌊 Ocean Currents effect added for aquifer planet")}if(s.clouds&&s.clouds.length>0){const r=E(t,s,(e.seeds?.shape_seed||e.seeds?.planet_seed)+4e3),o={id:`effect_${this.nextId++}`,type:"atmosphere_clouds",effect:r,priority:15,enabled:!0,name:"Atmospheric Clouds"};this.effects.set(o.id,o),c.push(o),r.addToScene(f,a.position),console.log("☁️ Atmospheric Clouds added to Aquifer planet")}if(s.land_masses&&s.land_masses.length>0){const r=P(t,s,(e.seeds?.shape_seed||e.seeds?.planet_seed)+7e3);if(r){const o={id:`effect_${this.nextId++}`,type:"land_masses",effect:r,priority:3,enabled:!0,name:"Emergent Land Masses"};this.effects.set(o.id,o),c.push(o),r.addToScene(f,a.position)}}if(s.atmosphere_clouds&&s.atmosphere_clouds.length>0){const r=E(t,s,(e.seeds?.shape_seed||e.seeds?.planet_seed)+8e3);if(r){const o={id:`effect_${this.nextId++}`,type:"atmosphere_clouds",effect:r,priority:4,enabled:!0,name:"Atmospheric Clouds"};this.effects.set(o.id,o),c.push(o),r.addToScene(f,a.position)}}break;case"nebulous":if(this.layerSystem){const r=k(this.layerSystem,{...s,base_color:i,storm_intensity:s.nebula_density||.6,color_variance:s.color_variance||.2},(e.seeds?.shape_seed||e.seeds?.planet_seed)+2e3),o={id:`effect_${this.nextId++}`,type:"cloud_gyros_layer",effect:r,priority:0,enabled:!0};if(this.effects.set(o.id,o),c.push(o),s.polar_hexagon&&s.polar_hexagon.enabled){const m=e.timing?.elapsed_time?e.timing.elapsed_time/31557600:0,l=new A({planetColor:i,hexagonData:s.polar_hexagon,planetRadius:t,currentTime:m}),n={id:`effect_${this.nextId++}`,type:"polar_hexagon",effect:l,priority:10,enabled:!0};this.effects.set(n.id,n),c.push(n),f&&l.addToScene(f)}}break;case"metallic":case"metallic_3d":if(this.layerSystem){const r=ce(this.layerSystem,e,e.seeds?.shape_seed||e.seeds?.planet_seed),o={id:`effect_${this.nextId++}`,type:"metallic_surface_layer",effect:r,priority:0,enabled:!0};this.effects.set(o.id,o),c.push(o)}break;case"diamond":if(this.layerSystem){const r=fe(this.layerSystem,e,e.seeds?.shape_seed||e.seeds?.planet_seed),o={id:`effect_${this.nextId++}`,type:"diamond_surface_layer",effect:r,priority:0,enabled:!0};this.effects.set(o.id,o),c.push(o)}break;case"rocky":if(this.layerSystem){const r=ae(this.layerSystem,e,e.seeds?.shape_seed||e.seeds?.planet_seed),o={id:`effect_${this.nextId++}`,type:"rocky_terrain_layer",effect:r,priority:0,enabled:!0};if(this.effects.set(o.id,o),c.push(o),s.clouds&&s.clouds.length>0){const m=E(t,s,(e.seeds?.shape_seed||e.seeds?.planet_seed)+4e3),l={id:`effect_${this.nextId++}`,type:"atmosphere_clouds",effect:m,priority:15,enabled:!0,name:"Atmospheric Clouds"};this.effects.set(l.id,l),c.push(l),m.addToScene(f,a.position)}}break;case"icy":if(this.layerSystem){const r=oe(this.layerSystem,e,e.seeds?.shape_seed||e.seeds?.planet_seed),o={id:`effect_${this.nextId++}`,type:"icy_terrain_layer",effect:r,priority:0,enabled:!0};this.effects.set(o.id,o),c.push(o);const m=Q(t,s,(e.seeds?.shape_seed||e.seeds?.planet_seed)+8e3);if(m){const n={id:`effect_${this.nextId++}`,type:"transparent_land_masses",effect:m,priority:1,enabled:!0,name:"Ice Formations"};this.effects.set(n.id,n),c.push(n),m.addToScene(f,a.position),console.log("🧊 Ice Formations (transparent LandMasses) added to Icy planet")}else console.warn("❄️ Failed to create transparent LandMasses for Icy planet");if(s.clouds&&s.clouds.length>0){const n=E(t,s,(e.seeds?.shape_seed||e.seeds?.planet_seed)+4e3),y={id:`effect_${this.nextId++}`,type:"atmosphere_clouds",effect:n,priority:15,enabled:!0,name:"Atmospheric Clouds"};this.effects.set(y.id,y),c.push(y),n.addToScene(f,a.position),console.log("☁️ Atmospheric Clouds added to Icy planet")}const l=x(t,s,(e.seeds?.shape_seed||e.seeds?.planet_seed)+9e3);if(l){const n={id:`effect_${this.nextId++}`,type:"icy_features",effect:l,priority:2,enabled:!0,name:"Ice Crystals & Features"};this.effects.set(n.id,n),c.push(n),l.addToScene(f,a.position),console.log("❄️ Icy Features (crystals, cracks, ice caps) added to Icy planet")}}break;case"oceanic":const _=O(t,e);if(_){const r={id:`effect_${this.nextId++}`,type:"fluid_layers",effect:_,priority:3,enabled:!0,name:"Fluid Ocean Layers"};this.effects.set(r.id,r),c.push(r),_.addToScene(f,a.position),console.log("🌊 FluidLayers effect added for oceanic planet")}if(s.green_patches&&s.green_patches.length>0){const r=P(t,s,(e.seeds?.shape_seed||e.seeds?.planet_seed)+6e3);if(r){const o={id:`effect_${this.nextId++}`,type:"land_masses",effect:r,priority:5,enabled:!0,name:"Land Masses (Islands)"};this.effects.set(o.id,o),c.push(o),r.addToScene(f,a.position)}}if(s.clouds&&s.clouds.length>0){const r=E(t,s,(e.seeds?.shape_seed||e.seeds?.planet_seed)+4e3),o={id:`effect_${this.nextId++}`,type:"atmosphere_clouds",effect:r,priority:15,enabled:!0,name:"Atmospheric Clouds"};this.effects.set(o.id,o),c.push(o),r.addToScene(f,a.position)}break;case"tundra":if(s.green_patches&&s.green_patches.length>0){const r=P(t,s,(e.seeds?.shape_seed||e.seeds?.planet_seed)+6e3);if(r){const o={id:`effect_${this.nextId++}`,type:"land_masses",effect:r,priority:5,enabled:!0,name:"Tundra Terrain"};this.effects.set(o.id,o),c.push(o),r.addToScene(f,a.position),console.log("🏔️ Tundra terrain (LandMasses) added")}}const g=x(t,s,(e.seeds?.shape_seed||e.seeds?.planet_seed)+9e3);if(g){const r={id:`effect_${this.nextId++}`,type:"icy_features",effect:g,priority:6,enabled:!0,name:"Snow Patches & Ice"};this.effects.set(r.id,r),c.push(r),g.addToScene(f,a.position),console.log("❄️ Sparse ice features added to Tundra planet")}if(s.clouds&&s.clouds.length>0){const r=E(t,s,(e.seeds?.shape_seed||e.seeds?.planet_seed)+4e3),o={id:`effect_${this.nextId++}`,type:"atmosphere_clouds",effect:r,priority:15,enabled:!0,name:"Atmospheric Clouds"};this.effects.set(o.id,o),c.push(o),r.addToScene(f,a.position),console.log("☁️ Atmospheric clouds added to Tundra planet")}const F=C(t,s,(e.seeds?.shape_seed||e.seeds?.planet_seed)+15e3);if(F){const r={id:`effect_${this.nextId++}`,type:"tundra_snowflakes",effect:F,priority:20,enabled:!0,name:"Snowflakes"};this.effects.set(r.id,r),c.push(r),F.addToScene(f,a.position),console.log("❄️ Tundra snowflakes added to Tundra planet")}break;case"anomaly":console.log("🌌 DETECTED ANOMALY PLANET - Creating effects"),console.log("🌌 Planet data:",{surfaceType:s.type,planetType:e.planet_info?.type}),console.log("🎭 SHOWCASE MODE: Activating ALL anomaly effects for evaluation");const w=["anomaly_phase_matter","pulsating_cube","planet_rays"],N=e.seeds?.planet_seed||Math.floor(Math.random()*1e6),z=w.length;for(let r=0;r<z;r++){const o=w[r],m=N+r*1e4,l=this.createEffectFromPythonData(o,{...e,seeds:{...e.seeds,planet_seed:m}},t,a,10+r);l&&(l.name=o.replace(/_/g," ").replace(/\b\w/g,n=>n.toUpperCase()),c.push(l),l.effect.addToScene&&l.effect.addToScene(f,a.position),console.log(`🎭 Added anomaly effect: ${l.name}`))}if(e.atmosphere&&e.atmosphere.type!=="None"){const r=this.createEffectFromPythonData("atmosphere",e.atmosphere,t,a,5);r&&(c.push(r),r.effect.addToScene(f,a.position),console.log("🌫️ Anomalous atmosphere added"))}break;default:if(e.planet_info?.type?.toLowerCase()==="anomaly"){console.log("🌌 DETECTED ANOMALY PLANET via planet_info.type - Creating effects"),console.log("🎭 SHOWCASE MODE (alt detection): Activating ALL anomaly effects for evaluation");const o=["anomaly_phase_matter","pulsating_cube","planet_rays"],m=e.seeds?.planet_seed||Math.floor(Math.random()*1e6),l=o.length;for(let n=0;n<l;n++){const y=o[n],I=m+n*1e4,b=this.createEffectFromPythonData(y,{...e,seeds:{...e.seeds,planet_seed:I}},t,a,10+n);b&&(b.name=y.replace(/_/g," ").replace(/\b\w/g,B=>B.toUpperCase()),c.push(b),b.effect.addToScene&&b.effect.addToScene(f,a.position),console.log(`🎭 Added anomaly effect: ${b.name}`))}if(e.atmosphere&&e.atmosphere.type!=="None"){const n=this.createEffectFromPythonData("atmosphere",e.atmosphere,t,a,5);n&&(c.push(n),n.effect.addToScene(f,a.position),console.log("🌫️ Anomalous atmosphere added"))}}else if(a.material instanceof q){const r=T(e);a.material.color.copy(r)}break}}else if(a.material instanceof q){const s=T(e);a.material.color.copy(s)}const u=e.planet_info?.type?.toLowerCase()||e.surface_elements?.type?.toLowerCase(),W=u==="anomaly"||e.surface_elements?.type==="anomaly";if(e.atmosphere&&!W){if(e.atmosphere.streaks||["Gas Giant","Frozen Gas Giant"].includes(e.planet_info?.type)){const s=L(t,e.atmosphere||{},e.seeds?.shape_seed+2e3);if(s){const d={id:`effect_${this.nextId++}`,type:"atmosphere_glow",effect:s,priority:20,enabled:!0};this.effects.set(d.id,d),c.push(d),s.addToScene(f,a.position)}}if(e.atmosphere.type&&e.atmosphere.type!=="None"){const s={...e.atmosphere};u==="oceanic"&&(s.opacity=Math.min(s.opacity||.3,.15),s.width=Math.min(s.width||15,8));const d=this.createEffectFromPythonData("atmosphere",s,t,a,5);d&&(c.push(d),d.effect.addToScene(f,a.position))}}if(e.rings&&e.rings.has_rings||["Gas Giant","Frozen Gas Giant","Super Earth"].includes(e.planet_info?.type)){const s=this.createEffectFromPythonData("ring_system",e,t,a,1);s?(c.push(s),s.effect.addToScene(f,a.position)):console.warn("⚠️ Failed to create ring effect")}if(e.surface_elements?.has_fragmentation_zones){const s=this.createEffectFromPythonData("fragmentation",e,t,a,5);s&&(c.push(s),s.effect.addToScene(f,a.position))}this.layerSystem&&this.layerSystem.addToScene(f);try{const s=this.createEffectFromPythonData("star_field",e,t,a,-100);s&&s.effect&&(s.effect.addToScene(f,a.position),c.push(s),console.log("⭐ StarField added automatically using planet seed:",e.seeds?.planet_seed))}catch(s){console.warn("Could not create StarField:",s)}return c.forEach((s,d)=>{}),c.length===0&&console.warn("⚠️ NO EFFECTS WERE CREATED! Check the data structure and conditions."),c}catch(i){throw console.error("Error in EffectRegistry.createEffectsFromPythonPlanetData:",i),i}}getEffect(e){return this.effects.get(e)||null}getEffectsByType(e){return Array.from(this.effects.values()).filter(t=>t.type===e)}getAllEffects(){return Array.from(this.effects.values())}toggleEffect(e,t){const a=this.effects.get(e);if(a){a.enabled=t!==void 0?t:!a.enabled;const f=a.effect;if(f&&f.getObject3D){const p=f.getObject3D();p&&(p.visible=a.enabled,console.log(`🎮 Toggle effect ${a.type}: visible = ${a.enabled}`))}if(this.layerSystem){const p=this.layerSystem.getLayerMeshes(),i={cloud_bands_layer:"cloudBands",cloud_gyros_layer:"cloudGyros",metallic_surface_layer:"metallicSurface",diamond_surface_layer:"diamondSurface",rocky_terrain_layer:"rockyTerrain",icy_terrain_layer:"icyTerrain",aquifer_water:"aquiferWater",ocean_currents:"oceanCurrents"}[a.type];i&&p[i]&&(p[i].visible=a.enabled)}}else console.warn(`⚠️ Effect not found: ${e}`)}updateAllEffects(e,t){this.layerSystem&&this.layerSystem.update(e,t);for(const a of this.effects.values())if(a.enabled&&a.effect.update)try{a.effect.update(e,t)}catch(f){console.error(`Error updating effect ${a.type}:`,f)}}updateLightForAllEffects(e){console.log("🔆 updateLightForAllEffects called with light position:",e.position),this.layerSystem&&this.layerSystem.updateFromThreeLight(e),console.log("🔆 Checking",this.effects.size,"effects for light updates");for(const t of this.effects.values())if(console.log(`🔆 Effect ${t.type}, enabled: ${t.enabled}, hasUpdateFromThreeLight: ${!!t.effect.updateFromThreeLight}`),t.enabled&&t.effect.updateFromThreeLight)try{console.log(`🔆 Updating light for effect: ${t.type}`),t.effect.updateFromThreeLight(e)}catch(a){console.error(`Error updating light for effect ${t.type}:`,a)}}removeEffect(e){const t=this.effects.get(e);t&&(t.effect.dispose&&t.effect.dispose(),this.effects.delete(e))}clearAllEffects(){this.layerSystem&&(this.layerSystem.dispose(),this.layerSystem=void 0);for(const e of this.effects.values())e.effect.dispose&&e.effect.dispose();this.effects.clear(),this.nextId=1}getStats(){const e=Array.from(this.effects.values());return{registeredTypes:this.creators.size,activeEffects:e.length,enabledEffects:e.filter(t=>t.enabled).length}}getAvailableEffectTypes(){return Array.from(this.creators.keys())}}const je=S.getInstance();export{je as e};
