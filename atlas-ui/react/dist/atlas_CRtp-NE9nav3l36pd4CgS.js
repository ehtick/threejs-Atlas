import{S as z,g as G,D as k}from"./atlas_BJ-3dIBoTMvLRTvbW4jvB.js";import{G as x,C as h,B as A,a as O,s as L,N as v,L as R,V as F}from"./atlas_CqUMNY_RyRklhCsbOI68T.js";class Z{snowflakeGroup;planetRadius;materials=[];particleSystems=[];trailPositions=[];trailColors=[];globalWindDirection;rng;startTime;timeSpeed;trailLength=15;particleCount;rotationSpeed;particleOpacity;windSpeedMultiplier;verticalOscillation;gustCycles;gustPhases;gustZones;burstZone;burstCycleDuration;burstDuration;burstStartOffset;constructor(s,i={}){this.snowflakeGroup=new x,this.planetRadius=s;const r=i.seed||Math.floor(Math.random()*1e6);this.rng=new z(r),this.particleCount=i.particleCount||10,i.windSpeed;const d=(i.size||1)*(s*.2),n=i.opacity||1;this.globalWindDirection=this.rng.uniform(0,Math.PI*2),this.startTime=this.rng.uniform(0,1e3),this.timeSpeed=this.rng.uniform(2,4),this.rotationSpeed=this.rng.uniform(.2,.8),this.particleOpacity=this.rng.uniform(.05,.25),this.windSpeedMultiplier=this.rng.uniform(1.1,2.5),this.verticalOscillation=this.rng.uniform(.1,.4),this.gustCycles=[],this.gustPhases=[],this.gustZones=[];for(let a=0;a<this.particleCount;a++){this.gustCycles.push(this.rng.uniform(15,30)),this.gustPhases.push(this.rng.uniform(0,1));const e=this.rng.uniform(0,Math.PI*2),t=this.rng.uniform(Math.PI*.3,Math.PI*.6);this.gustZones.push({start:e,end:(e+t)%(Math.PI*2)})}this.burstZone={lat:this.rng.uniform(-Math.PI/3,Math.PI/3),lon:this.rng.uniform(0,Math.PI*2),radius:this.rng.uniform(1.2,2)},this.burstCycleDuration=this.rng.uniform(45,75),this.burstDuration=this.rng.uniform(8,15),this.burstStartOffset=this.rng.uniform(0,this.burstCycleDuration);const o=i.colors||[new h(1,1,1),new h(.9,.9,.9),new h(.7,.7,.7),new h(.5,.5,.5),new h(.3,.3,.3)];this.createSnowflakeSystem(this.particleCount,d,n,o)}createSnowflakeSystem(s,i,r,d){const n=[];for(let e=0;e<s;e++){let t,u,p,m=0;do{const l=(this.rng.uniform(-1,1)+this.rng.uniform(-1,1))*.2,w=this.rng.uniform(-1,1)*this.burstZone.radius;t=Math.max(0,Math.min(Math.PI,this.burstZone.lat+Math.PI/2+l)),u=(this.burstZone.lon+w)%(Math.PI*2);const P=Math.abs(t-(this.burstZone.lat+Math.PI/2)),y=Math.min(Math.abs(u-this.burstZone.lon),Math.PI*2-Math.abs(u-this.burstZone.lon));p=Math.max(P/.3,y/this.burstZone.radius),m++}while(p>1&&m<10);p>1&&(t=this.burstZone.lat+Math.PI/2+this.rng.uniform(-.1,.1),u=this.burstZone.lon+this.rng.uniform(-this.burstZone.radius,this.burstZone.radius));const c=this.planetRadius*this.rng.uniform(1.001,1.005),g=c*Math.sin(t)*Math.cos(u),b=c*Math.cos(t),f=c*Math.sin(t)*Math.sin(u);n.push(g,b,f)}const o=[],a=new h;for(let e=0;e<this.trailLength;e++){const t=Math.pow(1-e/(this.trailLength-1),1.5);a.setRGB(t,t,t),o.push(a.r,a.g,a.b)}for(let e=0;e<s;e++){const t=e*3,u=n[t],p=n[t+1],m=n[t+2],c=new Float32Array(this.trailLength*3);for(let l=0;l<this.trailLength;l++){const w=l*.1;c[l*3]=u+this.rng.uniform(-1,1)*w*this.planetRadius*.01,c[l*3+1]=p+this.rng.uniform(-1,1)*w*this.planetRadius*.01,c[l*3+2]=m+this.rng.uniform(-1,1)*w*this.planetRadius*.01}const g=new A;g.setAttribute("position",new O(c,3)),g.setAttribute("color",new O(new Float32Array(o),3));const b=new L({vertexColors:!0,transparent:!0,opacity:this.particleOpacity,blending:v,depthTest:!0,linewidth:3}),f=new R(g,b);this.materials.push(b),this.particleSystems.push(f),this.trailPositions.push(c),this.trailColors.push(new Float32Array(o)),f.rnd=this.rng.uniform(0,1),f.particleIndex=e,this.snowflakeGroup.add(f)}}update(s=.016){const r=G(k,this.timeSpeed,this.startTime),n=(Date.now()/1e3+this.burstStartOffset)%this.burstCycleDuration;n<this.burstDuration&&n/this.burstDuration,this.snowflakeGroup.visible=!0,this.particleSystems.forEach((o,a)=>{const e=o.geometry.getAttribute("position"),t=e.array,u=o.rnd,p=o.particleIndex,m=this.calculateTrailPath(r,p,u);for(let C=this.trailLength-1;C>0;C--){const D=C*3,T=(C-1)*3;t[D]=t[T],t[D+1]=t[T+1],t[D+2]=t[T+2]}t[0]=m.x,t[1]=m.y,t[2]=m.z,e.needsUpdate=!0;const c=Date.now()/1e3,g=this.gustCycles[a],b=this.gustPhases[a],f=(c/g+b)%1;let l=0;f<.3?l=f/.3:f<.7?l=1:l=(1-f)/.3;const w=new F(t[0],t[1],t[2]),P=Math.atan2(w.z,w.x),y=P<0?P+Math.PI*2:P,S=this.gustZones[a];let I=!1;S.start<S.end?I=y>=S.start&&y<=S.end:I=y>=S.start||y<=S.end,this.materials[a].opacity=I?this.particleOpacity*l:0})}calculateTrailPath(s,i,r){s+=10*r+i*.1;const d=this.burstZone.lon+(r-.5)*this.burstZone.radius,n=this.burstZone.lat+Math.PI/2+(r-.5)*.2,o=this.windSpeedMultiplier,a=s*o,e=d+Math.cos(this.globalWindDirection)*a,t=n+this.verticalOscillation*Math.sin(s*.5+r),u=.015*Math.sin(s*2+r*10),p=this.planetRadius*(1.005+u),m=p*Math.sin(t)*Math.cos(e),c=p*Math.cos(t),g=p*Math.sin(t)*Math.sin(e);return{x:m,y:c,z:g}}addToScene(s,i){i&&this.snowflakeGroup.position.copy(i),s.add(this.snowflakeGroup)}getObject3D(){return this.snowflakeGroup}dispose(){this.materials.forEach(s=>s.dispose()),this.particleSystems.forEach(s=>s.geometry.dispose()),this.materials=[],this.particleSystems=[],this.trailPositions=[],this.trailColors=[],this.snowflakeGroup.clear()}}function _(M,s,i){if(s.type!=="tundra")return null;const r=i||Math.floor(Math.random()*1e6),d=s.snow_intensity||.7,n=s.wind_strength||1,o=Math.floor(d*200+50),a=n*5;return new Z(M,{particleCount:o,windSpeed:a,size:1.2,opacity:.9,seed:r+15e3})}function W(M,s,i){const r=i||Math.floor(Math.random()*1e6),d=[new h(.8,.7,.6),new h(.9,.8,.7),new h(.6,.5,.4),new h(1,.9,.8),new h(.7,.6,.5)],n=15,o=2.5;return new Z(M,{particleCount:n,windSpeed:o,size:1.5,opacity:1,colors:d,seed:r+15e3})}function N(M,s,i){const r=i||Math.floor(Math.random()*1e6),d=[new h(.9,.8,.6),new h(.8,.7,.5),new h(.7,.6,.4),new h(1,.9,.7),new h(.6,.5,.3)],n=12,o=3.5;return new Z(M,{particleCount:n,windSpeed:o,size:1.3,opacity:.8,colors:d,seed:r+15e3})}export{Z as T,W as a,N as b,_ as c};
